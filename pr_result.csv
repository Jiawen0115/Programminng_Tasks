Title,Labels,Reviewers,Assignees,Comments,Opened time,Closed time,Number of commits,Number of changed files,Number of participants
Issue#1874 Fix ByteArrayDataInput Javadoc,,,,"Xaerxess: So Guava moved to Github! This is my first (and very small) fix: I spotted improperly closed tag in ByteArrayDataInput's Javadoc. Should be OK now.  gk5885: That's awesome.  Even for such a small change, can you fill out https://cla.developers.google.com/about/google-individual ?  gk5885: Also, just to make sure‚Ä¶  @cgruber and @cgdecker, we have the repository sync working both ways, right?  Xaerxess: No problem, I've just signed individual CLA.  cgdecker: @gk5885 I don't think we do have sync working both ways at the moment, unfortunately. If possible I'd definitely like to get it working of course, but I've been under the impression that 2-way syncing is difficult with the google-internal stuff mixed in. In the meantime I suppose we can handle pull requests by patching in the changes internally... can even set the author of the commit to the right person when syncing out potentially.  sameb: FWIW, two-way sync works fine for Guice, though we have limited google-internal things.  cgdecker: @Xaerxess Thanks! While we can't merge pull requests directly (see #1878), I merged this change internally and it's been synced out in 1b82532. In the future we should be able to make commits from pull requests actually attributed to you, but we didn't with this one, so sorry about that.  ",2014-11-01 22:15:18,2014-11-04 21:34:23,1,1,4
Issue#1876 Replace Google Code URLs with corresponding GitHub URLs,,,,"joschi: The guava-parent Maven POM still contains URLs pointing to Google Code for issues and SCM. This changesets updates the respective URLs to their counterparts on GitHub.  cgdecker: I think the developerConnection should probably be scm:git:git@github.com:google/guava.git.  joschi: GitHub does provide read/write access using HTTPS and it's their recommended way of access (see https://help.github.com/articles/which-remote-url-should-i-use/#cloning-with-https-recommended). Personally I also like access via SSH better and I can change the <developerConnection> URL if you prefer that over HTTPS.  cgdecker: I don't think it really matters too much, but my preference would be for SSH.  cgdecker: Thanks! Can you sign the Google individual CLA? Just FYI, we're going to be handling pull requests by applying the changes internally and then syncing them out rather than by merging the pull request directly. See #1878 for a little more on that.  joschi: I have signed the Google individual CLA.  cgdecker: LGTM I've gone ahead and submitted this change internally with the one minor change to use SSH for the <developerConnection> URL. Should be mirrored out shortly. Thanks!  ",2014-11-03 09:00:02,2014-11-05 20:26:19,1,1,2
Issue#1877 Add support for Travis CI,,,,"joschi: This changeset adds support for Travis CI as publicly visible means of continuous integration (additionally to the probably internally running CI system at Google). Travis CI is configured to build Guava with Oracle JDK 7, OpenJDK 7, and OpenJDK 6. Oracle JDK 8 hasn't been added to the list because of the currently unresolved issues with building Guava with Java 8. In order for this changeset to work, someone with the appropriate permissions on the Guava repository will have to activate the build on Travis CI, see Activate GitHub Webhook.  cgdecker: Thanks... as I said on the other pull request, we'll just need you to sign the Google individual CLA before we can accept the change.  joschi: I have signed the Google individual CLA.  cgdecker: Submitted internally; should be mirrored out soon.  ",2014-11-03 09:06:22,2014-11-05 20:37:13,2,2,2
Issue#1892 remove unnecessary null check,cla: yes,,,"MohandAndel: as TODO comments said to remove null boilerplate in CaseFormat.java . then I re-run CaseFormatTest test to ensure it passed .  googlebot: CLAs look good, thanks!  cgdecker: Thanks! This has been merged and synced in 1a7ecde.  ",2014-11-17 22:38:51,2014-11-19 17:06:02,1,1,3
Issue#1943 Fix typo in InetAddresses' Javadoc,cla: yes,,,"paolofulgoni: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: 3c090f5  ",2015-01-12 10:34:22,2015-01-15 22:47:25,1,1,3
Issue#1948 Add toString to DeadEvent,cla: yes,,,"paolofulgoni: Given that the main purpose of DeadEvent is logging/debugging, I think that this simple string representation could be useful. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: 252832d  ",2015-01-15 14:00:14,2015-01-15 22:47:37,1,1,3
Issue#1949 NullPointerTester: allow to override the exception type policy,,,,"philipp-classen: NullPointerTester already knows the concept of a ExceptionTypePolicy.
However, the field ""policy"" is always set to a default value. This patch adds an option to overwrite the policy to
allow IllegalArgumentExceptions. It also adds some unit tests.  philipp-classen: Hmm, Travis breaks because of an unrelated error: testLargeNumberOfInsertions(com.google.common.hash.BloomFilterTest): Java heap space  Stephan202: Apparently even more heap space is necessary. See this commit from yesterday: fa24bad.  lowasser: AFAICT, we actually have this already implemented but restricted to @GoogleInternal.  philipp-classen: @lowasser Maybe it is called ""acceptIllegalArgumentException""? That is mentioned in the commit message where the ExceptionTypePolicy was extracted (2be3428). I found the option to accept IllegalArgumentExceptions very useful, especially for existing code. If you can make it non-internally available, it would be great. By the way, are there any plans to move the NullPointerTester from the internal guava-testlib to the exported part of Guava? From my experience, it is useful for any code base and not limited to Guava itself. Not long ago, I introduced a slightly modified version of it at my company (including this IllegalArgument fix and the  Nullable annotation had to be changed). Today I was positively surprised that it is now being used all over our code base.  cgdecker: @philipp-classen We don't actually consider guava-testlib to be ""internal"". Users are free to depend on guava-testlib from their tests; we don't want to include the stuff there in the main guava artifact because depending on utilities intended for testing in non-test code isn't something you want to do generally.  philipp-classen: @cgdecker Yes, that makes sense. To be able to depend on guava-testlib is fine, too.  kartoffelsup: üëç We are using checkArgument(!Strings.isNullOrEmpty(xyz)) a lot, which is why this addition would be really great. I know it's called NullPointerTester and not PreconditionsTester or something, but if you have it internally, could you 'publish' it? :)  kevinb9n:  kartoffelsup: Solid point. I agree kevinb9n. I guess this should be closed then?  cpovirk: Hmm, I said I was going to reopen this for the request in #5643. But I had forgotten that #1949 (comment) sounded fairly definitive. Maybe @kevinb9n has opinions on whether to reopen? There's lot of discussion of ""the right type of exception"" in https://stackoverflow.com/q/3881/28465, but I think Kevin's comment above is the big point.  kevinb9n: The NPE-vs-IAE debate is one thing outside the context of NullPointerTester. There, it's more like, ""so you want to check manually; it's just as easy to do it either way, which should you go with?"" Where NPT is involved it becomes very different: the choice of IAE also commits you to manual checking of every parameter instead of ever just dereferencing. Of course, ""just dereferencing"" might sometimes have led to ambiguous exception traces, but that's been greatly improved in the JVM now. I see less reason to make a change here than ever.  ",2015-01-16 18:07:59,2017-01-29 18:06:27,1,2,7
Issue#1950 Few lines addition in README.md,cla: yes,,,"vijayk2019: Hello,
If someone is new to guava, it'd be helpful to have more information in README.md. I tried to add some more information in README.md. Source I took information from: https://code.google.com/p/guava-libraries/  cgdecker: Thanks, I've merged in a slightly modified version of this in 65c42d9.  ",2015-01-16 19:32:32,2015-01-22 20:58:35,2,2,3
Issue#1951 Increase test heap to 3G.,cla: yes,,,"cgdecker: This pull request is just for testing whether increasing the max heap for tests to 3 GB works and solves the problem with the BloomFilter test that's OOMing. 



              The text was updated successfully, but these errors were encountered:
              ",2015-01-21 20:11:59,2015-01-22 19:59:40,2,1,2
Issue#1969 Jdk5 backport v17.0 compatibility,cla: no,,,"paulduffin: Reverts (at least in part) a number of changes made to jdk5-backport-v17.0-post to make it more compatible with code built against jdk5-backport-v14.0.1-post, specifically AOSP code. The reverted changes added back methods that had been present in v14 (deprecated and not) and since been removed. The intent is to allow AOSP code that built against v14.0.1 to also build against the compatibility version of v17.0 without modification (or with minimal atomic modifications). That will make upgrading itself easier and will allow other changes such as removing usages of deprecated methods to be done in stages. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits. Once you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.  ",2015-02-11 14:48:10,2015-02-11 14:49:23,188,393,6
Issue#1970 Jdk5 backport v17.0 compatibility,cla: yes,,,"paulduffin: Reverts (at least in part) a number of changes made to jdk5-backport-v17.0-post to make it more compatible with code built against jdk5-backport-v14.0.1-post, specifically AOSP code. The reverted changes added back methods that had been present in v14 (deprecated and not) and since been removed. The intent is to allow AOSP code that built against v14.0.1 to also build against the compatibility version of v17.0 without modification (or with minimal atomic modifications). That will make upgrading itself easier and will allow other changes such as removing usages of deprecated methods to be done in stages.  cgdecker: Rather than merging this into jdk5-backport-master, I think I'll just pull it as a separate branch and give it a tag. Running the tests against a JDK5 rt.jar, I found one test in ByteStreamsTest that was calling getBytes(Charset) which didn't exist in JDK5. I'll just add a commit fixing that to the branch.  cgdecker: I've pulled the branch in (plus the fix I mentioned) with the tag jdk5-backport-v17.0-compatibility (https://github.com/google/guava/commits/jdk5-backport-v17.0-compatibility).  ",2015-02-11 14:58:21,2015-02-12 18:44:28,13,53,4
Issue#1971 google code conventions,cla: no,,,"rpau: Hi, I have applied the eclipse formatter using the Google configuration for Java projects available at https://code.google.com/p/google-styleguide/source/browse/trunk/eclipse-java-google-style.xml
Is there another formatter configuration for this project? Thanks!  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits. Once you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.  rpau: Done :)  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  kevinb9n: We have found that no matter what the configuration, eclipse does not do an
acceptable job of auto-formatting code to Google style. We are planning to
open-source our own formatter in the next few months. Thanks for your
interest. On Thu, Feb 12, 2015 at 2:50 AM, Raquel Pau notifications@github.com
wrote: Hi, I have applied the eclipse formatter using the Google configuration for
Java projects available at
https://code.google.com/p/google-styleguide/source/browse/trunk/eclipse-java-google-style.xml
Is there another formatter configuration for this project? You can view, comment on, or merge this pull request online at: #1971
Commit Summary File Changes Patch Links: ‚Äî
Reply to this email directly or view it on GitHub
#1971. Kevin Bourrillion | Java Librarian | Google, Inc. | kevinb@google.com  lowasser: To be clear, Guava code is currently thoroughly hand-formatted.  lowasser: But do you follow the guide of Java code conventions writen by Google? Yes.  Some of our team members are on the committee that writes Google's Java style guide. If so, could you explain me why the eclipse formater produces an invalid format and you have decided to build your own formater? I'm not sure what you expect here, other than ""it generates awkward code or code that doesn't satisfy our style guide no matter how we configure it."" Then, if I would like to contribute to improve guava, how I can configure my editor formater? Don't use an automatic formatter; format only the lines you change, by hand.  kevinb9n: It seems unproductive to try to give a long explanation of what we found unacceptable about eclipse's formatter, when we will be releasing our formatter and you can see the differences for yourself.  rpau: Perfect, thanks for recovering my text and answer my questions :)  kevinb9n: @rpau your comment was posted four times, so I removed the redundant copies but left one in place.  I wonder if maybe someone else was trying to do that at the same time.  Sorry about that.  ",2015-02-12 10:50:14,2015-02-12 19:12:49,1,799,5
Issue#1972 google code conventions,cla: yes,,,"rpau: Thi is an updated version with the CLA email that updates the whole codebase with the eclipse formatter that Google provides. 



              The text was updated successfully, but these errors were encountered:
              cgdecker: Kevin mentioned our issues with the Eclipse formatter in #1971, so I'm going to close this too. In addition to the Eclipse formatter issue, I'd also note that anything affecting large swaths of the codebase like this really needs to be done internally and then synced out. We just don't have a good way to make changes in the other direction.  ",2015-02-12 11:16:06,2015-02-12 19:14:47,1,1466,3
Issue#1979 Builder to create ThreadPoolExecutor and ScheduledThreadPoolExecutor,cla: no,,,"yanglifan: JDK Executors provides several tool methods to create ThreadPoolExecutor and ScheduledThreadPoolExecutor. But these methods are not flexible. But if build up ThreadPoolExecutor and ScheduledThreadPoolExecutor from nothing, it will be a little complex. Apache Camel has a ThreadPoolBuilder but it is complex since bind with CamelContext. So I create a simple builder to create ThreadPoolExecutor and ScheduledThreadPoolExecutor.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits. Once you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2015-02-21 14:34:58,2017-01-09 20:04:51,1,2,3
Issue#1984 Add a weight() method to Cache,"package=cache, cla: no",,,"cheddar: Cache objects currently do not have a method of introspecting on the current ""weight"" value.  I am replacing an implementation of a cache that is just a synchronized LinkedHashMap.  In my current implementation of the cache, I'm keeping track of the weights of things being stored and exposing that as a metric about my cache.  This is the only feature of my current implementation that is not covered by Guava's Cache. From looking at the code, it seemed relatively easy to just create another method parallel to size() to handle this case so I just went ahead and did it.  The guidelines do state that API changes should start as an issue, but I didn't realize that until I had already done this and it is such a simple fix, it doesn't bother me if it gets thrown away (as long as I do get some method of introspecting on the current weight value ;) ). I do realize that this is a public API change, it is only an addition, but it does mean that if anyone else is implementing the Cache interface from scratch, their code will have to be updated before it can work with this.  I'm not sure what level of API compatibility is maintained with Guava, but as long as people are only using Guava-built cache objects, it should be a forward-compatible change. Also, I updated unit tests as I could find ones that seemed relevant, but I will admit that I didn't read and comprehend all tests, so I might've missed a good place to add some more verification of the weight computation.  Let me know if there are other tests to update and I'll be happy to. If you think this is going to work, let me know and I'll make sure to get a CLA. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits. Once you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.  cheddar: It seems to be failing when trying to generate the gwt source.  I'll see if I can repro the failure on my local machine and try to fix, but any pointers to what might cause the gwt compilation to fail would be helpful.  cheddar: Ok, on my local machine, I cannot seem to download com.google.guava:guava:java-source:19.0-SNAPSHOT Looks like it is not in sonatype-nexus-snapshots So, it's failing, but for a different reason...  I guess I'll wait on fixing that until the discussion of whether this API change could even be considered has happened.  ben-manes: The predecessor, ConcurrentLinkedHashMap introduced the concept of weights and provides a weightedSize method. That may be a simpler migration path. (Note: currently moving to Github due to Google Code shutdown) The JDK8 rewrite, Caffeine, exposes additional inspection including the weighted size through the Policy abstraction. That project is maturing quickly but not yet released.  cheddar: @ben-manes So, are you suggesting that instead of using a Cache in my code I use ConcurrentLinkedHashMap? Can't really use something that isn't released yet :)  ben-manes: I'm offering it as an option as your changes may not be accepted and you would have to wait for the next release if they are. If all you need are the basic features of its predecessor, then its a reasonable option. The old wiki is in the Github wiki branch since the migration didn't move it over properly.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2015-03-03 01:05:37,2017-01-09 20:04:52,1,10,4
Issue#1990 Created a Changelog,cla: yes,,,"silentmoose: Created a CHANGELOG in the root directory. With proper formatting the app could also read from this file and view the changes within the app. Changelog should be updated with each pull accept. Also, as main developers release updates to the code other contributors will now be able to see the change in the changelog. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits. Once you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.  cgruber: So first of all, this should be CHANGELIST.md.  Much more useful as a markdown file. Second, I'm not sure this file adds much value, as a placeholder.  It doesn't include the massive back-fill of change log information, and doesn't provide much structure so it's not really a pull request so much as a documentation request (which is fair, but that's an issue, not a p/r) Also, we have so much coming out from internal commits, and google's internal commits are usually unique, meaningful changes with a reasonable commit description, that it is nearly certain to be just as valuable to automatically crib the descriptions from the list of commits and use that as a first-draft log of changes.  Maintaining one manually and incrementally may be worth it, but I'm not convinced. @cgdecker - any opinions?  I'm not sure what you had in mind for release changelogs.  My personal feeling is that we take the full list from the last release and trim it into a changelog.  I do like the idea of demonstrating the delta, the additional features/changes/etc.  silentmoose: Appreciate your detailed explanation. I do feel that a changelog that users can quickly skim to see new additions is important. Now as far as actual implementation obviously that does not matter as much to me as the actual active devs.  googlebot: CLAs look good, thanks!  ben-manes: fyi, you should consider using Github releases instead of a changelog.  cpovirk: I think Colin puts together a pretty good list for each release, e.g.:
https://github.com/google/guava/wiki/Release21 We also provide automated diffs between the current snapshot and the previous release:
http://google.github.io/guava/releases/snapshot/api/diffs/ We could try to keep a running changelog between releases, but I fear it will never become a high enough priority in comparison to the changes themselves, given the existing things we provide here.  ",2015-03-07 15:09:03,2017-01-30 22:38:18,1,1,5
Issue#2002 Add callbacks to EventBus,"type=addition, package=eventbus, cla: yes, P4",,,"smetarom: I would appreciate a feature, where I can  add additional functionality to EventBus. My main goal is to extend logging and debugging capabilities of EventBus. My proposal is to create callbacks, which are overwritten in the child class. As at is now, I have to do logging before I call EventBus.post and it creates code duplication. The simple example: EventBus eventBus = new EventBus() {
@override
protected void onEventPosted(Object event) {
// do some logging
}
}; I added onRegister, onUnregister, onEventPosted, and onNoSubscriberRegistered callbacks to corresponding methods.  kluever: We're unlikely to add new features to com.google.common.eventbus in the near future (and will in fact be recommending alternatives).  ",2015-03-17 07:12:50,2021-04-19 15:23:05,1,1,4
Issue#2012 Alternative way to get AssertionError instance in,cla: yes,,,"Sumu-Ning: Alternative way to get AssertionError instance in com.google.common.util.concurrent.GeneratedMonitorTest, since
public AssertionError(String message, Throwable cause)
does not exist in Java 6 yet. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits. Once you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.  cpovirk: Our current policy is that Guava runs with Java 6+ but that it may require a newer version to build. I would not mind if we fixed this occurrence up, but we currently have no way to prevent future violations. Animal Sniffer, which we use for Java 6 enforcement, seems to work only on the main compile, not the test compile. (I was able to run it only by telling Maven that our test sources were normal sources and that all of our test-only deps were normal deps.) If anyone can figure out a way to run it on the test sources, we'd probably be interested. [edit: Animal Sniffer starts checking test code in 1.19.] (Also, see the CLA warning above. If it's something you'd rather not sign, I can submit my own workaround. (This is a problem we've had to confront in ours tests previously where it affected GWT compatibility.))  Sumu-Ning: I thought I have signed the cla, but only after I created the pull request.
Is that the reason, or do I need to sign a different one?  googlebot: CLAs look good, thanks!  cpovirk: I guess that the bot just takes a little while to run. Or maybe someone needs to come and say the magic work ""CLA?"" Anyway, looks good now. Thanks!  cgdecker: I think the bot might just require someone (possibly the author?) to comment on the pull request again after the CLA has been signed for it to check again.  cpovirk: Done in 9131ddb It looks like we got the commit metadata wrong -- sorry.  ",2015-03-23 23:16:13,2015-06-11 18:28:17,3,20,4
Issue#2017 Add missing serialVersionUID field to Converter and VerifyException classes.,cla: yes,,,"mtuchowski: Both Converter and VerifyException implement Serializable interface, so they should declare a static final serialVersionUID field. 



              The text was updated successfully, but these errors were encountered:
              mtuchowski: I added second commit (Deprecated Objects.toStringHelper()...) by mistake to this pull request...  ",2015-03-29 11:59:36,2016-04-11 08:13:05,2,3,2
Issue#2020 I suggest adding generators to com.google.common.collect.Iterators,cla: no,,,"eirikma: I suggest adding (possibly infinite) generators to the Iterators class. The idea is to have an Iterator presenting a possibly infinite sequence of values, generated on the fly a generator function so you don't have to keep all of that in memory at once. Two use cases are provided as unit tests:
a) some kind of endless computation
b) iterating over possibly infinite input.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits. Once you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.  eirikma: I've signed it now. On Wed, Apr 1, 2015 at 12:27 AM, googlebot notifications@github.com wrote: Thanks for your pull request. It looks like this may be your first contribution to a Google open source
project, in which case you'll need to sign a Contributor License Agreement
(CLA) at https://cla.developers.google.com/. If you've already signed a CLA, it's possible we don't have your GitHub
username or you're using a different email address. Check the information
on your CLA https://cla.developers.google.com/clas or see this help
article on setting the email on your git commits
https://help.github.com/articles/setting-your-email-in-git/. Once you've done that, please reply here to let us know. If you signed the
CLA as a corporation, please let us know the company's name. ‚Äî
Reply to this email directly or view it on GitHub
#2020 (comment).  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  eirikma: Found it, at last. There was a wrong email address in the commits. I
authored everything myself. On Wed, Apr 1, 2015 at 12:30 AM, googlebot notifications@github.com wrote: We found a Contributor License Agreement for you (the sender of this pull
request), but were unable to find agreements for the commit author(s). If
you authored these, maybe you used a different email address in the git
commits than was used to sign the CLA (login here
https://cla.developers.google.com/ to double check)? If these were
authored by someone else, then they will need to sign a CLA as well, and
confirm that they're okay with these being contributed to Google. ‚Äî
Reply to this email directly or view it on GitHub
#2020 (comment).  eirikma: hmm.. seems like there is still a missing @nullable on 'initialState,  line 1213.  peteryhwong: According to the javadoc standard in https://google-styleguide.googlecode.com/svn/trunk/javaguide.html, it should be 'Creates' and not Create'. This will also be consistent with other methods of this class.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2015-03-31 22:27:28,2017-01-09 20:04:52,4,5,4
Issue#2025 Iterables.get() alternative returning Optional.absent(),"type=enhancement, cla: yes, P3",,,"gotenxds: Hi, decided it will be nice to have an Optional version to the get methods of Iterables.
Also as suggested here #1742 but with a minor difference: Both methods will return Optional.absent if the position is grater then the requested index and will also return Optional.absent if the value in the requested index is null. thoughts ?  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  gotenxds: I signed it.  googlebot: CLAs look good, thanks!  lowasser: This looks like you could easily do it yourself as Optional.fromNullable(Iterables.get(Iterable, into, null)).  Is it worth adding another method when it's that easy to roll yourself?  gotenxds: Sure you could do But I think it's quite a mouthful, plus there is that null where the default value is which is not a big deal when you use the But it reduces readability when all you need is Debugging a code with this line Will make you enter iterables.get implementation to understand the null value.  Loki-Afro: üëç I agree with gotenxds.  drothmaler: I like the idea, but i propose to change the name to tryGet, because it aligns better with find/tryFind and as a bonus it's even shorter :-)  ",2015-04-07 06:34:09,,2,2,6
Issue#2043 update travis-ci for new container based infrastructure and maven cachin...,cla: yes,,,"codylerum: Looks like this shaves 9+ minutes in total off the build and about 3 per sub build 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  codylerum: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: @cgruber , is this something that we should do?  cgdecker: This seems reasonable to me.  cgdecker: Thanks! This change has been made in commit 01d5493.  cgruber: Yeah.  This is good. Thanks! On Wed, May 20, 2015, 13:44 Colin Decker notifications@github.com wrote: Closed #2043 #2043. ‚Äî
Reply to this email directly or view it on GitHub
#2043 (comment).  ",2015-05-01 12:50:21,2015-05-20 20:43:56,1,1,5
Issue#2044 Small Javadoc fix.,cla: yes,,,"archiecobbs: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  archiecobbs: I signed it!  googlebot: CLAs look good, thanks!  kluever: Thanks Archie...I've fixed this internally and it'll be mirrored out shortly. Sadly, it's typically easier for us to just fix it internally and mirror it out vs. merging pull requests. I hope we get that fixed soon though.  ",2015-05-01 17:02:14,2015-05-01 19:44:46,1,1,3
Issue#2045 Removed unnecessary null check from io.BaseEncoding.encode(bytes),cla: no,,,"javajosh: The check is done on line 166, so the first check is redundant. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  javajosh: I assume I just signed away my first-born. Well, you can have him, Google.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  kluever: Thanks Josh! We don't have a good mechanism for merging patches, so I'm going to submit a change internally and it should get mirrored out shortly. There were actually a handful of unnecessary checkNotNulls in this file...I think I got 'em all. Thanks again!  ",2015-05-06 16:57:53,2015-05-06 17:09:48,1,1,3
Issue#2046 Removed unnecessary null check from io.BaseEncoding.encode(bytes),cla: no,,,"javajosh: The check is done on line 166, so the first check is redundant.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  kluever: Thanks Josh! We don't have a good mechanism for merging patches, so I'm going to submit a change internally and it should get mirrored out shortly. There were actually a handful of unnecessary checkNotNulls in this file...I think I got 'em all. Thanks again!  ",2015-05-06 17:14:48,2015-05-06 17:34:56,1,1,3
Issue#2052 Update JavaDoc for Maps Difference.,cla: yes,,,"qayshp: Make the JavaDoc more clear about what happens in cases of equivalence.  kevinb9n: I'm not sure I see a good reason to commit to this behavior in the
specification.  In case of equality, it should not matter which instance
is returned. That's what equality means. On Wed, May 13, 2015 at 9:06 AM, Qays H. Poonawala <notifications@github.com wrote: You can view, comment on, or merge this pull request online at: #2052
Commit Summary File Changes Patch Links: ‚Äî
Reply to this email directly or view it on GitHub
#2052. Kevin Bourrillion | Java Librarian | Google, Inc. | kevinb@google.com  qayshp: That's a fair point, and maybe it should be removed completely.
The JavaDoc had already mentioned this for the second method (which takes a user supplied equivalence class comparator), and it was confusing to me for not only what you mentioned, but also it wasn't clear to me at first what it meant by ""returned in the difference"".  kevinb9n: Whoops!  So it does.  I hadn't noticed that when it came through.  I would
be more inclined to take it out than to do more of it, though. On Wed, May 13, 2015 at 10:44 AM, Qays H. Poonawala <
notifications@github.com> wrote: That's a fair point, and maybe it should be removed completely.
The JavaDoc had already mentioned this for the second method (which takes
a user supplied equivalence class comparator), and it was confusing to me
for not only what you mentioned, but also it wasn't clear to me at first
what it meant by ""returned in the difference"". ‚Äî
Reply to this email directly or view it on GitHub
#2052 (comment). Kevin Bourrillion | Java Librarian | Google, Inc. | kevinb@google.com  ",2015-05-13 16:06:12,2017-04-18 14:00:49,1,1,3
"Issue#2059 Add basic ""Start using Guava"" instructions to README",cla: no,,,"jonikarppinen: The code.google.com Guava homepage tells people to come here at GitHub instead, yet key information for new users was missing from the README.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jonikarppinen: I guess signing the CLA isn't necessary for simple documentation changes? (According to CONTRIBUTING.md, code contributions require it.)  CaoManhDat: @jonikarppinen This is a bot of google. So hopefully you do what the bot said :)  jbduncan: @jonikarppinen, googlebot isn't a human user. It only responds if you post a new message w/ the text ""I signed it!"" (without the apostrophes). :)  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2015-05-21 20:57:40,2017-01-09 20:04:52,1,1,5
Issue#2060 Merge pull request #1 from google/master,cla: no,,,"monkeychen: pull from head 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  monkeychen: sorry, this is my wrong operation.i just want to pull from google/guava 's master to my fork  ",2015-05-24 09:39:27,2015-05-24 10:02:37,1,0,2
"Issue#2062 Add deprecation for compare(Boolean, Boolean)",cla: yes,,kluever,"gaul: This method exists to warn callers of compare(Boolean, Boolean) and
compare(boolean, boolean) with a deprecation warning.  Using the
private access modifier would still allow callers to use the generic
compare(Comparable<?>, Comparable<?>) method.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  googlebot: CLAs look good, thanks!  kluever: I'm submitting a version of this change internally and it'll get mirrored out shortly. Thanks for pointing it out!  ",2015-05-28 05:04:23,2015-06-01 19:54:27,1,1,3
Issue#2086 Splitter fails with empty matches at the end of a String,cla: yes,,,"JeffreyFalgout: If you try to split ""abc82"" with the pattern ""(?=\d)"" you get [abc, 8].
The last number will be left out of the result. http://stackoverflow.com/q/30941743/758280  lowasser: Do all the other tests pass? IIRC, we've made a best-effort attempt to block patterns with zero width from working at all, because no matter what we did, something reasonable-looking wouldn't work.  JeffreyFalgout: All of the other tests passed.  lowasser: Previous discussion on the subject in #1190  cpovirk: Sorry for dropping this. We ended up accepting #2615 instead (for no good reason).  ",2015-06-19 16:39:21,2016-10-31 18:41:58,1,2,4
Issue#2099 Added missing @throws tag to ConcurrentHashMultiset.removeExactly,cla: yes,,,"albertogoffi: When the method removeExactly from the class ConcurrentHashMultiset is invoked with a negative number as second parameter, the method correctly throws IllegalArgumentException. This behavior is not documented in the javadoc comment of the method, since the @throws tag is missing. I added the missing tag.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  albertogoffi: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Committed: ee50c94 Thanks!  ",2015-07-07 13:22:03,2015-07-07 20:35:42,1,1,3
Issue#2100 UnsignedShort patch as pull request,"package=primitives, cla: yes, P3",,lowasser,"jschneider: Maybe this is easier to get worked on?
applied patch from https://codereview.appspot.com/5271042/ Beware: It seems that there have been some refactorings to UnsignedInteger/UnsignedInts that are probably not reflected within the UnsignedShort(s) classes.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jschneider: I signed it!  googlebot: CLAs look good, thanks!  lowasser: Can you give us more details about what specific UnsignedShorts methods you would personally need? Note that Java 8 added some unsigned type support, so I'm not sure we want to further expand Guava in this area.  travisdowns: FWIW this would be very useful. Java 8 offers limited support for unsigned types, and in particular it does not offer UnsignedShorts.checkedCast() (it only offers widening conversions). That happens to be my use case.  cowwoc: @lowasser Any outstanding issues preventing this addition?  ",2015-07-08 06:57:35,,1,4,7
Issue#2106 Add missing @throws tags to methods of the class Verify,cla: yes,,,"albertogoffi: Some methods of the class Verify miss the proper @throws tag. To be consistent with the method Verify.verify(boolean, String, Object...), which already contains the proper @throws comment, I added the @throws tag where missing. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Thanks. We'll get this merged shortly.  ",2015-07-14 10:21:23,2016-01-28 14:00:09,1,1,3
Issue#2111 Use thread-local buffers to avoid memory allocation and improve performance,cla: no,,,"berndhopp: goal of this PR is to replace the often seen but unneccessary or with thread-local instances of the respective types in all cases where they are used method-internal, this way avoiding unneccessary memory allocation, increasing performance and enhancing the memory profile. ThreadLocalBuffers is the manager of thread-local buffers. It uses SoftReferences to store buffers, this way enabling Garbage Collection to collect the buffers when the system runs low on memory. This class is package-local right now but can eventually be made public for other scenarios where a buffer is needed.
All allocations of byte[] or ByteArrayOutputStream where the allocated byte[]/BAOS was not the returned value of the method have been replaced with calls to ThreadLocalBuffers. ByteSource.contentEquals was challenging, because it used not one but two byte-arrays for buffering, so I used two ByteBuffers that wrap around the upper and lower part of the thread-local buffer, thereby mimicking the two buffers. The microbenchmarks show that avoiding buffer allocation yields a significant performance boost. you can find the results here: ByteStreamsBenchmark w/ ThreadLocal
ByteStreamsBenchmark w/out ThreadLocal
ByteSourceBenchmark w ThreadLocal
ByteSourceBenchmark w/out ThreadLocal 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  berndhopp: I signed it!  googlebot: CLAs look good, thanks!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request) and all commit authors, but as best as we can tell these commits were authored by someone else.  If that's the case,  please add them to this pull request and have them confirm that they're okay with these commits being contributed to Google.  If we're mistaken and you did author these commits, just reply here to confirm.  ",2015-07-19 11:18:07,2015-07-19 12:06:26,8,15,7
Issue#2112 Use thread-local buffers to avoid memory allocation and improve performance,cla: yes,jbduncan,,"berndhopp: goal of this PR is to replace with in all cases where byte-array or ByteArrayOutputStreams are used method-internal, this way avoiding unneccessary memory allocation, increasing performance and enhancing the memory profile. [ThreadLocalBuffers](https://github.com/berndhopp/guava/blob/master/guava/src/com/google/common/io/
Buffers.java) is the manager of thread-local byte-arrays and FastByteArrayOutputStreams. It uses SoftReferences or WeakReferences to store buffers, this way enabling Garbage Collection to collect the buffers when the system runs low on memory. All allocations of byte[] or ByteArrayOutputStream in where the allocated byte[]/BAOS is not the returned value of the method have been replaced with calls to ThreadLocalBuffers.
ByteSource.contentEquals was challenging, because it used not one but two byte-arrays for buffering, so I used two ByteBuffers that wrap around the upper and lower part of the thread-local buffer, thereby mimicking the two buffers. The microbenchmarks show that avoiding buffer allocation yields a significant performance boost. Tests that did not show significant differences are left out. There have been no tests where performance dropped more than 2.00%. you can find the results here: ByteStreamsBenchmark w/ ThreadLocal
ByteStreamsBenchmark w/out ThreadLocal
ByteSourceBenchmark w ThreadLocal
ByteSourceBenchmark w/out ThreadLocal  lukesandberg: I think both SoftReferences and ThreadLocals can create issues Since preallocated buffers are such a win, the better option is probably to modify these apis so that users can supply their own buffer (which they could manage with a ThreadLocal+SofReference or whatever is appropriate)  berndhopp: Hi Luke, thank you for your comment. It is often advised not to use ThreadLocals in webapplications (like here ) since webapplications typically use thread-pools and so threads never actually finish, leaving objects threadlocal-attached to a thread to never be collected by gc. However in this case, since we only store Soft-/WeakReferences, garbage collection is able to free the buffer-memory (except for the tiny SoftReference-Object itself),  thus avoiding the problem alltogether. As for the SoftReference-issue, are you referring to http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6912889 ? To circumvent this issue, it would be enough to just replace SoftReference with WeakReference, since WeakReference does not cause these problems, but it would come with some performance penalty. Maybe a good solution would be to use WeakReferences only for all ByteArrayOutputStreams and byte-arrays larger than the initial size of 8k, since you need to fill the heap up almost completely with softreferenced memory to cause the problem, what is hardly possible with 8k per thread.
Also, guava uses SoftReferences in other places too, like http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/cache/CacheBuilder.html#softValues(). Regards
Bernd Update: after some more googling, I found this ( I guess that is what you referred to, concerning the threadlocals ): https://wiki.apache.org/tomcat/MemoryLeakProtection#customThreadLocal
So I will rewrite the code to not use custom ThreadLocals. Update 2: I implemented what I mentioned above here: not using custom ThreadLocals
using WeakReferences for byte-arrays larger than init-size
using WeakReferences for ByteArrayOutputStreams to my surprise, the code has gotten more elegant with the changes IMHO :-)  Maaartinus: AFAIK, there's already such a leak in com.google.common.escape.Platform, which could be fixed trivially by avoiding initialValue.  berndhopp: @Maaartinus exactly, I removed the overriding of initialValue here  berndhopp: @15characterlimi ok, thanks for the update  berndhopp: Hi @15characterlimi, any news here?  cgdecker: Sorry for how long this has taken, @berndhopp. I'm going to take a look at the details of this and try to have a concrete response for you soon. I will say that my initial inclination is that this isn't something we want to do in Guava: I think reuse of buffers is a bit of a fraught issue and one that should be explicitly under the user's control, which would really require a different API design than our libraries currently have. But again, I'll try to respond more specifically soon.  berndhopp: @cgdecker thanks for your answer. I'm a bit puzzled right now what the concerns are. Buffer reuse is a tricky task where you can do a lot of things wrong, it took me quite a lot of effort to come up with an implementation that is safe even when the same thread uses a buffer on different levels of the stack trace. Also, there is not really any good alternative algorithm or approach to the problem; if you want buffer reuse to be efficient, save and free of memory leaks, you will inevitably wind up with ThreadLocals, Weak-/SoftReferences and some sort of 'Lease' concept to avoid reuse by the same thread. Feel free to disagree on these points I mentioned, I'm willing to discuss them. But my point is: if you have a patch that increases performance in every possible scenario without any api break or side effects whatsoever, why would a user need more 'control' over it? I just cannot think of any scenario where a user-supplied buffer would make more sense than my implementation. It may outperform my implementation by a small margin if the user would cache a buffer in say a HttpSession, but there is just too much that could go wrong. If your concerns are that it 'looks' somewhat fragile and hard to test properly, I can totally understand that, but that is just the nature of the beast in this case.  jbduncan: My concern about this is I don't know if thread-local buffers are thread-safe when used with libraries that introduce radically different concurrency models to the JVM, like Parallel Universe's Quasar with it's so-called ""fibers"" (or lightweight threads), or Akka with it's actor model.  berndhopp: Both Quasar and Akka rely on plain old threads eventually, so the concurrency models may be different but they base on the same building blocks. In http://docs.paralleluniverse.co/quasar/ is says: ""Using ThreadLocals in a fiber works as you‚Äôd expect ‚Äì the values are local to the fiber."" Because a fiber is nothing but a wrapped Thread at the end of the day. Every concurrency library out there is based on plain old threads and ThreadLocal cannot be ""tricked"" out of working, so there is nothing to worry about. As long as every code execution in java happens in the context of a java thread, ThreadLocals will work and this patch will work.  wikier: To learn from this PR and understand the background, while is still open? The feature request looks like a good idea to me. I'd need to dive deep in the implementation to provide further feedback. But what I still don't understand why is not closed (as merge or simply closed), at least not open forever.  cgdecker: Sorry for letting this fall off my radar. While I think buffer reuse can be useful, I don't think the way Guava's I/O utilities are designed lends itself to this. Because ByteStreams and CharStreams are all static methods, there is no (good) way for the user to have control over caching behavior. I want to avoid mutable static state like the lease provider map in Buffers. And I generally don't like the idea of potentially holding on to a buffer for each (reused) thread that has ever used one, which could add up to quite a bit, without the user having control over that. A different design for the package where, say, you instead have an instance of your utility class and can pass in some kind of buffer cache when creating it (which could use thread locals or some kind of pool or nothing) would work better for something like this, but we most likely won't be making a change like that to common.io anytime soon, if ever. These are my main issues with the idea of trying to do buffer reuse in Guava in general. I think that if we were to do some kind of (non-user-configurable) buffer reuse, though, I'd want it to be something  considerably simpler than what's in this PR currently, and something that has a strict bound on the amount of memory it holds on to. For example, for many applications I'd bet that you could get a significant percent of the benefit by by just using an AtomicReference<byte[]> or a fixed size BlockingQueue<byte[]> and letting each place that needs a buffer try to take that one and just make a new buffer if it's not there. If you have lots of threads doing I/O using Guava at once (web server maybe) there's considerably less benefit, of course.  berndhopp: hm, let me reply to this real quick. I'm a little confused here, as to what the demands actually are. It had been requested that the user has full control, so I introduced the Lease-concept which gives full control by allowing the user to register it's own LeaseProvider-implementation. Now you say if you where to introduce buffer-reuse, it will be non-user-configurable, should be considerably simpler than this PR and has a strict bound on the amount of memory it holds on to. My first approach, that had no Lease-concept, did match all these requirements in the first place. It did not introduce any additional API, it's implementation was considerably simpler and the actual arrays had been soft-referenced in order to let the garbage collection free them in case memory runs low. Letting GC decide when to fee memory is a better approach than limiting the memory-consumption by assumptions or heuristics. GC will always have the best insights on runtime memory needs. AtomicReferences or BlockingQueues won't save you here, because they either introduce idling (if there are not enough buffers for all threads that need one), or eventually you wind up reinventing the very same mechanisms that ThreadLocal<Reference<byte[]>> had to begin with. No benefit either way. If you where to eventually introduce buffers with the objectives you mentioned, chances are you will either introduce the approach I presented in the beginning, or one that is inferior to that. my 2 cents.  ",2015-07-19 12:23:19,2018-06-27 16:14:40,2,27,8
Issue#2122 Ensure the correct removal notification is published (fixes #2101),cla: yes,,,"ben-manes: Ensures that the correct removal notification is published by Segment#clear(). Previously the operation was using the cause EXPLICIT when pending maintenance for expiration or collection would take precedence. For additional safety, publishing notifications require passing a strong reference of both the key and value. This ensures that compiler reordering and races with the GC do not result in a reference collection and publishing a null value. This may not have been a problem due to happens-before ordering across methods, but simplifies away having to make these assumptions. In addition to adding an expiration test, verified by removing the workaround in Caffeine's fixture. The tests pass with the changes and fail with 19-rc1.  cpovirk: Merged. Thanks, Ben.  ",2015-08-01 07:10:02,2015-11-30 22:35:33,1,2,3
Issue#2129 Do something about RegularContiguousSet.hashCode() performance?,cla: no,,,"rcpoison: Iterating over the whole ContiguousSet seems wrong.
RegularContiguousSet.equals() does not use Sets.equalsImpl() either but instead compares the DiscreteDomain and first+last. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  lowasser: This change violates the spec of Set.hashCode(). RegularContiguousSet.equals() does not use Sets.equalsImpl() either but instead compares the DiscreteDomain and first+last. It falls back to super.equals(otherSet), which does use Sets.equalsImpl.  rcpoison: @lowasser: Of course you're right :/ Sorry, should've thought harder.  kevinb9n: This does bring up the fact that many DiscreteDomain implementations
could provide
an efficient hashCode() specialized for their type. e.g. in Integers, Range.closed(0, n).asSet().hashCode() == n * (n + 1) / 2,
and all that.  Even if the implementation still had to loop it could still
avoid all the damned boxing. This would be fun programming but... not sure whether
ContiguousSet.hashCode() is called enough to be worth worrying about or not. On Tue, Aug 11, 2015 at 10:00 AM, rcpoison notifications@github.com wrote: @lowasser https://github.com/lowasser: Of course you're right :/ Sorry,
should've thought harder. ‚Äî
Reply to this email directly or view it on GitHub
#2129 (comment). Kevin Bourrillion | Java Librarian | Google, Inc. | kevinb@google.com  rcpoison: not sure whether
ContiguousSet.hashCode() is called enough to be worth worrying about or not It was in my case, and the next silly idea was to cache the hashCode. I've opted for storing the Ranges instead, which makes a lot more sense anyway.  kevinb9n: Not sure I would close this yet. Given how awful what this method does really is, caching the result might be a very good idea.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2015-08-11 16:41:58,2017-01-09 20:04:52,1,1,5
Issue#2136 Improve FluentIterable.of to take variable # of arguments.,cla: yes,,,"scr: FluentIterable.of(1, 2, 3) would be easier to use/more succinct than FluentIterable.of(new int[]{1, 2, 3}) This change does not break the existing API as E... becomes E[] by the time it is used in the method.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  scr: I signed the CLA!  googlebot: CLAs look good, thanks!  cpovirk: See also past discussion on #1070 (comment)  scr: @stephenh - I saw your comment on #1070 but can't reply any longer. FWIW, I rolled my own and have been getting good traction with it‚Ä¶ See https://github.com/scr/j8iterables for some useful crossovers between Guava, Stream, and Jdk8!  cgdecker: We actually already have methods for this internally (of() and of(E, E...)) and are planning to release them soon.  billccn: This change, however, did not come in Guava 19. I am wondering what's the solution for the overloading confusion that would be introduced by such a signature change when there's one single array argument? (A potential break in source back-compatibility.) The other Guava APIs avoided this by naming the var-arg method differently from the one that accepts an array (of vs. copyOf), but the original signature has obviously broken this naming convention.  ",2015-08-19 17:39:25,2015-09-30 19:16:28,1,1,5
Issue#2148 byte array searches with start and end limits,"type=addition, package=primitives, cla: yes, P4",,,"kvr000: This extends current indexOf function with possibility of specifying where to start and where to end with the search, similarly to java String.indexOf methods.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  kvr000: I signed it!  googlebot: CLAs look good, thanks!  lowasser: Hi, can you discuss more details about your use case for this method?  kvr000: Hi, sure, I'm working on project which consumes ASCII input (potentially binary) and basically need similar functions for parsing as String provides.  lowasser: Do you actually need an end parameter?  I observe String.indexOf does not have that.  kvr000: If the data comes from structure I don't have control over - like ByteBuffer from NIO or ByteBuf from netty, this parameter will become pretty handy.  ",2015-09-03 19:46:47,,2,2,4
Issue#2159 Update details of upcoming release,cla: yes,,,"dpursehouse: The README refers to 19.0-RC1, but 19.0-rc2 is now available.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: CLAs look good, thanks!  cgdecker: Thanks for the PR... I've updated this internally along with another change to the README and it should be mirrored out soon.  dpursehouse: @cgdecker thanks, I can see it's updated now.  Do you have any idea when the final release for 19.0 is coming?  In the Gerrit project we're using 19.0-rc2 and it would be nice if we can upgrade to the final version before we cut the first RC for 2.12.  ",2015-09-18 07:53:04,2015-10-01 20:27:43,1,1,3
Issue#2161 [Fixes #2160] Make it possible to halt the execution of expensive transforms on comparation objects via onResultOf variants.,"type=addition, package=collect, status=triaged, cla: yes, P3",,,"scr: #2160  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  googlebot: CLAs look good, thanks!  ",2015-09-18 16:18:01,,1,2,3
Issue#2162 Jdk5 backport master,cla: no,,,"ashu-22: Creating  a project with the help of Guava.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cgdecker: Not sure what this is for, but we definitely don't want to merge the jdk5-backport branch into master.  ",2015-09-19 08:33:28,2015-10-12 16:45:13,316,559,6
Issue#2163 Added ifNonNull to MoreObjects,cla: yes,,,"paplorinc: If input is non-null, applies the function to it.
If either the input or the result is null, will return the default value. This is an alternative for Optional, similarly to firstNonNull: or can now be written as (Java 8, default value and static import):  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  paplorinc: Signed ;) Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). Please visit https://cla.developers.google.com/ to sign.Once you've signed, please reply here (e.g. I signed it!) and we'll verify. Thanks.  googlebot: CLAs look good, thanks!  dant3: How is it different from Optional approach besides not creating an Optional instance?  paplorinc: Hello @dant3, The point of this modification is to provide an alternative for Optional for another very common case.
The same as for Guava's firstNonNull, e.g. instead of we can choose (this is the keyword here) to simply call Which delimits the different parts of the computation way better, than Optional could. The same applies to this changeset also, e.g. instead of we can choose to simply call Which keeps the bare essentials only. ps. I statically imported MoreObject, because its methods are stateless and have meaning without the surrounding object, unlike Optional, where simply calling fromNullable(first) would look unintuitive.  paplorinc: (related to #2164)  zsolt-donca: I like the general idea presented here, as there definitely are use cases when the above-defined ifNonNull would be the preferable choice. What is the expected behavior when thenFunction returns null? Should ifNonNull return  zsolt-donca: Another overload with a Supplier for the elseValue could be useful, in order to make lazy evaluation possible.  lowasser: I'm not sure we're ready to accept new features that are dependent on Java 8, in the sense that if you're working with Java 7, this is much less readable than the ""conventional"" code you would write with a perfectly normal ternary or if statement.  paplorinc: @zsolt-donca, very good observations, thanks, will apply them.
@lowasser, I understand your concern, and would like to add a few comments: but can be replaced with simple constructs, e.g. or The same is true in this case, i.e. one could still extract commonly used functions and use them in a similar manner. we can still see in the IDE  cgdecker: Personally, I feel that Optional is a much better way to approach this. firstNonNull preceded the existence of our Optional class and has the advantage of being very simple to understand. I think when you get into something like this ifNotNull(T, Function, R) it becomes much less obvious to readers what you're doing, whereas Optional.fromNullable(value).transform(function).or(fallback) is pretty clear. Thanks for the idea, but I'm fairly certain this isn't an API we want to add, so I'm going to close this. For future reference, if you want to see an API added or changed it's better to start by just opening an issue for discussion of it. Pull requests are better for changes that don't affect the APIs themselves or changes that we've decided should be made and that we'd like a contribution for.  paplorinc: Thanks for the explanation :)  paplorinc: @cgdecker, could you please take a look at #2164 also?  ",2015-09-19 09:55:19,2015-09-30 19:06:59,1,2,6
Issue#2164 Added a vararg overload for firstNonNull,cla: yes,,,"paplorinc: Avoiding nullability in Java is a recurring problem. Other languages offer an Optional, which makes nullability composable.
This however is very verbose in Java and cannot consistently be inserted into an existing, nullable codebase (especially since the Optional can be null also). Guava tries to simplify some of the common cases, e.g. we have a value, but if it's not set, we want a default (but the same can be true for the default).
Unfortunately this method wasn't called defaultIfNull, but firstNonNull, therefore people assumed it's a search. This commit tries to solve that by making it a search, and letting the users decide which approach they want:
ternary, Find, Optional, or the same approach Guava already provided:  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  paplorinc: I signed it as paplorinc! :) Thanks for your pull request. It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). Please visit https://cla.developers.google.com/ to sign.Once you've signed, please reply here (e.g. I signed it!) and we'll verify. Thanks.  googlebot: CLAs look good, thanks!  kevinb9n: See #384  paplorinc: Thanks, updated the commit message and posted a response to the Issue :)  zsolt-donca: I would add javadoc to this method as well, otherwise there is no documentation visible in IDEs at the call site.  zsolt-donca: I would keep the original javadoc here (referring to the parameters as first and second); this is a simpler and more specific case of the below method, then the javadoc could be simpler and more specific as well.  zsolt-donca: The cases when there are nulls elements in the array should also be tested.  zsolt-donca: I strongly support this change, as I've been in the same pitfall: when I've first seen the method firstNonNull in use, I've immediately assumed that it accepts any number of arguments (as it would be logical, given it's name and intent); and then I was disappointed when I tried to use it with three arguments.
The existing alternatives are far less elegant and concise, and also fragment the code base (while for the two-parameter cases I'm using firstNonNull, for the three-parameter cases I'm using something different).  paplorinc: @zsolt-donca, thanks, will apply your comments :)  mmontag: What became of this one? Continued in a different PR?  ",2015-09-19 09:57:57,2017-01-23 10:45:06,1,2,5
Issue#2166 Fix typo in comments,cla: yes,,,"disc99: Fix typo in comments  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  disc99: I signed it!  googlebot: CLAs look good, thanks!  ",2015-09-20 18:00:16,2016-11-02 19:28:32,1,3,2
Issue#2167 Remove a redundant statement in TreeRangeMap.remove().,cla: yes,,lowasser,"kseo: 
No description provided.
  ",2015-09-21 07:18:49,2016-11-04 14:05:19,1,1,3
Issue#2172 Current version badges,cla: yes,,,"aiyanbo: 
No description provided.
  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  aiyanbo: Current version badges  lowasser: What exactly is this?  JakeWharton: A recipe for decision paralysis:
  googlebot: CLAs look good, thanks!  hazendaz: I'd say squash the commits and use better labeling.  Current and Latest is a bit confusing.  ",2015-09-29 05:01:13,2018-11-14 14:44:08,5,1,5
Issue#2174 ImmutableMap.copyOf(Map): minor performance improvement,cla: yes,,lowasser,"rgoldberg: Minor performance improvement in ImmutableMap.copyOf(Map): If map instanceof ImmutableSortedMap, no longer unnecessarily run the following, since it will always be false: 



              The text was updated successfully, but these errors were encountered:
              rgoldberg: This change also clarifies the intent of the method  cpovirk: This is minor enough that I think it's not worth even a couple extra lines, sorry. If you know of a place in which this is a bottleneck and can provide a benchmark, we could reconsider.  ",2015-09-29 21:28:35,2017-01-30 22:42:03,1,2,5
"Issue#2180 Add tryParse methods to UnsignedBytes, UnsignedInts, and UnsignedLongs.","type=addition, package=primitives, cla: yes, P3",,,"leeyikjiun: This resolves #1957 by providing the tryParseUnsigned* methods.  lowasser: This seems highly inconsistent with the existing tryParse methods, e.g. http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/primitives/Ints.html#tryParse(java.lang.String) I would expect e.g. UnsignedLongs.tryParse to return a @Nullable UnsignedLong instead of a Boolean, and to be namedtryParse, not tryParseUnsignedLong.  lowasser: Additionally, throwing and catching exceptions is extremely expensive.  Instead, it would be preferable to reimplement or copy the parsing methods to handle parse failures without exceptions.  leeyikjiun: Okay, I will make the changes. Do I have to close this pull request and create a new one?  lowasser: I don't think so?  I think you can just add more changes to this pull request?  leeyikjiun: I can't add the tryParse method for UnsignedBytes as there is no UnsignedByte class to return as a null object.  lowasser: Then probably leave it out -- it's not clear what we should do there.  leeyikjiun: I've found some further inconsistencies. In UnsignedLongs.parseUnsignedLong, a NumberFormatException is thrown if the radix is not within the min or max radix which is consistent with Java's Long.parseLong. However, in Longs.tryParse, an IllegalArgumentException is thrown instead. I think the new tryParse methods should throw NumberFormatException as well. But what should we do with the old methods?  ",2015-10-08 08:45:35,,1,6,4
Issue#2182 Add static modifier for private methods where possible,cla: yes,,,"Vladlis: Results of the new sevntu-checkstyle check. 



              The text was updated successfully, but these errors were encountered:
              ",2015-10-10 12:27:49,2015-10-10 14:32:28,1,43,2
Issue#2183 Release19,cla: no,,,"hugo-vrijswijk: 
No description provided.
  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cgdecker: We don't need to merge the release branch into master.  ",2015-10-10 16:57:09,2015-10-12 16:44:13,6,17,3
Issue#2184 allow inheriting from SettableFuture and overriding cancel() method,cla: yes,,,"kvr000: I'd like to be able to implement custom ListenableFuture class where I could easily override cancel(boolean) method. The SettableFuture seems to be best fit but unfortunately it's declared final. Removing this restriction makes it much more reusable.  cpovirk: The class you're looking for is AbstractFuture. I will add some doc to SettableFuture to point there. (We currently have doc on ListenableFuture, so I may just add a pointer back there.) Another thing we need to do is figure out our recommendations for extending AbstractFuture. Our hope is that users will rarely have to override cancel() (which doesn't always get invoked on cancellation, surprisingly enough: #1958 #1905). In many cases, all you need is to override interruptTask(). For cases in which that is not enough, we are probably going to expose a done() hook for users to override (#2075). I'll leave this request open until I at least add the doc.  kvr000: Thanks for mentioning interruptTask(), this is definitely better than overriding full cancel() method. However, I still need both the cancel() and set() / setException() method. I actually think that this is pretty common use case for asynchronous tasks that are finished not by returning from method but after some notification is delivered (e.g. another ListentableFuture, completion callback etc.). In such case I need future for which it's possible to set the result and custom method for interrupting the task. I believe that SettableFuture is best candidate here. Is there any drawback by making it non-final?  cpovirk: cancel(), set(), and setException() are all available on AbstractFuture, too. (I haven't formed a full picture of your requirements, but I'm confident that anything that can be done with SettableFuture can be done with AbstractFuture.) But I guess I have been dodging the question :) A reason for SettableFuture to be final is that it gives us freedom to perform optimizations. Well, OK, for that particular optimization, we need only get() to be final, not cancel(). But we want to leave ourselves the freedom to do additional optimizations in the future. In fact, this get()-based optimization is new for Guava 19, so if we had permitted overriding of arbitrary methods, we would have prevented ourselves from introducing it. We also have the freedom to make other changes besides optimizations. (I don't remember if this has been important for SettableFuture yet, but that's the general principle at work. And again, for people who do need to extend the type, we provide AbstractFuture, so we're just pushing users to take a slightly different approach.)  kvr000: Well, I see the point that with current design it can save some execution time in rather special situations though I can't judge how common they are in guava or the software based on this. However, as you mentioned - this is mainly about optimizing get(), not cancel()... I think marking get() as final in TrustedFuture would make it safer, more readable and clear on purpose and on the other hand wouldn't affect extendability of TrustedFuture and as a result the inherited classes would take advantage of those performance optimizations as well :-) Personally I agree it's not a big deal to inherit it from AbstractFuture in exactly the same way how SettableFuture is currently implemented. But I don't like I have to reinvent the wheel / duplicate the code. So maybe we can consider introducing another intermediate class AbstractSettableFuture and final SettableFuture. Although as described above it probably would hardly bring any value from the originally proposed approach. Additionally, I'm considering implementing a Future class where in case of code is already running and cancellation is requested, get() and listener processing would be called after set()/setException() methods are called instead of immediately after invoking cancel(). Do you think it would be worth merging into guava or shall I skip the step for this? :-)  cpovirk: I've added some documentation to SettableFuture. When you refer to ""duplicating the code,"" are you talking about duplicating the overrides of set and setException that exist only to make them accessible? Often this ends up being unnecessary if you call the methods from within your AbstractFuture subclass. To your cancel() request, I think you're describing a Future that diverges from the Future spec. That spec requires that the Future be done when cancel() returns.  kvr000: Yes, I'm talking about duplicating set and setException. If I was able to inherit from SettableFuture it would save me few common lines of code. I need to call them externally as in this case it's basically used to implement integration pattern between 3rd-party framework and guava based code. I.e. (simplified version) 3rdparty.method().addListener((Future<?> updatedFuture) -> { guavaFuture.set(updatedFuture.get()); }) For the cancel() request - I don't think it's somehow in conflict with specification. The specification only says that isDone() must return true and isCancelled() true as well but doesn't say when. And actually as the future is handled asynchronously by listener anyway it doesn't make any difference when you really ""finish"" the future.  cpovirk: If the need to redeclare set and setException is distasteful, you can put your 3rdparty.method().addListener call inside your AbstractFuture subclass, probably declared inside your MyThirdPartyUsingService class. This might turn out to be the simplest place to define your subclass, anyway, to keep the set and cancel logic near one another. RE: ""subsequent calls to isDone() will always return true"": I think that the natural reading of ""always"" is ""at any time,"" not ""after some arbitrary future time."" Otherwise, all the statement would be saying is ""Once the Future is done, it's always done,"" and that doesn't seem like something to document on cancel().  kvr000: That would be even worse because I would lose reusability of such class. And secondly I understand the original purpose of SettableFuture as the creating code doesn't yet know who and how updates the future. Otherwise it could be rather called Forwarded which in this case is just the listener. RE: ""subsequent calls to¬†isDone()will always return true"": But it still does. The only difference is that listeners invocation is postponed until the task is finished (if it already runs). The state of future would be always CANCELLED since the completion of cancel()and all the affected methods would return proper value.  cpovirk: You seem to be suggesting that the isDone concept of ""completed"" (""Returns true if this task completed"") has no connection to the concept of ""completed"" used elsewhere in the Future docs (""The result can only be retrieved using method get when the computation has completed""). Returning to SettableFuture and final: I regret that I haven't formed a clear enough picture of how SettableFuture would be used in your code to be more helpful. As far as the feature request goes, though, the Guava team is satisfied with AbstractFuture as a solution here.  kvr000: Never mind. I can either copy the setters or base the code on spring SettableListenableFuture which is more open in these terms. Thanks anyway.  ",2015-10-10 20:33:20,2015-10-13 17:47:03,1,1,3
Issue#2185 Remove old method from ImmutableList,cla: yes,,,"Vladlis: 
No description provided.
  cpovirk: readObject is a method automatically invoked during deserialization, so it's still ""used."" But this is a weird case: Because ImmutableList has a serialization proxy, readObject should never be called. The only case in which it can be called is the case in which a malicious user imitates a serialized ImmutableList that doesn't use the proxy. In that case, readObject serves to block this attempt, keeping the attacker from thwarting ImmutableList's immutability guarantee. (This is covered in Effective Java, item 78 in the second edition.) All that said, we decided a while ago that we weren't going to try to keep our Immutable* types immutable even in the presence of malicious users, so we can remove this if we want.  Vladlis: @cpovirk, thanks for the explanation!  ",2015-10-12 06:30:56,2015-10-17 13:53:01,1,1,3
Issue#2186 Merge pull request #1 from google/master,cla: no,,,"Stone-Jay: update from origin 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2015-10-12 07:49:54,2015-10-12 07:50:28,1,0,2
Issue#2189 Add Tables.synchronizedTable(),cla: yes,,lowasser,"mostlymagic: #2156
Implementation similar to other synchronized collections.
Copy unit test template from SynchronizedMapTest.
Make Synchronized.SynchronizedMap package protected (VisibleForTesting). 



              The text was updated successfully, but these errors were encountered:
              lowasser: @cpovirk, I'm a little confused about whether or not we need the GWT code in here; I don't see anything along those lines internally?  cpovirk: In some cases, it's necessary to update the GWT sources. This isn't one of them. Thanks to 63360f3, we are no longer putting these ""unimportant"" sources in Github. In fact, the specific source touched here was deleted in that CL. Background: Our GWT setup in Guava was weird: Some of the GWT files were autogenerated from the ""server"" sources, and others were manually written. But the autogeneration happened internally before we push our code to Github, so it was tricky to tell which is which. Nowadays, we don't do the autogeneration, so I think that the only GWT code left is ""important"" GWT code (well, aside from the *_gwt.java test files).  cpovirk: @lowasser , aside from the GWT question, did you end up reviewing this?  lowasser: I don't think I did.  You're welcome to, @cpovirk, or I can do it if you'd rather.  cpovirk: Be my guest, @lowasser :)  mostlymagic: Lost my previous fork.
Requested Changes implemented in #2377  user454322: This doesn't seem to be in com.google.guava:guava:jar:20.0. Where can it be found?  jbduncan: It's not merged into Guava yet @user454322, see #2377. :)  ",2015-10-15 06:15:30,2016-01-30 12:57:34,1,4,6
Issue#2190 Fast size() impl for FileBackedOutputStream.asByteSource,cla: yes,,cgdecker,"tcataldo: FileBackendOutput holds data in either a ByteArrayOutputStream or a File. Both of them provides quick access to content size. Use that knowledge to provide fast sizeIfKnown & size implementations.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  tcataldo: I signed it ! On Thu, Oct 15, 2015 at 10:27 AM, googlebot notifications@github.com
wrote: Thanks for your pull request. It looks like this may be your first
contribution to a Google open source project, in which case you'll need to
sign a Contributor License Agreement (CLA). [image: üìù] Please visit https://cla.developers.google.com/
https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll ‚Äî
Reply to this email directly or view it on GitHub
#2190 (comment).  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  tcataldo: I signed it with my other email address too. On Thu, Oct 15, 2015 at 10:27 AM, googlebot notifications@github.com
wrote: Thanks for your pull request. It looks like this may be your first
contribution to a Google open source project, in which case you'll need to
sign a Contributor License Agreement (CLA). [image: üìù] Please visit https://cla.developers.google.com/
https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll ‚Äî
Reply to this email directly or view it on GitHub
#2190 (comment).  googlebot: CLAs look good, thanks!  jbduncan: size() can be optimised to not instantiate an Optional internally each time it's called. See the code below for an example of what I mean by this.  jbduncan: Hey @tcataldo, I'm not entirely clear on why you closed this PR. It looked rather promising to me.  tcataldo: Because I will not have time to rebase it & apply review comments quickly.  ",2015-10-15 08:27:13,2018-01-03 15:19:55,2,1,4
Issue#2191 add EMPTH in Strings,cla: no,,,"Qunzer: When we define variable,like that, String foo = """";
we can use that, String foo = Strings.EMPTH; 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  Qunzer: I signed it  kluever: -1 on this PR. It's fewer characters, and no difference (performance-wise) to just write """" instead of EMPTH  ",2015-10-15 13:20:28,2015-10-15 13:49:52,1,1,3
Issue#2192 add EMPTH in Strings,cla: no,,,"Qunzer: When we define variable,like that, String foo = """";
we can use that, String foo = Strings.EMPTH; 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  kluever: -1 on this PR. It's fewer characters, and no difference (performance-wise) to just write """" instead of EMPTH  ",2015-10-15 13:52:48,2015-10-15 15:12:06,1,1,3
Issue#2194 add isNullOrEmpty method in Collections2,cla: no,,,"Qunzer: The method isNullOrEmpty is null-safe to check a collection.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  Qunzer: I signed it  cpovirk: https://github.com/google/guava/wiki/IdeaGraveyard#iterablesisnullorempty  ",2015-10-16 10:01:13,2015-10-16 10:57:48,5,1,3
Issue#2197 Fix RegularContiguousSet.intersection to handle singleton results.,cla: yes,,cpovirk,"perceptron8: Fixes #2196. 



              The text was updated successfully, but these errors were encountered:
              perceptron8: oraclejdk7 and openjdk7 builds fail with: The log length has exceeded the limit of 4 Megabytes (this usually means that test suite is raising the same exception over and over). The build has been terminated. It doesn't seem to be related to this PR. oraclejdk8 build completes with: Done. Your build exited with 0. If there's something else I can do, let me know.  cgdecker: The current build failure is an issue with the latest GWT 2.8.0 snapshot, which I reported over here: gwtproject/gwt#9206  lowasser: This fix LGTM once the test issues are resolved.  perceptron8: I saw that gwtproject/gwt#9206 seems to be resolved. Could someone restart following builds, please? I'd like to avoid pushing commits just to trigger rebuild.  perceptron8: The last commit is not related to intersection - I hope you will find it valuable, however. I found that some assertions were too weak. @cgdecker Thanks for restarting builds!  ",2015-10-21 15:23:43,2015-10-23 17:09:14,3,2,5
Issue#2198 Added SuppressWarnings annotation to a used member which is updated using reflection,cla: no,,,"kilaka: Added SuppressWarnings annotation to a used member which is updated using reflection  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  kilaka: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  kilaka: Closed because I commited using an unknown user :(  ",2015-10-21 16:01:54,2015-10-21 16:20:20,1,1,2
Issue#2199 Added SuppressWarnings annotation to a used member which is updated using reflection,cla: yes,,,kilaka: Added SuppressWarnings annotation to a used member which is updated using reflection  ,2015-10-21 16:34:02,2015-10-22 05:34:44,0,0,2
Issue#2200 Added SuppressWarnings annotation to a used member which is updated using reflection,"package=concurrent, type=other, cla: yes, P4",,cpovirk,"kilaka: Added SuppressWarnings annotation to a used member which is updated using reflection.  cpovirk: This is good information to put in the source code. Probably we should have a @UsedFromReflection annotation for just this purpose. In fact, we do, but it's internal only... and there are at least two :( ... I've started a discussion about what we should do about that.  kilaka: I indeed couldn't find the @UsedFromReflection annotation.
Found almost nothing when searching for ""UsedFromReflection discussion"" using google's search.
@cpovirk, can you share the discussion link? Thanks.  cpovirk: Sorry, I should have said that it was a discussion inside Google (since that's where the teams that currently use the annotation are). I'll let you know how it goes.  ",2015-10-22 05:39:26,,1,1,4
Issue#2204 Separate java tokens by a single space,cla: yes,,,"robertwhitebit: Replacing multiple spaces and tabs, which separates java tokens, by a
single space, excluding horizontal aligned tokens.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  robertwhitebit: I signed it!  googlebot: CLAs look good, thanks!  kevinb9n: We have been slowly going through and reformatting all our code with
https://github.com/google/google-java-format; that's why you didn't find
much in guava/ itself.  We'll eventually get around to these packages and
that will take care of this automatically. On Fri, Oct 23, 2015 at 12:01 PM, googlebot notifications@github.com
wrote: CLAs look good, thanks! ‚Äî
Reply to this email directly or view it on GitHub
#2204 (comment). Kevin Bourrillion | Java Librarian | Google, Inc. | kevinb@google.com  robertwhitebit: Nice, the google-java-format project looks really promising. I'll keep an eye on it. üòâ
Thanks for the information.  ",2015-10-23 18:46:36,2015-10-25 18:24:29,1,12,3
Issue#2208 Made it possible to provide a custom StatsCounterSupplier in CacheBuilder,cla: yes,,,"jebl01: To simplify the process of collecting cache stats using e.g. io.dropwizard.metrics, CacheBuilder.recordStats() should have an overloaded version that accepts a StatsCounter Supplier. Just read the guidelines for contributing and realized that I should have opened an issue for this instead of going directly to a PR. I do that, but I keep this PR as a reference...  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jebl01: I signed it!  googlebot: CLAs look good, thanks!  ben-manes: This has to accept a Supplier, as the builder is reusable and a counter is generally per-cache. That's not horrible at the call site due toSuppliers.ofInstance or CustomCounter::new  ben-manes: This could be argued as a breaking API change  ben-manes: It would probably need to extend the original, with that marked as deprecated. Then it could go through the graceful removal process.  ben-manes: Actually just have the original deprecated and extend this one would be the right way  cpovirk: As you can see, we're mostly not making changes to common.cache anymore. We recommend Caffeine, which I believe offers this functionality.  jebl01: üëç  ",2015-10-27 10:44:15,2019-10-02 15:08:20,1,7,4
"Issue#2210 Add Futures.getUnchecked(Future<V> future, long timeout, TimeUnit unit)","type=addition, package=concurrent, cla: yes, P3",,,"bekce: Time limited waiting is performed frequently on Future and this method overloads Futures.getUnchecked() method with one that accepts timeout value.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  bekce: I signed it!  googlebot: CLAs look good, thanks!  Vinidel: I signed it! On Wed, 28 Oct 2015, 6:05 AM googlebot notifications@github.com wrote: CLAs look good, thanks! ‚Äî
Reply to this email directly or view it on GitHub
#2210 (comment).  cpovirk: We may end up doing this. The reasons that I haven't just merged it are: Again, we still might do this. It just requires some weighing of pros and cons. Having the code waiting for us is nice, at least :)  ",2015-10-27 18:59:18,,4,3,4
Issue#2211 Fix typo in Subscriber's Javadoc,"type=api-docs, package=eventbus, cla: yes",,cgdecker,"mkordas: 
No description provided.
  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  mkordas: I signed it!  googlebot: CLAs look good, thanks!  lowasser: I don't know whether it was the original intent, but ""sporting"" isn't necessarily wrong here: https://en.wiktionary.org/wiki/sport#Verb (transitive) To display; to have as a notable feature.
Jen's sporting a new pair of shoes;  he was sporting a new wound from the combat  mkordas: Thanks for explanation. I was looking in dictionary under 'sporting' and I haven't found anything. Apparently under 'sport' there is something that may fit.  cgdecker: FYI, while we think ""sporting"" was intentional, it's not a very clear word to use, so we are changing this to use the word ""with"" instead.  ",2015-10-28 20:30:34,2015-10-28 22:11:36,1,1,6
Issue#2213 make CycleDetectingLockFactory.lockStateChanged static,cla: yes,,,"Vladlis: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2015-11-02 18:03:26,2015-11-04 14:42:36,1,1,3
Issue#2214 make MultisetNavigationTester.totalSize in guava-testlib static,cla: yes,,,"Vladlis: 
No description provided.
  ",2015-11-02 18:50:47,2015-11-04 14:42:36,1,1,3
Issue#2215 make methods in CycleDetectingLockFactoryBenchmark static,cla: yes,,,"Vladlis: 
No description provided.
  ",2015-11-02 18:56:37,2015-11-04 14:42:36,1,1,3
Issue#2216 make some methods in guava-tests static,cla: yes,,,"Vladlis: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Thanks. I've merged all 4 of the PRs.  ",2015-11-02 19:11:19,2015-11-04 14:42:36,1,9,3
Issue#2236 Jdk5 backport sync,cla: no,,,"lgfei: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2015-11-24 12:43:55,2017-01-09 20:04:52,275,476,6
Issue#2242 preserve the laziness of incoming iterators to MergingIterator,"type=enhancement, package=collect, status=triaged, cla: yes, P3",,,"devinrsmith: Fix for issue #2241  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  devinrsmith: I signed it!  googlebot: CLAs look good, thanks!  ",2015-12-02 18:17:55,,2,1,3
Issue#2243 ImmutableSortedSet.copyOf should fail if input is not Comparable,cla: yes,,,"cjosw: ImmutableSortedSet.copyOf(Collection) should fail if the input collection is not comparable.
This currently applies for most collections, but fails if the input is a singleton.
This is recorded in issue #1835. I have noted that this is caught within TreeSet by invoking the comparator on the singleton item, so this change makes a similar call to catch the un-comparable items in a singleton ImmutableSortedSet. I have added tests for a two-element input collection (which was already caught), and a new test for a single-element input; this latter test only passes once the code change has been inserted. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Thanks. The trick will be seeing if any existing Google code fails and needs to be fixed. I have a feeling that we tried this before and had problems, but I'm hoping for the best. I'll let you know how it goes.  cpovirk: Actually, I went and found the CL from last year. It does break people. This includes some people who define Comparators that throw if given equal elements! That's terrible, but it's also hard to prioritize fixing. I've teased the project to a couple people without success. Sorry for not putting this information in the bug report. I'll do so now.  cjosw: This includes some people who define Comparators that throw if given equal elements! Note (just for info) that this is exactly what TreeSet does when you insert its first element.
The comparator call is what triggers the failure here:  cpovirk: Closing, since we need to do cleanup internally to take this :(  ",2015-12-04 13:02:41,2017-01-30 20:21:41,1,2,3
Issue#2244 cache: implement CacheStats#putCount(),"type=addition, package=cache, cla: yes, P4",,,"kofemann: This is a fix for issue #1838: CacheStats is missing putCount, which makes statistics not complete if you have situations where cache is populated by load and explicit put.  kofemann: rebased on top of 7e0795d  ",2015-12-04 18:51:50,,3,6,3
Issue#2247 Update documentation to clarify that empty immutable collections may be singletons,"package=collect, type=documentation, cla: yes, P3",,,"cjosw: This updates the documentation (no functional changes), to clarify that empty immutable collections may be singletons, as raised in a bug: #2083  nick-someone: Hi there! Sorry it's taken a while to get to reviewing this PR. Looking over the changes, I have a couple of primary notes:  ",2015-12-07 16:53:03,2020-05-07 13:51:21,1,15,4
Issue#2248 modify testCheckArgument_simpleMessage_failure to clean code,cla: yes,,,"intonormal: verifySimpleMessage(expected)  change to assertThat(expected).hasMessage(""A message""), so that the  compared target(""A message"") can be saw straightway  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  intonormal: I signed it!
this is my first contribute in open source
exciting and hope to be accepted  googlebot: CLAs look good, thanks!  cpovirk: Sorry that we sat on this (and so many pull requests) for so long. If ""A message"" appeared inline in the setup for the test, I would agree that there's a clear benefit to including it inline in the assertion. But it's already defined elsewhere, so this test already fails to be readable on its own :( You could probably fine a way to move all the information inline if you want, but I'd encourage you to look for something more substantial. Maybe #2394 if you're still interested.  ",2015-12-09 14:51:50,2017-01-30 22:47:25,2,1,3
Issue#2344 Remove unaccessible and unnecessary legacy XML_ESCAPER.,cla: yes,,,"leeca: During some analysis with DepAn, I notices that XML_ESCAPER is never used internally, nor is it accessible externally.  Seems like a good idea to delete this cruft, especially after 2 years as dead code.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  leeca: I signed it!  googlebot: CLAs look good, thanks!  kluever: So this is actually some deprecated code that we have internally, and is publicly accessible for our internal users (the method is deprecated). Usually we're able to strip out that stuff, but since it's being constructed in a static block, it's a little more difficult. Since it's not hurting anything, I'm inclined to leave it as-is.  leeca: You have write permission, so it is your call.  But it does seem to violate the normal Googley convention that no dead or commented out code should be checked into the repository.  I guess all rules have exceptions.  lowasser: To be clear, the code is used internally, and we mirror out our internal codebase by passing it through a stripping tool, which has more trouble stripping out this code than usual because of the way it's written.  Internally, we're extremely aggressive about stripping out unused code -- much more aggressive than we can be externally -- but this happens to hit an edge case where we can't strip out something that we've eliminated externally.  ",2015-12-28 19:22:30,2015-12-28 23:34:09,1,1,4
Issue#2345 Add Splitter methods to return CharSequence types.,"type=enhancement, cla: yes, P4",,,"mspiegel: Not sure if this has been discussed previously but it is trivial to add methods that return CharSequence types to the Splitter API and maintain the existing API. We have some use cases for this feature where we do not want to create temporary char[] array copies of the intermediate substrings. The Splitter API accepts CharSequence types as input and internally manipulates CharSequence types. This patch maintains the existing methods that return String types and adds additional methods that
return CharSequence types. The performance overhead on the existing methods that return String type is one additional call to Iterators#transform() that calls toString() on the CharSequence results. Note the #toString() call was already present in the existing implementation.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: CLAs look good, thanks!  kluever: The Splitter API has been part of Guava since 1.0, and has been fairly stable (it's non-@Beta at this point). I'm somewhat doubtful that this use-case is popular enough for us to start expanding the API at this point.  mspiegel: It looks like the API of Splitter was created at the time when the HotSpot
JVM did not allocate new char[] arrays for subsequences. That behavior was
changed in their release of JDK 7u6:
http://bugs.java.com/view_bug.do?bug_id=4513622. Might this warrant the
need for new methods that do not create new char[] arrays?
On Jan 2, 2016 3:26 AM, ""Kurt Alfred Kluever"" notifications@github.com
wrote: The Splitter API has been part of Guava since 1.0, and has been fairly
stable (it's non-@beta at this point). I'm somewhat doubtful that this
use-case is popular enough for us to start expanding the API at this point. ‚Äî
Reply to this email directly or view it on GitHub
#2345 (comment).  kluever: That's an interesting issue, but I think I'm still -1 on this. Any thoughts @lowasser ?  kluever: Unlikely to add this w/o a demonstrated, proven performance issue.  ",2015-12-29 16:35:41,2021-04-19 15:18:07,1,2,4
Issue#2354 Add new mediatypes according to #2132,"package=net, type=addition, cla: yes",,cgruber,"steven-maasch: Add new mediatypes from #2132. The mediatype for php (text/php) and cmd (text/cmd) are not included,
because these are not specified by IANA. 



              The text was updated successfully, but these errors were encountered:
              kluever: I have a CL for this internally as well (CL/102147951)...we had a question about L24 vs. l24, but I think we decided just to go with l24.  kluever: Submitted internally...it should be mirrored out shortly. Also for these MediaType additions, the hard work isn't adding the constants, but rather writing the javadocs, and digging up the proper citations for the javadocs.  ",2016-01-07 16:43:10,2016-01-20 21:25:46,1,1,4
Issue#2377 Feature/tables.synchronized table 2156,cla: yes,,,"mostlymagic: Had deleted previous fork by accident.
Suggested changes implemented in this one.  lowasser: Wrong variable name here =)  lowasser: Please indent this comment +2.  lowasser: Change the variable name here too.  lowasser: Wait, I wasn't referring to indenting these; they should be at the same level as the rest of the code...  lowasser: I think it's this comment that should be..indented +2?  The leading / of the comment should be at the same level as the method signatures.  mostlymagic: seems to have been an IDE settings mixup. will provide a fix, sorry  shapowang: Does anyone resolve the conflict and merge the code?
I cannot find the Tables.synchronizedTable function in guava 20.0-rc1.This function would be useful,please.  cpovirk: I'm not sure why we ended up with our own implementation instead of this one, but we ended up adding one in e3f9ba6  ",2016-01-30 12:56:24,2017-01-19 19:49:20,2,4,5
"Issue#2383 In Uninterruptibles, added waitUninterruptibly methods which call Object#wait methods",cla: yes,,,"RamAnvesh: #1409  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  RamAnvesh: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Sorry for the delay on this. Now that UninterruptiblesTest is released, can you add some tests for your new methods, patterned off the existing tests? Then I'll take a look.  RamAnvesh: Sure. will do...  RamAnvesh: Hi,
Sorry about the delay. I have added 11 tests for the following cases:  cpovirk: Hmm. I am pretty sure that we need to return here. wait is different than the other interruptible methods because notify is a one-shot thing: If you aren't wait-ing during the call, then you don't get the notification. This is different than something like latch.await(), where you can start waiting after the countDown() call and still ""receive the notification."" Past discussion converged on the idea that we'd probably need to do something like this: Sorry for not digging this up earlier. I'd forgotten about it until I actually saw the code :(  cpovirk: http://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.2.1 And for my reference:  ghost: Interesting. I completely overlooked that difference. I am fine with the code which you shared. But wanted to discuss a possibility: In the code which you shared, the usage pattern of the users of this API would be something like this: if we could change the API to something like this: The usage will look like this: Your thoughts?  cpovirk: That seems like a reasonable API. I think the main question is whether we want to get in the business of supplying high-level wrappers around Object.wait or whether we want our high-level APIs to be based on other primitives, like Monitor or even ReentrantLock. I'll see if I can get some other opinions on this.  cpovirk: The general opinion internally seems to be that, if people are willing to change their code, they should probably move to something like Monitor. Arguably we shouldn't even provide waitUninterruptibly(Object), but I can at least see the value in providing a method that users can easily plug in for a broken try-catch block without otherwise touching the structure of their code and without introducing a usage of Supplier (which we'd like to phase out after Java 8).  RamAnvesh: Ok. I too feel that taking a Supplier as an argument is too high level.
Also, Object.wait() is too low level to provide and API for. I too moved away from Object.wait() to something like Condition in my code.
I don't want to force this into the API unless it adds substantial value. I will let you take the final call on whether we should go forward with this before I proceed further. On a side note, I am interested to know more about what you said about phasing out the usage of Supplier(?) after Java 8. Would be great if you could point to some issue/article etc. regarding this.  ghost: Do you suggest we return here? or keep retrying till the timeout expires?  RamAnvesh: Keeping in mind the reasons you have given and some open questions, I am not going forward with this change.
Closing this pull request. Please reopen if you need any further discussion. Open question: Looks like Object.wait() is not a good candidate for uninterruptibility.  ",2016-02-07 08:20:17,2016-05-15 05:02:47,1,2,3
Issue#2385 Refactored code in Uninterruptibles.,cla: yes,,,"RamAnvesh: All the major logic is now moved to a single private method.
Now there is no code duplication, and this should be help in adding new methods to this class by writing very little code without much risk of introducing bugs  RamAnvesh: This is a sample implementation for #2384. The design needs to be discussed before proceeding.  cpovirk: As noted on #2384, we decided to move away from this approach a while back.  ",2016-02-07 13:36:47,2016-02-07 15:34:34,1,7,3
Issue#2395 Reuse the mac instance just constructed for bit-length calculation,"package=hash, cla: yes",,kluever,harningt: No use in constructing a fresh copy of the Mac just to get the bit-length.  kluever: Thanks - this will be mirrored out shortly!  ,2016-02-18 06:19:52,2016-02-18 15:37:18,1,1,3
Issue#2398 UncheckedIOException introduced in Throwables.propagate(),cla: yes,,,"pivovarit: This closes #2397  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  pivovarit: I signed it!  googlebot: CLAs look good, thanks!  ",2016-02-21 11:34:58,2016-02-21 11:54:43,1,1,2
Issue#2402 Merge pull request #1 from google/master,cla: yes,,,RamAnvesh: Updating from google:master  ,2016-02-28 07:14:27,2016-02-28 07:15:15,1,0,2
Issue#2404 add RateLimiter acquire with double permits,"type=enhancement, package=concurrent, cla: yes, P4",,,"brackxm: pull request for #2392 Duplicates the acquire methods for backwards compatibility.
The package private methods with signature changes have not been duplicated.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  brackxm: CLA is signed  brackxm: The company name is UP-nxt  googlebot: CLAs look good, thanks!  ",2016-02-29 15:23:51,,1,3,3
Issue#2414 EnumMaps#forAllKeys,"type=addition, package=collect, status=triaged, cla: yes, P3",,,"lpandzic: PR for #2407.
Implemented and tested static factory methods in ImmutableEnumMap.
Builder is half baked.  ",2016-03-07 16:10:52,,1,2,3
Issue#2417 Make LittleEndianDataInputStream#readAndCheckByte public,"type=enhancement, package=io, cla: yes, P4",,,SpOOnman: In my opinion LittleEndianDataInputStream cannot be easily used with composition. I think readAndCheckByte method should be public. For example I need to have a method that reads 3 bytes and constructs int from that array. My implementation would be the same as readInt with first byte being 0x00. I'd like to use readAndCheckByte but it's private.  SpOOnman: Any news on this? Is it fine or needs more work? Thanks.  ,2016-03-10 15:46:44,,1,1,3
Issue#2420 Allowing Range.intersect to return empty sets when ranges are not connected,cla: yes,,,"alfredodiaz: When I am working with ranges that sometimes are connected and sometimes not, It is a litle cumbersome to have to check if the ranges are connected before any calling to the intersection method. I added a new intersection method with a new optional flag parameter ""allowEmptyRanges"". When this flag is true, the method will return an empty set when ranges are not connected (instead of throwing an IllegalArgumentException). The change is backward-compatible but I have included specitifc unit tests for this little change. I would be glad to hear any comments from you. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  alfredodiaz: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: This is surely useful to you and to some other users, but I think it's fundamentally no longer just an ""intersection,"" and it's hard to explain what it is without saying ""This makes sense only if you consider all empty ranges to be equivalent."" That's fine, but I don't think it belongs in Guava itself. The way I look at it is that it changes every paragraph in the documentation. Since you're adding a new method, not changing behavior, that's in some sense OK. But I think the change is too large even for an overload, and I think the operation is too niche to justify adding a separate name for. ""Returns the maximal range... unless..."" ""The intersection exists if and only if... unless..."" ""The intersection operation is commutative, associative and idempotent... unless...""  ",2016-03-13 21:43:59,2017-01-31 17:41:58,1,2,3
"Issue#2422 digitsOfNFactorial, getNumbersOfDigit  Methods are added","type=addition, package=math, status=will-not-fix, cla: yes, P4",,lowasser,"ozanonurtek: //This method calculates digits number of number n's factorial without calculating 'n!'
//For example:for n=5--> 5!=120 --> returns 3 //This method calculates digits number of n
//For example:for n=4129--> returns 4  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ozanonurtek: I signed it!  googlebot: CLAs look good, thanks!  netdpb: What use cases do you see for these methods? How often do you expect people to need to calculate these?  ozanonurtek: It might be helpful for scientific use. @netdpb  netdpb: I'm sure that's the case, but I'm not certain that that's useful frequently enough among Guava's users. We tend not to add features unless we have good evidence that they'll be generally useful and frequently used. Otherwise we could add thousands of correct features that won't get used. I'm going to close this PR for now. If you find data that suggests that these methods would be more widely used than it seems, please reopen it. Thank you for this suggestion.  ",2016-03-15 21:42:04,2019-10-29 13:22:34,5,1,5
Issue#2424 concatBytesToArray,cla: yes,,,"TeknoCepni: Created a function that returns byte array. Take paremeters of byte values, concat all of them and returns a single array.
Example:
byte array = new byte[2];
array = concatBytesToArray(0x06,0x01); 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  TeknoCepni: I signed it!  googlebot: CLAs look good, thanks!  Mihai238: Hello, Why not simply use byte[] array = new byte[]{0x64, 0x61}; ?  TeknoCepni: Hello,
If you wanna add many byte values and you don't know how many. You can't this structure.
Thanks your comment.  jonahgreenthal: But you have to either know how many you have (to pass them into the function) or pass in an array to begin with. Calling this method creates the array anyway (that's how varargs works), and your method just copies it. I see no use for such a method.  TeknoCepni: If you want to concat many byte values. Its useful.
Thanks your comment.  kluever: I agree with @TeknoCepni - I don't see why this method is useful. If you're passing var-args, then you might as well just use new byte[] {a, b, c}.  TeknoCepni: I am new here.@kluever  I used to merge this method for fetching mbus datas. But you are right.
This can also be done in such this way.
Thanks your comment.  ",2016-03-16 07:44:28,2016-03-16 16:36:41,1,1,5
Issue#2426 public static boolean isPrime(int p) ,"type=addition, package=math, cla: yes",,lowasser,"ozanonurtek: //Check given number is prime number or not. If number is prime return true, else return false.  arthurv89: It returns the wrong result for p<2 since that should return false. What about the following, which is faster and correct?
(Inspired from http://stackoverflow.com/questions/2385909/what-would-be-the-fastest-method-to-test-for-primality-in-java)  lowasser: If we're going to provide primality testing at all, we have a much more heavily optimized implementation Google-internally that we haven't open-sourced primarily because we weren't convinced anyone would use it.  lowasser: This is not a function I'm aware of anyone needing ever.  Can you discuss your use case?  cpovirk: We added an isPrime implementation.  ozanonurtek: Thanks :)  ",2016-03-16 10:44:29,2016-11-01 18:42:51,4,1,6
"Issue#2427 public static int lcm(int a, int b) //lcm method is added","type=addition, package=math, cla: yes, P3",,lowasser,"opsenes: public static int lcm(int a, int b)  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  opsenes: I signed it!  googlebot: CLAs look good, thanks!  leksak: The indentation depth is wrong. Guava uses 2 spaces instead of 4. Also note that the function body should be indented as well. Javadoc is missing.  kevinb9n:  ",2016-03-16 11:29:10,,2,1,7
Issue#2428 Remove `@Beta` from Verify class,cla: yes,,,"xasx: Fixes #2409  xasx: This is my first PR here. Let's see whether the Beta API is asserted in tests... Edit: Checked VerifyTest, not in there  ",2016-03-18 09:56:43,2016-07-05 08:31:35,1,1,2
Issue#2431 updated readme,cla: yes,,,"smurphy333: Capitalization change in documentation line 62, report changed to Report Very very trivial change to documentation of the read-me. Just cutting my teeth on Git..  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  smurphy333: I signed it!  googlebot: CLAs look good, thanks!  ",2016-03-22 02:46:23,2016-03-22 16:00:00,1,1,2
Issue#2432 Object can not be serializabled,cla: yes,,,"heyunxia: fix bug:
List resultList = Lists.transform(list, new Function<Bean, String>() {
@override
public String apply(Bean input) {
return input.getId();
}
}); after using this , the resultList can't be serializable 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  heyunxia: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: You've changed the code to make the Iterator serializable, but your description suggests that you want resultList to be serializable. Which one are you interested in?  heyunxia: Yes, my resultList can do serializable depends on it's implementor, so i marked the top interface Iterator serializable.  lowasser: Making the Iterator serializable shouldn't affect the actual List at all, and even so it's really not clear to me that single-use stateful objects like Iterators should ever be serialized. The root issue seems to be that your Function isn't serializable.  ",2016-03-22 07:04:17,2017-01-09 20:14:51,1,1,4
Issue#2437 Speculative fix for issue 2365,cla: yes,,,"mardibiase: Fix for #2365  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  mardibiase: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Thanks. I'm asking around to find out whether NumberFormat is going to pull in undesired internationalization data (currency formats, mainly). I'll report back here.  cpovirk: The feedback I got: But I also heard an alternative approach that uses JsInterop. I'm trying that now.  ",2016-03-29 14:43:30,2016-04-01 17:02:58,1,6,3
Issue#2439 Merge pull request #1 from google/master,cla: no,,,"292388900: update 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2016-03-31 15:48:40,2016-03-31 15:48:49,1,0,2
Issue#2441 Handle escape characters properly while scraping ClassPaths.,cla: yes,,,"ColinChartier: The URI constructor for file is much more robust when it comes to handling encodings.
It saves a lot of headache of worrying about implementation specific edge cases.
(Fixes #2152) 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ColinChartier: CLA done  googlebot: CLAs look good, thanks!  ColinChartier: Hmm, looks like there is something strange about the way manifests are parsed versus how ClassLoader paths are parsed. I've applied the fix only to the getClassPathEntries method, even though it seems the fix would apply both there and the getClassPathFromManifest method. @eamonnmcmanus  ColinChartier: I think there is an issue in the getClassPathEntry method, the ""path"" argument should be URLEncoded before it is passed into the URL constructor, otherwise you get some really sketchy behavior like the URL being ""file:(...)/guava/guava-tests/base/the^file.jar"", and calling .toURI() on that throws an exception because it isn't a valid URL. In any case, that seems like a separate issue, so I would rather do another PR for it.  I have to read up on what constitutes a valid manifest file entry to make sure that all of the encoding problems are solved there too. This is one of those rare cases where the implementation was wrong in two places so that the unit test that should've caught this failed.  If the original method had been using the File(URI) constructor, it would've complained about the invalid URI being generated in the getClassPathEntry method.  If the getClassPathEntry method properly encoded the URI for special characters, the File(String) constructor would fail because it doesn't decode anything.  They both cancelled each other out to cause this weird little bug.  eamonnmcmanus: Making a regression test isn't trivial because ClassPathTest doesn't currently have a simple way to obtain sample jars, as far as I can see. We would want a test that would put the jar in something like ""strange %directory""/test.jar but we'd need an input jar to put there. So it might not be feasible right now to make a test. (There's an additional layer of complexity because the test also has to work when run from Google's internal build system.)  ColinChartier: In the mean time, is it possible to merge just this fix for the non-classpath loader? It shouldn't break any backwards compatibility, and we can fix file names with special characters here at least.  cpovirk: We ended up attempting what I think is this with a fallback: 896c51a We added some tests to create actual jars to test against. If you know of cases that still fail, let us know.  ",2016-04-01 01:30:54,2017-01-30 20:01:39,1,1,4
Issue#2447 Change 1 committed,cla: no,,,"saeedj: 
No description provided.
  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-04-11 00:03:00,2017-01-09 20:04:52,1,1,4
Issue#2456 Min and Max methods for BigIntegerMath class,cla: yes,,,"Sumu-Ning: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              lowasser: I'm not sure why you would need this?  You can just do Collections.max(Arrays.asList(bigIntegerArray)) or use any of the other ways to get a max of Comparables.  Sumu-Ning: of course.
Just want to type less ...  lowasser: Please stick with standard methods for Comparables.  If you really feel the available options for Comparables are too long, please submit a feature request for something that works for all Comparables.  ",2016-04-15 03:13:26,2016-04-29 19:14:31,2,2,3
Issue#2457 Emulate Throwables in GWT,"status=fixed, type=enhancement, package=base, cla: yes, platform=gwt",,cpovirk,"korzha: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Thanks! I've tweaked a couple things (mostly to leave the soon-to-be-deprecated methods as @GwtIncompatible) and will get this submitted internally and mirrored back out.  ",2016-04-15 15:08:04,2016-04-15 18:20:15,1,3,3
Issue#2460 Arquitetura de Software - TP Refactoring,cla: no,,,"DVSCross: Planilha de Altera√ß√µes
https://docs.google.com/spreadsheets/d/16i-99n-DpzYtVD0LsYbsyxWYMeVs-OUo7PCMbVXXSjs/edit?usp=sharing 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2016-04-18 00:07:53,2016-04-18 00:09:00,1,100,2
Issue#2480 Extensions for Preconditions API,cla: no,,,"jakubmalek: 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jakubmalek: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  lukesandberg: re: Preconditions why not just pass a custom object with an overridden toString method?  lowasser: This makes some sense in Java 8 where a Supplier is just a lambda and an
Object with an overridden toString is an anonymous inner class.  And using
this approach at all lets you avoid front loading computations on the
objects that get captured by the lambda. That said, until Java 8, the Object anonymous class is just as good. On Wed, May 25, 2016, 9:44 AM Luke Sandberg notifications@github.com
wrote: re: Preconditions why not just pass a custom object with an overridden toString method? ‚Äî
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub
#2480 (comment)  kevinb9n: On Wed, May 25, 2016 at 10:13 AM, Louis Wasserman notifications@github.com
wrote: This makes some sense in Java 8 where a Supplier is just a lambda and an Object with an overridden toString is an anonymous inner class. And using
this approach at all lets you avoid front loading computations on the
objects that get captured by the lambda. Preconditions was never designed with the notion that ""if you ever have
to revert to an if/throw something has gone terribly wrong"". When I see circuitous things like this being done, I feel (more) sad that
we ever introduced Preconditions at all. That said, until Java 8, the Object anonymous class is just as good. On Wed, May 25, 2016, 9:44 AM Luke Sandberg notifications@github.com
wrote: re: Preconditions why not just pass a custom object with an overridden toString method? ‚Äî
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub
#2480 (comment) ‚Äî
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub
#2480 (comment) Kevin Bourrillion | Java Librarian | Google, Inc. | kevinb@google.com  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-05-15 10:28:24,2017-01-09 20:04:52,8,6,6
Issue#2481 Make Cache class keys type safe,"status=working-as-intended, cla: yes",,,"juhovh: Maybe this should be an issue instead of pull request, if you find this to be against the guidelines for contributing, please feel free to close this request immediately. I wanted to send a pull request instead to demonstrate how invasive the change would be. (not very) Basically I was using LoadingCache<String, Value> in my application and used it to cache data based on a string key, and I also needed to invalidate the cache, so invalidate(key) was called whenever necessary. Later on I needed to change the type of the LoadingCache to LoadingCache<Wrapper, Value> in order to pass on some extra parameters for the CacheLoader. Everything compiled and seemed to work fine, but after a while some cache invalidation issues started to come up. After debugging I figured out that the signature of invalidate(key) is actually invalidate(Object key), instead of using the actual key type. The lack of cache invalidation in turn caused inconsistency in our actual data and at least a day of extra work trying to fix everything manually. So I thought if having the key type included in the signature could've saved me hours of work, maybe I'm not the only one. In theory it would be possible that someone is using an object for invalidation that is not a subclass of key, but would still equal to it. In practice I find this rather unlikely, but I would like to hear some comments about how to proceed with this suggested change. Also, I have not signed the Google CLA yet, but I can do it if necessary.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: CLAs look good, thanks!  juhovh: It looks like 9eed063 has intentionally erased types from getIfPresent and getAllPresent, so I would be ok by not touching these two and modify the commit accordingly. Don't know the details behind that change, but for invalidate the case still stands in my opinion...  juhovh: Looks like a similar issue is discussed in http://smallwig.blogspot.co.uk/2007/12/why-does-setcontains-take-object-not-e.html blog post and the end result would be that the current behaviour is more correct. However, in my particular case the Well, when I typed that code into IntelliJ, it flagged a warning for me right away. didn't seem to stand and there were no warnings whatsoever with IntelliJ IDEA 15. Again, feel free to close this pull request. Guess I just need to solve this issue with big warning messages, but it feels quite wrong...  cpovirk: Sorry for the trouble that this caused you. This is indeed intentional. The best documentation I know of at the moment is Error Prone's. We do want to extend Error Prone to catch bugs not just with the use of JDK collections but also with Cache, but we haven't gotten there yet. Our hope is to do so by introducing some kind of @TypeCompatibleWith annotation. If we do that, then IntelliJ could read the annotation and provide the same warning. (Or they could just special-case Cache today.)  kevinb9n: We are hoping to extend that Error Prone check to catch Guava classes like
Cache, but actually FindBugs has beaten us to that by a few years. I would
suggest adopting it in your project. It's unfortunate, but static analysis
is the only real solution here. On Mon, May 16, 2016 at 6:44 AM, Chris Povirk notifications@github.com
wrote: Sorry for the trouble that this caused you. This is indeed intentional.
The best documentation I know of at the moment is Error Prone's
http://errorprone.info/bugpattern/CollectionIncompatibleType. We do
want to extend Error Prone to catch bugs not just with the use of JDK
collections but also with Cache, but we haven't gotten there yet. Our
hope is to do so by introducing some kind of @TypeCompatibleWith
annotation. If we do that, then IntelliJ could read the annotation and
provide the same warning. (Or they could just special-case Cache today.) ‚Äî
You are receiving this because you are subscribed to this thread.
Reply to this email directly or view it on GitHub
#2481 (comment) Kevin Bourrillion | Java Librarian | Google, Inc. | kevinb@google.com  juhovh: I forgot to reply to this, thanks to both of you for suggestions and I'll consider adding FindBugs to the project development process. For now I'm avoiding the issue by having a generic wrapper around the different cache types we're using with the key type always defined, and unit tests for the cache invalidation. Need to see if that becomes insufficient at some point.  ",2016-05-16 10:07:26,2016-05-16 13:44:03,1,5,4
Issue#2490 Added function Multimaps.indexSet,cla: no,,,"vharuty: Based on issue #2468
Added a function Multimaps.indexSet 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  ",2016-05-28 01:59:43,2016-05-29 18:50:43,1,2,2
"Issue#2491 Added function Multimaps.index(Set<V>, Function<V, K>)",cla: no,,,"vharuty: Added function Multimaps.index(Set, Function<V, K>) based on
#2468  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  ",2016-05-29 19:46:51,2016-05-29 20:01:30,1,2,2
"Issue#2492 Added function Multimaps.index(Set<V>, Function<V, K>)","type=enhancement, package=collect, cla: yes, P4",,,"vharuty: Added function Multimaps.index(Set, Function<V, K>) based on
#2491  cpovirk: Cross-link to feature request: #2468  ",2016-05-29 20:17:37,,1,2,3
Issue#2498 TreeMultimap.create(TreeMultimap) takes O(n log n) issue 1579,"type=enhancement, package=collect, type=performance, cla: yes, P3",,,"wodomierz: TreeMultimap.create(TreeMultimap) take O(n) issue:
#1579  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  googlebot: CLAs look good, thanks!  ",2016-06-05 19:50:17,,1,3,3
Issue#2499 Maps.unmodifiableNavigableMap covariant in V (issue 1870),cla: yes,,cpovirk,"wodomierz: issue #1870 



              The text was updated successfully, but these errors were encountered:
              ",2016-06-09 18:16:00,2016-06-16 16:43:26,1,1,3
Issue#2500 Fix usage example of ImmutableSortedMultiset.Builder,cla: yes,,cpovirk,"abvadabra: Currently, example code in the description of ImmutableSortedMultiset.Builder class contains call for constructor which doesn't exist. This PR replaces constructor with ImmutableSortedMultiset.naturalOrder() call  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  abvadabra: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Thanks. I think I'm going to keep it as a constructor call but add the required parameter.  ",2016-06-11 19:51:11,2016-06-13 15:56:50,1,1,3
Issue#2506 Merge pull request #1 from google/master,cla: no,,,"cmanlh: merge  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2016-06-17 09:48:35,2016-06-17 09:48:52,1,0,2
Issue#2511 #2509: Fix for 'DoubleMath incorrectly rounds 0.99999999999999994 to 2 with rounding mode UP or CEILING,cla: yes,,lowasser,"terzerm: See Issue #2509  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  terzerm: I signed an individual CLA.  googlebot: CLAs look good, thanks!  eamonnmcmanus: I think this will do the wrong thing if x is too large to fit in a long.  terzerm: Problematic values are
(a) NaN, Infinite --- they are checked at the beginning of the method (exception is thrown)
(b) Finite, exceeding long range: are mathematical integers, hence will not run through the statement This is confirmed by the fact that all DoubleMath unit tests are still passing.  lowasser: I concur, Eamonn: if x doesn't fit in a long, it's a mathematical integer anyway.  eamonnmcmanus: OK.  cpovirk: Fixed a little differently in 1b1163b. Thanks for reporting.  ",2016-06-27 14:34:22,2016-06-30 19:49:38,1,2,5
Issue#2515 Add possibility to create Striped lock with 'fair ordering policy' = true,"type=enhancement, package=concurrent, cla: yes, P3",,,"armsargis: Added static method to create Striped with Locks with 'fair ordering policy' = true  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  armsargis: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  googlebot: CLAs look good, thanks!  ",2016-06-29 14:46:11,,1,2,3
Issue#2517 Issue google/guava#332: Ability to specify handling for unknown values,cla: yes,,,"dtrunk90: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  dtrunk90: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: We do expect to support this use case eventually, but we're still looking to settle the API. Hopefully someday :(  ",2016-07-04 17:36:26,2017-02-01 04:05:13,1,3,3
Issue#2518 Fix HttpHeaders constants to be lowercase.,"package=net, cla: yes",,kluever,"swankjesse: HTTP/2 requires lowercase, and it's our collective future. Any code that cares
about the casing of headers is broken, so any code that breaks from this change
is destined to break when it's used with HTTP/2. String.toLowerCase() and Ascii.toLowerCase() both have optimizations that make
code run faster if the input is already lowercase. I estimate that 0.0000001%
of Google's extensive compute resources are currently wasted converting headers
to lowercase when they could be lowercase already. 



              The text was updated successfully, but these errors were encountered:
              kluever: Oh man, I think this is going to cause some serious breakages inside of google if we merge it. This is pretty scary. HTTP/2 requires lowercase Can you send a reference to the RFC or whatever? I'm going to start an internal thread about this and see what folks think.  kluever: Ahh, I think I found it: header field names MUST be converted to lowercase prior to their encoding in HTTP/2. A request or response containing uppercase header field names MUST be treated as malformed https://httpwg.github.io/specs/rfc7540.html#rfc.section.8.1.2  kluever: Hey Jesse, We discussed this internally quite a bit, and decided to leave it as is. The fact that HTTP headers are lowercase on the wire is an implementation detail. It does not need to be surfaced to users. And... The HTTP/2 protocol is mostly binary, so you'd be using an encoder anyway. Yes, there is a slight performance penalty for lowercasing, but it's not even close to large enough for us to try to push a change of this magnitude through. Cheers,
-kak  swankjesse: Works for me. Two quick notes about why this is too bad:  ",2016-07-06 14:05:38,2016-07-20 17:47:15,1,2,3
Issue#2519 Applied skeletal implementation to interface migration automated refactoring,cla: yes,,,"khatchad: This is a semantics-preserving refactoring that migrates existing method implementations in classes to the corresponding implemented interface methods as default methods. The tool does not add new code; it only rearranges existing code. We have upgraded the compilation process to use Java 8 so that default methods can be used. However, we realize that this may not be acceptable. Still, any feedback you can supply would be helpful. Thank you for your help in this evaluation! Any feedback you can provide would be very helpful. In particular, we are interested if each of the proposed changes are helpful or not.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  khatchad: I signed it!  googlebot: CLAs look good, thanks!  kluever: Thanks Raffi, but we've been hard at work on a Guava for Java 8 branch which should be out later this year. That being said, I'm going to close this out. FYI @lowasser - you might be interested in seeing what was proposed here.  khatchad: Thank you for the consideration, @kluever! We'll be on the look out for the Java 8 branch.  khatchad: Hi @kluever and @lowasser. I am thinking of applying for a Google Faculty Research Award, deadline September 30, 2016, and proposing something based on this research. I know it is a ways away, but I was wondering if you know anyone that would be interesting in sponsoring the application, as that is one of the available fields. I can send more information if desired. Thanks!  ",2016-07-06 15:55:50,2016-07-06 15:58:38,2,16,3
Issue#2523  No need to disable doclint completely. Disabling high-level HTML iss‚Ä¶,cla: yes,,,"turbanoff: ‚Ä¶ues should be enough 



              The text was updated successfully, but these errors were encountered:
              ",2016-07-11 20:30:57,2016-10-05 17:30:01,1,2,2
Issue#2527 Fixed typo in javadoc,cla: yes,,,"govindpatel: Fixes #2525 



              The text was updated successfully, but these errors were encountered:
              govindpatel: closing this because it is not from master branch.  ",2016-07-12 12:42:18,2016-07-12 13:07:02,1,1,2
Issue#2528 Fixed the typo for javadoc,cla: yes,,cpovirk,govindpatel: Fixes #2525  ,2016-07-12 13:11:51,2016-07-12 15:23:24,1,1,3
Issue#2531 Simple isNullOrEmpty to Lists class,cla: yes,,,jonathanbeber: Just adding a method similar to already existing in Strings class.  ,2016-07-15 21:51:33,2016-07-15 21:52:10,3,2,2
Issue#2534 modify pom,cla: no,,cgruber,"hellosky806: add repository 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cgruber: Why is this repository necessary.  Guava is itself available through repo1,
as are it's very few dependences.  What is this pull request accomplishing? On Wed, Jul 20, 2016, 07:24 Kurt Alfred Kluever notifications@github.com
wrote: Assigned #2534 #2534 to @cgruber
https://github.com/cgruber. ‚Äî
You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub
#2534 (comment), or mute the
thread
https://github.com/notifications/unsubscribe-auth/AAUN4lucl2WOv3KgMR8xAN4-mhX7Ir4Bks5qXi-bgaJpZM4JQck1
.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-07-20 05:48:43,2017-01-09 20:04:52,2,1,5
Issue#2535 Add method to create a temp directory at a different location,"type=addition, package=io, cla: no",,cgdecker,"phoenix384: Add a method to create a temp directory beneath a user defined parent directory instead of the system's temp directory  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-07-20 11:42:53,2017-01-09 20:04:52,1,1,5
Issue#2541 while-statement did not loop,cla: yes,,cpovirk,"leksak: A return statement occurred in the first
iteration of the loop making the loop
statement redundant, as it is semantically
equivalent to an if-statement. Replaced the loop-statement with the
equivalent if. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  leksak: I signed it!  googlebot: CLAs look good, thanks!  ",2016-08-03 22:37:58,2016-08-09 14:07:15,1,1,3
Issue#2543 Implement the indexOf method of the CartesianList,cla: no,,,"hadrienk: The implementation of the method indexOf(Object o) in the AbstractList iterates over the iterator. In the case of Cartesian list, the index can be computed instead. 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  ",2016-08-08 13:37:28,2016-08-08 13:38:04,1,2,2
Issue#2544 Implement the indexOf method of the CartesianList,"type=enhancement, package=collect, cla: yes",ronshapiro,lowasser,"hadrienk: The implementation of the method indexOf(Object o) in the AbstractList iterates over the iterator. In the case of Cartesian list, the index can be computed instead.  hadrienk: Hi! Can I help with something to get this PR merged?  hadrienk: @lowasser @kluever  ronshapiro: Google Style doesn't allow for multiple variables to be declared in the same statement. Can you split this up? I think it would also make the next conditional much clearer:  ronshapiro: axisIndex is more appropriate - axes is not the multiple of axe here, rather it's the multiple of axis  cpovirk: (IIRC Louis may already have imported this and made the style fixes. Not on my laptop to check though.)  ronshapiro: Ah, I see this is in #3197, but @lowasser didn't attribute it correctly  ",2016-08-08 13:42:33,2018-07-10 19:39:29,1,2,6
Issue#2545 Emulate Queue/Deque impls in GWT.,"type=enhancement, package=collect, cla: yes",,cpovirk,"korzha: GWT 2.8 has ArrayDeque implementation  cpovirk: Nice, didn't realize that GWT had added this. And thanks. I didn't realize that we'd fully duplicated TreeTraverser, either.  ",2016-08-10 14:31:22,2016-08-24 19:35:53,1,11,5
Issue#2546 Provide emulation for classes that use BitSet.,cla: yes,,cpovirk,"korzha: GWT 2.8 added BitSet emulation.  cpovirk: FYI, I will probably leave these as @GwtIncompatible, since they're used only from other @GwtIncompatible code. (We might as well spare the GWT compiler the trouble of compiling and discarding them, and we might as well give ourselves the option of adding non-GWT-compatible code to them in the future.) I'll update the comment, though.  cpovirk: Thanks. Looking at this now.  spirylics: Since, this error appears now :
[INFO]    Tracing compile failure path for type 'com.google.common.collect.BinaryTreeTraverser'
[INFO]       [ERROR] Errors in 'jar:file:/Users/cyril/.m2/repository/com/google/guava/guava-gwt/20.0-SNAPSHOT/guava-gwt-20.0-SNAPSHOT.jar!/com/google/common/collect/BinaryTreeTraverser.java'
[INFO]          [ERROR] Line 134: No source code is available for type java.util.BitSet; did you forget to inherit a required module?
[INFO]    [ERROR] Aborting compile due to errors in some input files Somebody has an idea ?  korzha: @spirylics #2547  ",2016-08-11 11:30:56,2016-08-11 19:33:44,1,5,4
"Issue#2555 Fix Issue #2554, Helpers#isEmpty","type=defect, status=fixed, package=testing, cla: yes",,lowasser,"ghonzo: As detailed in issue #2554 there was a bug in com.google.common.collect.testing.Helpers#isEmpty when passed an Iterable that is not a Collection. Added a test that fails before the patch, succeeds after. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  lowasser: I think we're actually going to aim to kill off this class entirely and replace it with Truth rather than try to fix its brokenness.  ghonzo: Fair enough! Thanks for the direction.  lowasser: Bleahhhhh it looks like we might have to live with this class due to some dependency weirdnesses. Going to reopen this so we can fix this issue, at least.  googlebot: CLAs look good, thanks!  kluever: @lowasser do you mind handling this request? thanks  lowasser: I'm pretty sure I got this already, not sure if it's sync'd out yet though.  cpovirk: 6c63cf3  ",2016-08-23 19:01:40,2016-09-03 18:23:40,1,2,6
Issue#2556 Add ability to accept IllegalArgumentExceptions using NullPointerTester,cla: yes,,,"kartoffelsup: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  kartoffelsup: I signed it!  googlebot: CLAs look good, thanks!  lowasser: Have you seen #1949 ? We already have this but have not yet decided whether we want this in external Guava.  kartoffelsup: I haven't, sorry! Shame on me :(  ",2016-08-23 21:02:16,2016-08-23 21:34:38,1,2,3
Issue#2558 Adding checkPositive MathPreconditions before using value of x,cla: no,,,"dpsingh016: Adding checkPositive MathPreconditions before using value of x in ceilingPowerOfTwo and floorPowerOfTwo methods.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  dpsingh016: Updated email address  lowasser: Not sure why you feel this is necessary?  log2, which these methods call immediately, already does this check.  dpsingh016: Presently we are tightly coupled with log2 method to enforce the method contract ""@throws IllegalArgumentException if {@code x <= 0}"" I'm following fail fast concept at this place. If we know that for non positive values of x this method is going to fail we can fail it even before calling log2 method.  lowasser: There's no reason to check twice.  We have tests to make sure the exception gets thrown somewhere, and throwing the exception is part of log2's contract, which we can depend on.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-09-03 19:31:19,2017-01-09 20:04:52,1,1,4
Issue#2562 Fix MultiInputStream.read(byte[]): do not stop after first stream...,cla: yes,,,"jbgi: if there is still bytes to read. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jbgi: CLA signed.  googlebot: CLAs look good, thanks!  jbgi: After examination of the javadoc, the current behavioir is not a bug: An attempt is made to read as many as len bytes, but a smaller number may be read. It is just that the code that exposed bad behavior did not use com.google.common.io.ByteStreams#read or equivalent.  ",2016-09-11 10:31:34,2016-09-11 12:32:23,1,2,2
Issue#2564 Update CharSource.java,cla: yes,,,"davidsheldon: Typo fix - link -> line.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  davidsheldon: I signed it!  cpovirk: It looks like you're still not showing up in the CLA list. Is it under some email address other than dave-github@earth.li?  davidsheldon: Ah, it was, I've done another one now, it seems you can't change the email address on the CLAs. Hopefully it can support two for the same github account. It's a lot of work to fix a single character in the documentation....  googlebot: CLAs look good, thanks!  cpovirk: Yep, sorry :( It's at least a one-time cost, if that's any consolation. I'm submitting this internally now, and it will be mirrored out shortly.  ",2016-09-12 12:11:19,2016-09-13 19:13:13,1,1,3
Issue#2565 update source,cla: no,,,"LittleFatz: update source  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2016-09-12 12:13:18,2016-09-12 14:44:20,2,1,2
Issue#2567 Update Mockito version to 2.1.0-RC.1,cla: yes,,,"TimvdLippe: Last week we released our first release candidate of Mockito 2.
This release should be backwards compatible with the codebase
of Google Guava. To read about all changes in Mockito 2, check out
https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2 I have ran your test suite locally before and after this change and
did not discover any regressions nor test failures.
While this version is a release candidate, we are not planning
to introduce any changes for the final release. There might be
possible bug fixes included in the final release, but so far
we have not received any reports of regressions in our library. Thank you for using Mockito and please let us know what you think! 



              The text was updated successfully, but these errors were encountered:
              mockitoguy: Please consider pushing :) Thanks for supporting OS community!!!  TimvdLippe: Thanks a lot for merging @cpovirk . We are really happy that a 850k test code base can safely upgrade to multiple minor + 1 major version of Mockito. This gives us a lot of confidence publishing this long-awaited major upgrade.  mockitoguy: Thank you @cpovirk. It's very helpful! Thanks @TimvdLippe for driving this!  ",2016-09-17 11:01:46,2016-09-27 19:22:42,1,1,3
Issue#2580 Remove reference to a deprecated method,cla: yes,,,"Xaerxess: I found these comments slightly confusing. (I also wonder whether you removed sameThreadExecutor internally, since it's scheduled for removal in August 2016, but I guess it means in ""when Guava 20 is out"".)  cpovirk: Yeah, we've fallen behind on removing things. sameThreadExecutor is on our to-do list. We won't hold up Guava 20 over it, though, so it might hang on longer :( Anyway, thanks for the comment fix.  ",2016-09-28 21:44:04,2016-09-29 19:11:36,1,1,3
Issue#2581 Apply IntelliJ-suggested language feature migrations.,cla: yes,cpovirk,,"jbduncan: All code which initializes an IOException with a cause exception now uses the appropriate constructor (which was introduced in Java 6), rather than initCause. Since Guava now depends on Java 6, this (as far as I can tell) is a safe change to make. A change was made from using an Iterator to an enhanced for-loop for (arguably) improved readability and, by my understanding, no performance impact. All other changes should hopefully be self-explanatory. :)  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jbduncan: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Exhaustive, definitive, guaranteed-correct analysis of this change by me and one other guy shows that the code was better how it was. Or, you know, we just kind of prefer that way :-P We like the parallel next() calls. I'm submitting the change internally (minus the one part here), and we'll mirror it out shortly.  jbduncan: Haha, fair enough! Seems IntelliJ isn't quite as infallible as I thought. üòã And I also agree to some extent that consistent, parallel iterator calls are better than replacing one of them with a for loop, so I'm happy with this.  ",2016-09-29 02:14:08,2016-09-29 18:44:11,1,4,3
Issue#2582 Replace unnecessary StringBuilder calls with String concat,cla: yes,,,"jbduncan: According to IntelliJ, these usages of StringBuilder can be simplified. By my understanding, this is because they do not contain any loops, and thus, as of Java 6, JVMs are able to optimize these concatenations into more-efficient StringBuilder calls at compile time. Thus this change improves readability without losing performance.  lowasser: Heh.  I'm at least partially responsible for that change in upstream JDK, so it's appropriate we apply those simplifications to Guava now...  ",2016-09-29 02:43:30,2016-09-29 18:59:58,1,4,3
Issue#2583 Remove unused imports,cla: yes,,,"jbduncan: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2016-09-29 02:46:36,2016-09-29 18:59:58,1,2,2
Issue#2584 Remove redundant String.format call,cla: yes,,,"jbduncan: 
No description provided.
  ",2016-09-29 02:52:29,2016-09-29 18:44:11,1,1,2
Issue#2588 Update Mockito version to 2.1.0,cla: yes,,,Xaerxess: Mockito 2.1.0 is out! It should be a smooth upgrade from RC-1.  Xaerxess: See #2567 for context.  ,2016-10-04 14:31:23,2016-10-04 19:58:44,1,1,2
"Issue#2590 usage of American English spelling for ""license""",cla: yes,,,"manonthemat: for consistency 



              The text was updated successfully, but these errors were encountered:
              ",2016-10-04 22:12:37,2016-10-05 17:30:00,1,1,2
Issue#2592 micro sign,"package=base, type=api-docs, cla: no",,,"yecril71pl: The micro sign is a different character than Greek small letter mu.  The current rendering is in error.  Moreover, it does not print on an 8-bit console unless the code page is Greek, which is insane.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  simon04: See #2593 for a discussion on this change.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-10-06 20:42:30,2017-01-09 20:04:52,2,2,5
Issue#2594 Test case added to prove functionality,"package=concurrent, cla: yes",,cgdecker,"bhdrkn: Added a new tests case that proves  RateLimiter
works even for very small numbers. Issue: #2231  ",2016-10-06 21:06:04,2017-01-31 19:41:43,1,1,4
Issue#2595 Update StopwatchTest.java,cla: no,,,"yecril71pl: Use micro sign for microsecond unit. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  simon04: This PR seems to be a subset of #2592 and should be closed?  ",2016-10-06 21:13:50,2016-11-21 16:53:28,1,1,3
Issue#2604 Fix google/guava#2599,cla: yes,,,"vijaykcm: This change fixes a documentation error regarding the return type/value
of computeInPlace function.  ",2016-10-16 08:01:44,2016-10-17 16:38:15,1,1,2
Issue#2607 Update to GWT 2.8.0,cla: no,,,"freddyboucher: http://www.gwtproject.org/release-notes.html#Release_Notes_2_8_0  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  ",2016-10-24 22:43:50,2016-10-24 22:44:43,1,1,2
Issue#2608 Update to GWT 2.8.0,cla: yes,,,freddyboucher: http://www.gwtproject.org/release-notes.html#Release_Notes_2_8_0  ,2016-10-24 22:46:39,2016-10-25 19:08:51,1,1,2
Issue#2613 fixes serialization errors when serializing a RegularImmutableAsList,cla: no,,,"bjrke: the issue occur when ImmutableList is included in gwt's serialization
policy and ImmutableSet not and a list created by ImmutableSet.asList
needs to be serialized fixes #1841 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2016-10-26 16:28:45,2016-10-26 16:41:25,1,1,2
Issue#2614 fixes serialization errors when serializing a RegularImmutableAsList,cla: yes,,cpovirk,"bjrke: the issue occur when ImmutableList is included in gwt's serialization
policy and ImmutableSet not and a list created by ImmutableSet.asList
needs to be serialized fixes #1841  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  bjrke: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  bjrke: I signed it!  googlebot: CLAs look good, thanks!  ",2016-10-26 16:41:47,2016-10-31 18:40:50,1,1,3
Issue#2615 Fix #1190,cla: yes,,,"jbduncan: Commit text body: Before this fix, splitting a single character input string with a
Splitter.onPattern instance created with a zero-width regex pattern,
would have caused the input string to be dropped from the output,
resulting in an empty iterable being returned rather than a single
element one. This fix ensures that the input passes through untouched. For example, whereas before in this code snippet, 'words' would have
been initialized as an empty iterable... ...it is now initialized as [""f""].  ",2016-10-28 16:42:41,2016-10-31 18:40:50,1,2,2
Issue#2618 Fix some typos in guava/*,cla: yes,,,sebkur: I found some typos in Javadoc comments and fixed them  ,2016-11-01 00:03:37,2016-11-01 17:20:46,1,17,2
Issue#2620 Link local address,cla: yes,,,"rudenvla: link-local address validation with percent and scope id  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  rudenvla: I signed it  googlebot: CLAs look good, thanks!  nick-someone: Hi there! Thanks for sending us this PR! One thing I want to talk about here is that, while you've updated the validation function, InetAddresses.forString doesn't appear to preserve the scope part of the IPV6 address.  cpovirk: I am optimistically assuming that this got handled by 8a7d36a#diff-1207ec0a4b5d3f5e5c2236b7373eefc9, but please reopen if not.  ",2016-11-01 19:56:56,2020-01-13 21:26:11,2,2,4
Issue#2621 fix warning on eclipse4.6 (com.google.common.collect.MutableClassToInstanceMap),cla: yes,,,"hand515: Warning on eclipse , Bound mismatch: The generic method cast(Class<T>, B) of type MutableClassToInstanceMap<B> is not applicable for the arguments (capture#8-of ? extends Class<? extends B>, capture#12-of ? extends B). The inferred type capture#10-of ? extends B is not a valid substitute for the bounded parameter <T extends B> 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  hand515: I signed it!  googlebot: CLAs look good, thanks!  ",2016-11-02 03:35:05,2016-11-02 19:43:31,2,1,2
Issue#2624 Make SloppyTearDown.logger private.,cla: yes,,,"dlazerka: Being public, it always gets into way of our class (import is done automatically by auto-importing tools).
It's not used anywhere else, so can be private.
If it's intended to be used by inheritance, then it can be protected as well.
If it really neede to be public, then it's better be available through a getter method.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  dlazerka: I signed it!  googlebot: CLAs look good, thanks!  ",2016-11-03 23:45:38,2016-11-04 15:12:53,1,1,2
Issue#2625 Use a newer JDK 8 for travis build,cla: yes,,,"cushon: The travis docker image uses JDK 8u31, which is ancient and has type
inference bugs that are fixed at head. This change causes it to use 8u111: travis-ci/travis-ci#3259 (comment)  cushon: The JDK 8 build looks good now: https://travis-ci.org/google/guava/jobs/173130822 I update the PR to also turn off the JDK 7 builds.  ",2016-11-04 00:34:22,2016-11-04 14:05:19,1,1,2
Issue#2626 Added the lastIndexOf method for the Bytes primitives class for both parameters as byte array types.,cla: no,,,"luisalduucin: Added the lastIndexOf method which receives two byte array as parameters for the Bytes primitive class and its corresponding tests. It is a fix for the issue #2617 . 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  luisalduucin: I signed it!  ",2016-11-04 04:49:16,2016-11-04 05:02:11,3,2,2
"Issue#2627 Added lastIndexOf(byte[] array, byte[] target) method to Bytes primit‚Ä¶",cla: yes,"sim642, liach",,"luisalduucin: Added lastIndexOf(byte[] array, byte[] target) method to Bytes primitive class and its corresponding tests. It is a fix for the issue #2617 .  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  luisalduucin: I signed it!  googlebot: CLAs look good, thanks!  sim642: I feel like this PR has been quickly hacked together and is not production quality code.  sim642: Since the current master already contains this change it'd be nicer (and less conflicting) to rebase your changes there, instead of imitating changes in your own branch.  luisalduucin: Yes ! thanks !  sim642: The way this search is implemented here, it is highly inefficient because it searches through every single match from the beginning of the array and keeps the last one. Instead it'd be wiser to do the i indexing in reverse like Bytes.lastIndexOf(byte[], byte) does it. Such approach also avoids the need for helper variables which you've used here.  luisalduucin: Thanks for making me notice that. I will fix it.  sim642: This check is unnecessary because the following outer for loop would immediately terminate anyway, were this the case.  luisalduucin: Yep, once I coded it I noticed that.  sim642: Why has this chosen to return array.length - 1 and not array.length? The former essentially represents the 0-length subarray before the last element, not after it. The latter makes more semantical sense to me for that reason.  luisalduucin: I do not get your point. Could you explain it in another way ?  sim642: Now that you've modified your code to return 0 when finding an empty array in an empty array, this suddenly is the straightforward way for the same code to function for longer arrays, as opposed to making a special case for all arrays which aren't empty.  sim642: Bytes.indexOf(byte[], byte[]) finds an empty array in an empty array. For symmetry it would make sense for the same to happen when searching from the other direction, i.e. this should be 0 not -1.  luisalduucin: Sure, it makes sense ! Thanks !  liach: This change is not necessary.  liach: @luisalduucin You can add these to all the primitive classes.  luisalduucin: @liach Yes, sure I will, but before I would like that a Google member or guava contributor check if my approach is correct in order to proceed. Thanks.  liach: Or  sim642: Read through my previous comments on this matter. Keeping it makes the case where both arrays are empty correctly return that it is found (like with indexOf), not -1. Having a special case just to get that behavior would be excess.  liach: Yes you are right, array.length can be used for Arrays.copyOfRange  liach: Returns the starting position of the last occurrence  liach: Ok... been dead for around 15 months.  ",2016-11-04 05:28:53,2018-02-19 19:41:12,4,3,4
Issue#2628 Fix links to javadoc.io for Maven Javadoc Plugin,cla: yes,,,"arend-von-reinersdorff: Fixes #2479
Links must have a /package-list file 



              The text was updated successfully, but these errors were encountered:
              ",2016-11-04 10:04:59,2016-11-04 14:05:19,1,1,2
"Issue#2630 Fix some typos in guava-[gwt,testlib,tests]/*",cla: yes,,,"sebkur: I found some more Javadoc typos 



              The text was updated successfully, but these errors were encountered:
              ",2016-11-07 11:06:18,2016-11-08 15:45:56,1,7,2
Issue#2634 Improved the performance of indexOf methods of primitives,"type=performance, package=primitives, cla: yes, P4",,,"liach: Improved the performance of indexOf methods of primitives.
The original time efficiency was O(nm), where n is the size of the array
and m is the size of target. The new time efficiency is O(n).
The algorithm used is Sunday algorithm, a string matching algorithm that can be used on arrays.
All tests passed locally.  lowasser: Though it has a better worst case, it's not clear to me that this is actually likely to be a win in practice.  For example, Java's built-in String.indexOf has long stuck to an O(mn) algorithm just because its constant factors in practice tend to be so dramatically better.  How much does this change affect the constant factor of the ""good"" case, as opposed to the worst case?  liach: For now I do not really have good data to test these methods. Could you provide some big data if possible?  jbduncan: Hi @liach. From what I can tell, I'm not sure if you actually need big data to test the performance of your new implementations of the methods. In situations like this, people typically write micro-benchmarks with a framework like JMH to show how their solutions compare to existing ones speed-wise. So my personal suggestion would be to investigate JMH if you're not already familiar with it, and then write a micro-benchmark between the current impls and yours, show us the results, and provide us with the source code so we can help you improve the benchmark in case it doesn't follow best practices. (But I admit that I wouldn't be the best person to ask about best practices, as I hardly know how to even write benchmarks with JMH or other frameworks.) (I know that Google use Caliper instead as their framework for micro-benchmarking, but some people think it's a bit flawed and that JMH produces more accurate results, so I'd personally be inclined to use JMH for my own benchmarks. But that's a story for another time and for someone else to talk about, as I am not familiar with the details. üòÑ)  liach: Actually are benchmarks like these?  jbduncan: Yes, that's right. What you've shown is a link to one of Guava's Caliper benchmarks. However, I'd strongly recommend looking into OpenJDK JMH instead, because it's supposed to be much more reliable. By my understanding, one of the reasons for this is that for loops are easy for the Oracle Hotspot JVM (and presumably other JVMs) to optimise away in non-obvious situations, and Caliper encourages its users to use for loops to benchmark code many times (this is done differently in JMH, which uses annotations and special optimization-defeating trickery instead), so Caliper benchmarks are more likely to report incorrect timings and thus are less reliable. See https://groups.google.com/forum/#!msg/mechanical-sympathy/m4opvy4xq3U/7lY8x8SvHgwJ for more information.  liach: Do I do in a separate project? I am not really clear about this.  jbduncan: I think so? That's what the front page seems to say. But I'm really not the right person to ask, as I've never written a benchmark before.  ",2016-11-08 21:54:58,,2,9,5
Issue#2635 Use GWT's provided Arrays.copyOf and Arrays.copyOfRange where possible,cla: yes,,cpovirk,"korzha: 
No description provided.
  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: CLAs look good, thanks!  ",2016-11-10 13:51:09,2016-11-14 15:04:26,1,16,3
Issue#2636 specify executor,cla: no,,,"teaey: Some times, we need events to be executed by specified executor.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  teaey: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  ",2016-11-11 12:39:44,2016-11-11 12:44:57,1,3,2
Issue#2637 specify executor,"type=addition, package=eventbus, cla: yes",liach,cgdecker,"teaey: Some times, we need events to be executed by specified executor.  liach: This can be just a Map since you do not need Multimap functionalities.  teaey: @joschi
Keep the same semantics as the original method, eg:  teaey: @liach It's okay?  liach: Yeah, you can ignore my old comment.  teaey: @cpovirk @kluever @lowasser
Can anybody accept this PR?  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  googlebot: CLAs look good, thanks!  teaey: @liach üëç  Can you merge this PR nowÔºüthanks.  jbduncan: @teaey You'll have to wait for someone from the Guava team to have a look at this PR first, as neither @liach nor myself are on the Guava team nor employees of Google ourselves. Did you read the API section of the contribution guidelines? :)  teaey: @jbduncan I just read it. This guide means that only Google employees can merge the codeÔºü  jbduncan: @teaey That's correct. It also means that Google employees have very high standards for the APIs they accept into Guava and follow a rigorous internal review process, so this PR may be rejected initially and they'll ask you to rewrite the code, or they may decide that the API doesn't really add anything and outright reject it. But if either of those things do happen to you, try not to be discouraged, for it would actually be a very good thing as it would mean that Guava's API remains relatively easy to use and of high quality. :)  liach: google doesn't really like additions. In comparison, bug fixes get accepted more easily.  nick-someone: Realistically, we're unlikely to add functionality to EventBus at this point.  ",2016-11-11 12:50:51,2019-10-25 18:11:07,1,3,7
Issue#2642 Added (last)indexOf methods to ObjectArrays,"cla: yes, P4",,,"liach: 
No description provided.
  liach: Do I need to add @since tags in the Javadoc?  cgdecker: I don't think we want to add this to ObjectArrays because it's something you can do using Arrays.asList(objectArray).(last)indexOf(), and that's what we'd prefer you do.  liach: Thanks for handling this pr!  ",2016-11-13 19:31:49,2019-10-02 21:03:50,1,2,3
Issue#2649 make classpath scans over circular symlinks predictable.,cla: no,jbduncan,,"jct-amzn: fixes #2648 .  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jbduncan: Lines 185-192 don't look like they're exactly in Google Java Style to me. If you haven't done so already, I suggest running google-java-format on this file.  jbduncan: From my past experience, the Guava team prefer sentences be separated by one space only. I'd suggest running google-java-format on this file too, as that would (or at least should) fix the javadoc to meet their standards.  jbduncan: A blank line between the last paragraph and the first @param is required AFAIK. Use google-java-format to fix this.  jbduncan: Is this method decl. <= 80 characters long? If not then running google-java-format should fix it. :)  jct-amzn: Thanks for taking a look.  I used the intellij google-java-format plugin to reformat my edits.  jct-amzn: I signed it.  I should be covered by Amazon corporate CLA, though it's not appearing on my account for some reason.  jbduncan: @jct-amzn I think @googlebot hasn't recognised that you've signed the CLA? By my understanding, once you type the message I signed it! then googlebot should automatically detect it (it's a GitHub service/bot, not a human user üòÉ) and it should tell you what you need to do next to change the red ""cla: no"" label into a green ""cla: yes"" label.  jbduncan: These changes look good to me now, so I'm happy to hand things over to the Guava team now. :)  jct-amzn: Thanks for your review jbduncan.  I know googlebot's a bot -- I think the gears are turning on the corporate CLA. My google account doesn't show that I'm part of the correct corporate CLA, so I think there's some problem on the backend, in the way the dots are all connected (github email -> google group -> CLA signatory). Anyway it's just some one-time bookkeeping and I'm working on resolving it.  jct-amzn: I signed it!  jct-amzn: Ok, trying again.  Google CLA recognizes me now. I signed it!  jct-amzn: checking back on the status of this.  the CLA verifier probably doesn't support private email addresses in the github account. if the bot is using this app script to do the CLA check:
https://github.com/angular/google-cla-verifier-for-github/blob/master/cla-verifier.gs then you can see that they're just pulling the ""fake"" email from the patch file:
https://github.com/angular/google-cla-verifier-for-github/blob/master/cla-verifier.gs#L210 so I think there is no way the bot can trace that back to my actual email address, which should be in their signatories spreadsheet.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  willnorris: CLA verified offline.  This is okay to merge.  jct-amzn: thanks Will.  Can you update the 'cla' label so the request doesn't get auto-closed again? I'm going to work out a different arrangement at work so this isn't so complicated next time.  cpovirk: I've sent this to someone to review, so we'll take care of it before then next auto-closing. Sorry for the trouble.  cpovirk: The internal reviewer found one thing to tweak. You can have a look at 7c11b8d if you'd like. Thanks for the fix, and sorry for the CLA trouble.  jbduncan: Hi @cpovirk, as a external reviewer, I managed to find a couple of things in that commit which I think could be improved upon. I've shared my thoughts on those things in the comments below:  jct-amzn: Thanks @cpovirk .  I'll keep AndroidIncompatible in mind for future commits.  No worries about the CLA, I know I was making it a challenge.  ",2016-11-17 23:08:10,2017-02-22 16:59:06,4,2,5
Issue#2652 Now that the CanIgnoreReturnValue annotation is used throughout the code the dependency is no longer optional,cla: yes,,,"cheister: In version 20.0 the errorprone annotations are used throughout the codebase so the error_prone_annotations dependency is not optional anymore. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cheister: I signed It!  googlebot: CLAs look good, thanks!  cpovirk: It should still be ""optional"" in the Maven sense (meaning that it needs to be present when compiling Guava but not when compiling projects that use Guava. What problem are you seeing?  cheister: Ok.  I'm closing this PR so I can do more investigation.  When we updated to version 20.0 we started getting when compiling the project in IntelliJ.  The workaround is to explicitly add the error_prone_annotations dependency to our app but I'm not sure what part of our code is trying to use that annotation.  ",2016-11-19 00:14:12,2016-11-21 22:24:22,1,1,3
"Issue#2655 Fix for Optional(Present) equals/hashcode, when the reference is array.",cla: yes,,,"StefanDekanski: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: I think we want to be consistent with normal Object.equals and hashCode here. I recognize that that's inconvenient in cases with arrays, but arrays are inconvenient in a lot of ways (including direct calls to equals), so the best course of action is typically to wrap them in lists as soon as possible. In particular, the JDK's Optional behaves like Object.equals and hashCode, and we don't want to interfere with migrations to that type (or with migrations from nullable references to Optional).  StefanDekanski: Fair points. Sometimes I really want to use arrays, to save some space (avoid Autoboxing). I guess I'll create a wrapper class for my arrays.  ",2016-11-21 18:23:37,2016-11-21 18:30:21,1,2,3
"Issue#2663 In MapSplitter, ignore key-value separator after first","type=enhancement, cla: yes, P3",,,"jiafu1115: It is one important issue need to be fixed to support most cases which values may contain the separator. for one example:
I can make sure my key can't contain separator. but I can't make sure my value can't contain separator due to the value is generated by third-part service or special codec which can get separator. So I think we should fix this issue. It is common issue for most of case, Throwing IAE isn't reasonable or easier to let's happen low rating bug. Can someone help to take a look at this PR. Thanks.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jiafu1115: I signed it!  googlebot: CLAs look good, thanks!  jiafu1115: anyone can take a look?  liach: @jiafu1115 Should this regard different types of splitters? Or add some method like ignoreExtraSeparator()?  jiafu1115: @liach no. only change the inner behavior for MapSplitter. This is the simplest way to meet requirement.WDYTÔºüThanks  liach: There must be a reason why it throws an exception when detecting more than one separators. You should ping a project manager.  jiafu1115: @liach I had pinged the issue creator @cgdecker who is also the member for guava but no feedback util now. So I does not know who I should ping. so just waiting now.  liach: I think we need to ping the authors of Splitter. @lowasser  jiafu1115: @liach Thanks for your reminder. We may need to wait and wait and wait......  jiafu1115: @eamonnmcmanus Thanks for your change for title, it is more clear now.  jiafu1115: @raghsriniv  can you help to review it? thanks  ",2016-11-30 02:45:23,,1,2,4
Issue#2668 Code and test for #2667,"type=addition, package=collect, cla: yes, platform=java8",,lowasser,"tli2: I came across this issue while browsing and thought I could take a shot at it. The collectors are implemented as wrappers around existing ones and I have written tests following the format of existing collector tests. 



              The text was updated successfully, but these errors were encountered:
              tli2: I am stuck on a bug about Fauxverides for a while now (did not notice before I send the request). I have added the new methods to the FauxverideShims of the affected classes, and a manual test suggest that I have indeed deprecated the said methods, but I still cannot pass the tests. A debugging session suggests that the tests were able to find the fauxveridden methods but unable to recognize that the two are actually the same. E extends Enum<E> seems to be messing with the test's ability to compare. Specifically, the Type object under TypeParameterSignature seems to be an anonymous class when we do not extend Enum<E>, but would become ParametrizedTypeImpl when we do. A closer examination reveals that the actualTypeArguments field of ParametrizedTypeImpl is different, probably causing this problem. Here are screenshots from the debugger: 
  ",2016-12-03 19:57:39,2016-12-03 20:15:03,1,4,4
Issue#2669 Added method Utf8#truncateToBytes,"type=addition, package=base, cla: yes, P3",,,barucden: In reaction to issue #2619 I have created truncateToBytes method. It truncates given CharSequence so that it fits given number of bytes once UTF-8 encoded.  ,2016-12-05 15:44:36,2021-03-29 08:09:50,1,2,3
"Issue#2671 add ByteStreams.copy(InputStream,WritableByteChannel)","type=enhancement, cla: yes",,,"svobovo: From issue #2559.
Added method ByteStreams.copy(InputStream,WritableByteChannel) and simple test.  jeremyKisner: Can you help me understand a use case for this?  raghsriniv: #2559 was closed.  ",2016-12-05 17:22:51,2019-10-21 15:03:20,2,2,4
Issue#2673 Code and test for issue:Add methods for converting iterators to primi‚Ä¶,cla: no,"Stephan202, liach, fenik17",,"sambohrer: ‚Ä¶tive iterators #2666  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  fenik17: Why need collect iterator to list? May be better create stream from Iterable.spliterator() :  liach: Ideal code: Fixed  Stephan202: @liach, those last two lines can be replaced with:  orionll: There is soo much overhead in this implementation...  fenik17: And streams unavailable: guava support java 6+ ..  orionll: Next Guava will require Java 8  tli2: LGTM. Maybe instead of using n -> n use explicitly Boxed type's valueOf   azhang100: looks good.  Maybe you need some more
assertTrue(primIterator.hasNext());
in your test cases in case someone else comes by and breaks the code, you'd want the test case breaking in a slightly more expected way? Also a suggestion to add to your javadoc: `+  /**  liach: Uh, you should not use tabs.  liach: You should add a check: And add test cases for these.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-12-06 02:11:41,2017-01-09 20:04:52,1,3,9
Issue#2676 Add Sets.toImmutableEnumSet() #2667,"type=addition, package=collect, cla: yes, P3",liach,,"tli2: Code and test in Sets and Maps instead.  azhang100: Lacks @return javadocs?  liach: Extra line.  liach: You should add @param and @return javadoc tags like methods below.  liach: Same for javadoc.  steemer3505: Code Pull requests 0 Pulse
guava/ 80bbf86 Code and test for google#2667. Written in Sets and Maps instead of Immutabl‚Ä¶ ‚Ä¶eSet and ImmutableMap to work around fauxvsrride test: it was unable to handle generic types required for Enums currently. @tli2 tli2 committed about 1 month ago
4 changed files 102 additions and 0 deletions
guava-tests/test/com/google/common/collect/MapsTest.java
@@ -34,6 +34,8 @@
import com.google.common.collect.Maps.EntryTransformer;
import com.google.common.collect.Maps.ValueDifferenceImpl;
import com.google.common.collect.SetsTest.Derived;
+import com.google.common.collect.testing.AnEnum;
+import com.google.common.testing.CollectorTester;
import com.google.common.testing.EqualsTester;
import com.google.common.testing.NullPointerTester;
import com.google.common.testing.SerializableTester;
@@ -61,6 +63,9 @@
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentMap;
+import java.util.stream.Collector;
+import java.util.stream.Stream;
+
import junit.framework.TestCase; guava-tests/test/com/google/common/collect/SetsTest.java
@@ -31,6 +31,7 @@ guava/src/com/google/common/collect/Maps.java
@@ -70,7 +70,10 @@
import java.util.concurrent.ConcurrentMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
+import java.util.function.BinaryOperator;
import java.util.function.Consumer;
+import java.util.stream.Collector;
+import java.util.stream.Collectors;
import javax.annotation.Nullable; guava/src/com/google/common/collect/Sets.java
@@ -46,6 +46,8 @@
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.stream.Collector;
+import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.annotation.Nullable; 1 comment on commit 80bbf86
@azhang100
azhang100
commented about 1 month ago
commented on 80bbf86 Lacks @return javadocs?
Comment on 80bbf86  ",2016-12-06 18:36:55,,4,4,6
Issue#2677 Add a MIME type MPEG-DASH (mpd files),cla: yes,,,"joankaradimov: This format is becoming a thing. I couldn't find it in Guava's media types.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  joankaradimov: I signed it!  googlebot: CLAs look good, thanks!  ",2016-12-07 10:49:53,2019-10-02 16:48:51,1,1,2
Issue#2680 Test case for #1563,cla: yes,,,"pavlajak: Added test cases for bug regarding incosistency between Ints.tryParse
and Longs.tryParse to show there is no defect. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  pavlajak: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Thanks. I think we're satisfied with the tests that we have: I've gone back and closed the old bug. Thanks for checking into this.  ",2016-12-12 12:50:55,2016-12-28 17:45:25,1,2,3
Issue#2682 Random string generation API #2113,cla: no,"saikiran939, liach, fenik17",,"havlip18: Random string generator and unit tests  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  havlip18: I signed it!  jbduncan: Hi @havlip18, have you taken the time to read the contribution guidelines yet? üôÇ  ogregoire: General remarks:  dn-rockz: i signed it  liach: How about taking a CharSequence?  fenik17: @liach CharSequence is a interface,  liach: I mean to use that for the parameter.  fenik17: @liach Ok! Agree with this.
Also charAt() can be more effective than getChars() with short CharSequence.  dn-rockz: plz recheck ##line 148
public static String random(int len, char start, char end) {..}
or
public static String randomNumeric(int len, char start, char end) {....}  fenik17: How about filling Appendable? For exapmple: It may be useful for Writers and StringBuilders.  fenik17: i < len  fenik17: i < len  fenik17: miss code formatting (spaces)  fenik17: Why not int for 'gap'?  liach: They are just the same, in fact.  saikiran939: Do we need to mention any documentation about Unicode characters ? For example : start = '\u2202' and end = '\u2500' - in this case we don't have any numeric characters in this range.  liach: ""Start char <= end char!""  liach: You need to add some documentations.  cpovirk: Bulk closing all pull requests that are listed as needing CLA signing. If you'd like us to look at your pull request, you'll need to sign the CLA and report back here. If this is a false positive, I apologize. Please reopen the pull request, and we'll have a look.  ",2016-12-13 12:13:15,2017-01-09 20:04:52,2,2,9
Issue#2687 Add a custom gwt serializer for the Range object,"type=defect, package=collect, cla: yes",,cpovirk,"ddebree: Fixes issue #1597 



              The text was updated successfully, but these errors were encountered:
              cpovirk: This is tough because GWT doesn't recognize, for a Range<Foo>, that it needs to know how to serialize a Foo. The fix is to introduce a dummy field into Range of type C. Possibly we could get away with doing this only in the GWT version -- maybe introducing a superclass of Range for just that purpose. I am hesitant to invest a lot of time in the deprecated GWT-RPC at this point, but I can probably make an exception. I'll see what I can do, though possibly not until the new year.  cpovirk: (I think I have it working.)  ",2016-12-17 22:19:23,2016-12-20 16:36:00,1,1,4
Issue#2697 Remove unused imports.,cla: yes,,,"jbduncan: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              jbduncan: Thanks for looking into this PR so quickly @cpovirk!  ",2016-12-29 15:22:05,2016-12-29 17:22:52,1,7,2
Issue#2698 Remove more unused imports.,cla: yes,,,"jbduncan: 
No description provided.
  ",2016-12-29 17:37:29,2017-01-03 18:30:53,1,1,2
Issue#2699 Fix javadoc errors reported by IntelliJ IDEA.,cla: yes,,,"jbduncan: 
No description provided.
  ",2016-12-29 18:06:10,2017-01-03 18:30:53,1,17,2
Issue#2707 Implementation of #2113 (random string generation API),"type=addition, cla: yes, P3",HaasJona,,"ogregoire: This is a standard and clean implementation for a random string generation API. There are a few choice that guided my implementation: I feel like this implementation is much cleaner than #2682 which had a lot of design issues and doesn't help in any case the String generation, because all the parameters had to be kept by the user, where this implementation relieves him from that burden.  HaasJona: To me, it's not completely clear what ""look through aaab"" means.  HaasJona: What happens if the map already contains the characters String?  HaasJona: %s?  ",2017-01-10 01:55:18,,1,2,4
Issue#2715 Fix for Issue 2714: https://github.com/google/guava/issues/2714,cla: no,,,"ghost: ReverseConverter, ConverterComposition, & FunctionBasedConverter classes implement Serializable without transient/serialized member variables 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  lowasser: I'm not sure I follow what you're going for with this.  Transient variables aren't serialized; these fields appear to need to be serialized...?  ghost: I signed the CLA. lowasser - it's in response to this: http://cwe.mitre.org/data/definitions/594.html & squid:S1948 ""Fields in a Serializable class must themselves be either Serializable or transient even if the class is never explicitly serialized or deserialized. That's because under load, most J2EE application frameworks flush objects to disk, and an allegedly Serializable object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers.""  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  ghost: Contributor License Agreement (CLA),I signed it!  lowasser: That, too, seems working as intended to me.  The documented behavior is that the generated Converters are serializable if the original converter is serializable, which is accomplished with the status quo: if the underlying Converter is Serializable the serialization will work, otherwise you will get an exception when serialization is attempted. Marking these fields transient will cause a NullPointerException if the object is serialized and deserialized, even if the original object was serializable.  (If our tests pass with your change, that probably reflects a problem with the tests?)  lowasser: Or, rather, to be specific: the converter, if serialized and deserialized while the fields are transient, will throw an NPE on an attempt to use them for conversions.  ghost: Understood - if you're fine with this, let me close the pull request. Thanks so much for the speedy response.  ",2017-01-15 18:42:38,2017-01-15 19:00:37,1,1,2
Issue#2718 Update COPYING,cla: yes,,,"bepahol: updated copyright - filled in template 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  bepahol: I signed it!  googlebot: CLAs look good, thanks!  jbduncan: Hi @bepahol, I'm neither on the Guava team nor a lawyer, but I'm under the impression one isn't meant to replace the brackets within the Apache license itself with a copyright year - just those in source files which themselves have an abbreviated Apache license header.  bepahol: @jbduncan - ahhhh ok. Makes sense, thank you.  ",2017-01-19 06:56:42,2017-01-19 15:15:33,1,1,3
Issue#2728 Allow ignoring Constructors in NullPointerTester,cla: yes,,,kartoffelsup: Fixes: gh-2726  ,2017-01-28 12:39:36,2017-01-30 21:57:25,1,2,2
Issue#2731 make NullPointerTester.isNullable() use @CheckForNull too,cla: no,,,"bdworth: i.e., returns true if a parameter is annotated with @nullable
or @checkfornull. Both annotations mean ""this can be null"". fixes #2656  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  bdworth: CLA signed by Addepar, Inc.  jbduncan: Hi @bdworth, try replying ""I signed it!"" without the quotes. It doesn't seem @googlebot recognised the fact that you signed the CLA (it should only have took it a few seconds to run if it did AFAICR), so entering that phrase should get it to check your CLA status and respond back.  bdworth: I signed it!  jbduncan: How strange - @googlebot is still not responding... @cpovirk, I'm not sure if you're the right person to ask, but do you know what @bdworth should do next?  cpovirk: googlebot might not know what to do with the corporate CLA. Addepar isn't showing up in the list I'm looking at, but I suspect it's not 100% up to date. I'll check again tomorrow.  cpovirk: Hmm, still nothing :( Did you sign the corporate CLA or the individual?  bdworth: I didn't sign anything -- I just used that phrase since I was told googlebot wanted that. My CEO signed a corporate CLA on behalf of Addepar. I should be on the list of contributors in the CLA he signed. Not posting the email address for that group here since this page is public.  cpovirk: https://cla.developers.google.com/about says that it may be ""a few days"" before the signed CLA shows up in our list. I'll keep checking back.  cpovirk: Still nothing :( I'll check back next week, and if I don't see the CLA, I'll email the people who handle that.  bdworth: Thanks. This seems like an unnecessary amount of overhead for a simple four-line change (the rest are tests), but it'll be good to have in place.  bdworth: Any luck?  cpovirk: I emailed our CLA people this morning. I'll let you know what I find out. In the worst case, I can implement @CheckForNull support from scratch.  bdworth: ping?  cpovirk: After getting no response, I pinged the thread last week, and I still heard nothing. I just emailed a different group to see if that helps. Sorry that this has been an absurdly long wait.  cpovirk: I'm told that, when a company submits the CLA, Google sends that person a Docusign agreement that the company then needs to sign. (I'm not sure why there are two steps here.) I don't know if it got lost or what, but apparently the Docusign doc for Addepar just expired this morning, so your CEO will have to resubmit to restart the process and get a new Docusign doc. I presume that this is what the tiny footer here is trying to say: ""(Submitting this form does not complete the Contributor License Agreement between your company and Google. The CLA must still be signed by the Authorized Signer.)""  bdworth: New CLA resubmitted.  cpovirk: üéâ Addepar is in our list now. I'll run this through our internal tests.  cpovirk: Tests pass. Running it past someone else internally.  cpovirk: At last.  ",2017-02-02 01:29:56,2017-03-23 15:26:12,1,2,4
Issue#2734 Introduce ImmutableMap#mergeMapsCollector,"type=addition, package=collect, cla: no, platform=java8, P4",lowasser,lowasser,"numero-six: Introduce a Collector to ease merging of Maps with java stream API. Given (random Maps implementations used to ensure collector is generic): This code: can now be done with:  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  lowasser: Hi! As this is a new API, it's going to have to go through a process and some internal review before we even start thinking about the code.  (There's some explanation of this here.) As it stands, there's a few things we'd need to get together before we approved this feature:  numero-six: Hi, For this feature, I'd wonder why the maps were created separately in the first place? That is just for the example. Do people actually have an unbounded number of maps, or do they have a fixed number of maps that need to be combined? Of course, the actual purpose is for an unbounded number of maps. For a fixed number of maps, your code is better. My cases are usually like the Map is generated by a Stream#map call. Let's take a new example (imperative/no-stream-style first): With the stream API, should be: With the suggested new API: I think this kind of creating a Map by dynamically filling it with dynamically computed maps is frequent (hence, the ImmutableMap.Builder#putAll(Map)). I won't discuss the need for this API because I think Guava maintainers have a much better point of view/experience for that than mine. My experience is just that people will favor 1st code (imperative style) to 2nd code which is too verbose and quite cryptic for the non-stream-API-fluent-developer and I think the 3rd one is much more functional-style (ie: declarative about the expected result), but it's just based on nothing more than my day-to-day experience. Also, maybe mergeMaps is not the suitable term but I'm not a native english-speaker) and a mergeOperator could be passed.  cpovirk: Mass-closing PRs without an accepted CLA. You're welcome to reopen if you get the check to pass. Alternatively, feel free to open a plain issue to describe the change you'd like to see made.  ",2017-02-06 10:58:12,2020-10-05 16:09:54,1,2,5
Issue#2761 Making the BloomFilter thread-safe & lock-free,"type=addition, package=hash, cla: yes","lowasser, ben-manes",lowasser,"Valloric: Previously, the BloomFilter wasn't thread-safe and required external locking to ensure safety. Now, it's thread-safe and lock-free through the use of atomics and compare-and-swap. This PR introduces no API changes beyond an extra @ThreadSafe annotation on the BloomFilter class. It should also be entirely backwards (and forwards) compatible with the serialization format because that too isn't being changed. Please extend extra scrutiny to the LockFreeBitArray.putAll() method because it's not present in our internal fork of the BloomFilter class and has thus not gone through our integ tests or has seen prod (I wrote it for this PR). Fixes #2748.  ben-manes: To strengthen your argument, you should probably add a benchmark to show the performance impact for reads and writes in a single threaded case. See Guava's Caliper benchmarks. This approach is probably okay even though its leaks partial updates. That's mostly because there isn't clear() or resize() methods, requiring a new instance be created when overfilled. Otherwise a bloom-1 design would be required for correctness.  ben-manes: This creates garbage (lambda captures bitIndex). I prefer minimizing allocations in data structures.  Valloric: I'll benchmark a version with a separate non-lambda function.  Valloric: Doing some research it seems the JVM will inline small lambdas with simple capture state (and a long field is about as simple as it comes) starting with Java 8 which has better escape analysis for this very use-case. I can also confirm that in prod for us this code gets called several million times a second and we saw no increase in GC pauses or GC frequency. So I personally wouldn't worry about it. I did benchmark a version where instead of using getAndUpdate and passing a lambda, I inline the loop from getAndUpdate and using a raw compareAndSwap call. The results are the same. This of course doesn't confirm that garbage is/isn't being created though, just that the time perf stays the same. Given the above info, how strongly do you feel about the lambda vs inlined CAS call? The lambda approach is much more readable code, so I'd prefer to stick with it.  ben-manes: That's nifty! I try to avoid relying on escape analysis, but I have optimized to make it easier to be taken. This isn't critical to me, especially since the hashing creates garbage too. Its nice when ES works and simplifies code. But any of these recommendations are strictly my own. I have no influence on the Guava team or having this merged.  ben-manes: I'd pull 1L << bitIndex into a local field called mask for both usages.  Valloric: Makes sense, will do.  ben-manes: Arguably a LongAdder to avoid a hotspot.  Valloric: Not a bad idea! I'll try that, but I'll have to benchmark it first.  Valloric: Done.  Valloric: To strengthen your argument, you should probably add a benchmark to show the performance impact for reads and writes in a single threaded case. See Guava's Caliper benchmarks. I have JMH benchmarks (see this email for Caliper vs JMH) set up for our internal fork which is largely the same except the serialization parts have been ripped out, other hash strategies have been added etc. Perf using the standard murmur3 strategy should be identical. I can update that and post numbers. It's not ideal, but it's the best I have without going through the massive hassle of supporting JMH benchmarks for guava (I wouldn't trust Caliper).  Valloric: @ben-manes
OK, I'm doing benchmarks first for the suggestions you've made. Here's my benchmark code, for reference only. Benchmark results I currently have: As expected, LongAdder helps in the multi-threaded Put scenario. So I'll make that change. I'll run a similar benchmark for the lambda change.  Valloric: @ben-manes And here are the benchmarks for the original code, without any lock-free stuff. Note that the benchmark names for the original code still have ""lockfree"" in them but the code is not actually lock-free. As expected, the puts are slightly slower (about 20%) in the lock-free version. The read perf is the same because atomic reads are free on x86 (and x86-64). It's hard for me to imagine a realistic single-threaded use-case for a bloom filter; even then, since the read path is what almost always matters in a bloom filter and that sees no slowdown, I think a 20% hit on the single-threaded put path is acceptable.  Valloric: @lowasser Any thoughts on this PR so far?  lowasser: I think I would prefer this to be a Java 7 compatible implementation, so we don't need gratuitous diffs between the Java 7 branch and the Java 8 branch.  I guess that means the CAS loop, even if it has the same performance and just reads as more complicated.  Valloric: Excellent point I hadn't considered; removed the lambda by inlining getAndUpdate.  Valloric: @lowasser @ben-manes The latest code addresses all issues that have been brought up so far.  lowasser: I'd be kind of tempted to check if (oldValue == newValue) here instead of CASing a variable to itself and then doing the check after?  Valloric: Hm, we could do that, but note that it's a trade-off. It would optimize the uncontended path while making the contended path slower because of the extra branch (in theory; branch prediction yadda yadda). That does sound like a reasonable trade-off to me though, so I'll do that and run a benchmark.  Valloric: @lowasser @ben-manes OK, benchmarks with the extra IF branch. Note that I'm including another set of benchmarks for the same code pairs, but the second set is with a much smaller bloom filter: 10k puts on a BF with 50k expected insertions vs the original 10k puts on a BF with 150M expected insertions. I added this to look at cases with more thread contention. The results are the same with and without the extra IF. Should I add it then or not? I'm leaning ""no"" because it doesn't seem to be paying off. Personally I'm fine with either.  Valloric: Also, the extra IF seems to be introducing extra variance in the multi-threaded runs, probably because of branch prediction failures. It could also just be noise, but it's consistent across BF sizes.  ben-manes: Note that you are using a uniform distribution. The if check would be helpful if the entry had already been added to avoid unnecessary CASes. A Zipf distribution (example) might show beneficial results.  Valloric: @ben-manes That's convincing enough for me. Perf is flat on a uniform distribution and the difference in variance is likely to be noise, and even if it isn't, it probably doesn't matter. Added the IF.  ben-manes: isn't this supposed to be a break?  Valloric: Oops. :) Good catch!  Valloric: What I wanted was to continue from the outer loop, but somehow forgot I was in the inner one. We still perform the bitcount ops unnecessarily though. I could use a goto to avoid this, but I'd rather not.  Valloric: Added an earlyEscape boolean so we can avoid the bitcounts.  Valloric: @ben-manes @lowasser More data: I did another run of the benchmark with the same smaller BF config and the large variance from the previous run went away. So it's noise, making the IF a safe pick. It's either better with a zipfian distribution, or no worse.  Valloric: Note that with the new IF in the retry loop, we can now remove this IF check: We just always run the body now.  Valloric: @lowasser @ben-manes Code updated to address all issues raised so far.  ben-manes: Note that my approval carries no weight towards integration.  Valloric: Note that my approval carries no weight towards integration. I know, but it carries weight with me in that I'm more confident this is working well. :)  Valloric: @lowasser Friendly ping. :)  Valloric: @lowasser One more ping...  lowasser: LGTM, I'll try to get this merged internally.  Valloric: LGTM, I'll try to get this merged internally. Thank you! :)  Valloric: Resolved merge conflicts recently introduced through changes on master.  Valloric: @lowasser Any updates? It's been 2 weeks since this PR reached a stable state...  lowasser:  Valloric: @lowasser Can I help in any way? If I can make your life easier by changing this PR, I'd be happy to do so.  Valloric: @lowasser @artityod Any updates? This has been ready to merge for a month and a half now...  lowasser: It's in the review process internally; we've been working on the comments significantly.  Valloric: @lowasser Thanks for the update! Glad to see this hasn't fallen by the wayside. :)  cpovirk: #2806  ",2017-03-13 22:36:48,2017-05-04 14:10:07,1,4,6
Issue#2771 Merge pull request #1 from google/master,cla: yes,JarrodDeming,,"monkeychen: ÂêàÂπ∂ÂÆòÊñπÁâàÊú¨  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jbduncan: Hi @monkeychen, was this empty Pull Request intentional? Did you perhaps mean to pull google/guava:master into your own Guava fork? :)  googlebot: CLAs look good, thanks!  jbduncan: Guava team, what do you think about this PR? Close it?  jrtom: I'm going to go ahead and close it, yes.  If someone that's > 20% on the Guava team wants to re-open it, they can.  :)  ",2017-03-25 08:06:10,2018-08-27 15:35:44,3,0,5
Issue#2776 Promote HostAndPort out of Beta.,cla: yes,,,"swankjesse: It's all grown up. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Evidently we have a competing internal class that we've been intending to reconcile this with. Possibly we should just admit that we'll never get around to it :(  kashike: Changed your mind?  swankjesse: Stopped holding my breath!  mikehearn: This is kind of annoying. It's a useful utility class but I can't use it without hitting various warnings, IDE highlightings etc. If you'll never get around to it, why not apply this PR? The class is obviously stable and hasn't changed for many years. It confuses and dilutes the meaning of @Beta for it to be stuck in limbo like this.  AParise1217: @cpovirk  Has this competing internal class been reconciled with HostAndPort yet? It looks like this class has yet be change since this initial PR was opened.  ",2017-04-04 13:47:49,2018-10-06 01:56:11,1,1,6
Issue#2789 Add Throwables.propagateIf,"type=addition, package=base, cla: no",,,"rotilho: In a normal application is common to throw an exception after eval an expression like This PR aims to get rid of those boilerplate code with propagateIf 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  rotilho: I signed it!  lowasser: I'm not sure I follow what aspect of this new method is superior to the original.  The ""boilerplate code"" you're eliminating seems to be getting replaced with roughly the same number of characters in the method call.  The first version is utterly normal, predictable Java that you don't have to know about a special library method to interpret.  rotilho: I understand your point however Guava provides Preconditions which have similar idea. Look at the  throwIfInstanceOf: The same could be achieved with Both have similar amount of caracteres. The same applies for Preconditions so I assumed that amount of caracteres is not the main factor here and reduce the boilerplate code and unneeded complexity it was the main goal.  whitfin: Plus, you can eliminate characters:  ",2017-04-13 10:01:34,2017-10-03 12:13:53,1,2,5
Issue#2791 Update InternetDomainName docs to reflect the most recent public suffix list.,cla: yes,cpovirk,,"dave-r12: It turns out google is now a public suffix!  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  dave-r12: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Apparently foo is a public suffix nowadays, too. Want to fix that one, too?  dave-r12: Oh, right - good catch. Any strong preference on naming these things? Maybe foobar?  cpovirk: foobar is fine with me.  cpovirk: Sorry, I missed the further update here :( Someone ended up fixing this internally in October.  ",2017-04-15 16:56:04,2018-02-02 16:46:19,1,1,3
Issue#2798 Remove broken link in JavaDoc of CharMatcher,cla: yes,,kevinb9n,"EricEdens: The linked Google Spreadsheet is no longer available (at least externally). I think it's fine to remove since the link to unicode.org details which codepoints are defined as whitespace. Also, I double checked, and the list hasn't changed compared to what's used in CharMatchers. 



              The text was updated successfully, but these errors were encountered:
              kevinb9n:  EricEdens: Cool! That other link works from my side. I think the spreadsheet is a great reference (and I've seen it referenced around the net) so I think it's definitely worth keeping. I'll update the PR I'm the next few days to swap the link.  kevinb9n:  EricEdens: It's merged!  ",2017-04-23 19:14:50,2017-11-05 05:33:54,1,2,3
Issue#2799 Fix deadlock if compute function throw a RuntimeException,"status=fixed, package=cache, cla: yes",,lowasser,"imario42: If the computeIfAbsent methods fails with a runtime exception, successive calls to computeIfAbsent lock due to a call to oldValue.waitForValue which never will receive a value then. A test case to reproduce this behavior - the second computeIfAbsent will never return and your app is frozen.
The pull request restores the previous state of the cache on RuntimeException and the test will finish correctly. `public class TestGuava extends TestCase
{
private Cache<String, Boolean> cache = CacheBuilder.newBuilder()
.maximumSize(10000)
.expireAfterAccess(30, TimeUnit.SECONDS)
.build();
private Map<String, Boolean> cacheMap = cache.asMap(); }` 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  imario42: I signed it!  googlebot: CLAs look good, thanks!  ben-manes: This should rethrow Throwable in case of an Error.  imario42: @ben-manes : You mean instead of catching ""just"" the RuntimeException (which actually is rethrown) to catch a Throwable, right? Else, I don't know which ""Error"" you mean.  ben-manes: Yes, use Throwable. Otherwise a java.lang.Error or sneakily thrown checked exception will not be handled.  imario42: Well, thanks to Java 8 that one was easy to fix. Done!  imario42: I'd like to ask if there is something else I can do that this fix gets merged?  schlosna: I would also like to see this fix merged and released soon as I've seen a couple separate projects hit deadlocks on cache compute and the fix for #2743 did not fully handle the above mentioned failure cases. Thanks!  dawid-stosur: We also experienced this issue on PROD so also would like to see it merged and released ASAP as we use this cache extensively in our projects.  imario42: Maybe have a look at https://github.com/ben-manes/caffeine which does not suffer from this bug?  ben-manes: I think this was fixed in 8210828 (25.1)  netdpb: Closing this PR as it looks like the bug was fixed.  ",2017-04-25 12:02:05,2019-10-25 21:31:20,3,1,8
Issue#2802 DO NOT SUBMIT - testing travis,cla: yes,,,"ronshapiro: 
No description provided.
  cpovirk: I suspect that we want: Instead of: So that we restore the original directory for the later commands. Currently, I think that we're changing directory for install and then ending up in the wrong place for verify.  ronshapiro: Yup, that's exactly what we want. d'oh  ",2017-04-27 18:44:09,2017-04-27 18:52:31,1,1,3
Issue#2806 Issue #1259: Fix misleading documentation on behaviour of Ints.tryParse with null input,"cla: yes, P3",,,"deepaks4077: Referencing #1259. The documentation for Ints.trParse explicitly says that a NullPointerException is not thrown if the input is null. However, this is not true and the function does indeed throw a NPE. I have simply removed the misleading lines from the doc. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  deepaks4077: @googlebot I signed it!  googlebot: CLAs look good, thanks!  cgdecker: Thanks for the PR. I'm inclined to leave those lines because they do explain the difference between the methods and the equivalent non-""try"" method on Integer itself. It's true that the method doesn't throw if parsing fails, but parsing failing and the input being null are different things. I do see how it could be confusing, so I'm inclined to add explicit @throws NullPointerException to the Javadoc instead (even though that's not a thing we normally do). We've already done that in a similar cases, as pointed out in #1259.  ",2017-05-02 01:47:27,2019-10-02 20:54:45,1,1,3
Issue#2807 ImmediateEventBus that uses Dispatcher.IMMEDIATE,cla: no,,,"DavesMan: New child of EventBus that uses immediate Dispatcher, which isn't used in any impl as of now.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  DavesMan: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.  ",2017-05-03 08:22:38,2017-05-03 08:45:27,0,0,2
Issue#2808 ImmediateEventBus that uses Dispatcher.IMMEDIATE,"type=addition, package=eventbus, cla: yes, P4",,cgdecker,"DavesMan: New child of EventBus that uses immediate Dispatcher, which isn't used in any impl as of now.  DavesMan: I've just inspected the latest version of Guava and there is still no equivivalent of my ImmediateEventBus so immediate Dispatcher is still unused in master version of Guava.
I wonder why this hasn't been merged? I still have to use my fork. Noone else needs synchronous immediate bus?  ",2017-05-03 08:47:45,,2,3,4
Issue#2818 merge back,cla: no,,,"cenxui: 
No description provided.
  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2017-05-17 02:27:37,2017-05-17 02:28:24,2,0,2
Issue#2819 merge google guava,cla: no,,,"cenxui: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2017-05-17 02:41:39,2017-05-17 02:42:12,3,0,2
Issue#2825 Added some Unit Tests,cla: yes,,,"TheRealHaui: Added some Unit Tests that cover uncovered code until yet. 



              The text was updated successfully, but these errors were encountered:
              TheRealHaui: @cpovirk
Would you mind approving my contribution?  cpovirk: Merged, thanks. I ended up tweaking some things:  ",2017-05-23 20:06:26,2017-05-25 20:38:44,1,2,3
Issue#2844 DO NOT SUBMIT,cla: yes,,,ronshapiro: Test Travis with env matrix  cpovirk: 941932c  ,2017-06-13 15:00:22,2017-06-13 17:37:51,1,1,3
Issue#2846 Add an Automatic-Module-Name manifest entry,cla: yes,,,"eljobe: This is recommended for any java library which is being published to
repositories like MavenCentral or JCenter to ensure that when you do
eventually convert the library to a Java 9 module, it won't change
names requiring all of your consumers and the projects which depend
upon your consumers to update their moudle-info.java files to
pick up the new name. We can debate whether or not com.google.guava is the name you want
to adopt for your module. Other possible candidates are: This article covers
a lot of the reasons you might want to use com.google.guava, but I have also read reasonable arguments for more concise names if you aren't worried about module name conflicts. Related (a little bit) to #2571  Stephan202: @jodastephen, the author of that article, actually strongly suggests using com.google.common.  eljobe: @Stephan202 you are right. I am happy to change the module name in the pull request to com.google.common if the Guava project owns that entire package namespace. I was under the (quite possibly wrong) impression that other libraries provided by other teams at Google might also contribute to that package namespace, and as such, thought that we should coordinate with other libraries/modules that provided subpackages of com.google.common by naming this module com.google.common.guava. I agree that it would be better to use the root package of the whole package hierarchy. But, first I would like someone to be able to confidently confirm, ""No other jar files inside or outside Google contribute classes to the com.google.commons package. It is entirely dedicated to the guava project."" If that's the case, I'll update the pull request on getting that confirmation.  cpovirk: We do release other things under com.google.common, but in the discussion linked by @Stephan202, we're told that's not a problem for using that module name.  eljobe: It's true. As long as you're willing to claim that the package root com.google.common is owned by the guava team, it's a fine choice. I've updated the pull request to match.  jbduncan: @cpovirk Does the Guava project wholly own the com.google.common package and it's sub-packages, both externally on GitHub and internally within Google? @eljobe If the Guava project does not wholly own com.google.common and/or it's sub-packages, will this be a problem?  jbduncan: Hmm, after re-reading this conversation, I understand now that only the com.google.common package needs to be owned by the Guava team? On the assumption that my new understanding is correct, I'll rephrase my previous questions:  eljobe: I think I may be introducing more confusion than clarity here, but it's worth writing about in a bit more detail because we really only want to make this decision once. First of all, I think that Stephen makes a well-reasoned argument in his JPMS module naming post. The point about com.google.common not being wholly ""owned"" by the Guava team is why I originally proposed that we deviate from Stephen's suggestion and go with com.google.guava instead of com.google.common. The scenario we want to avoid is this one in the future. There is are 3 separate and mostly-independent teams inside Google each of which maintains a module which exports some packages in the com.google.common namespace. Let's call the teams (the people):
Guava Team
Blue Team
Red Team Guava Team publishes a module which exports packages (reduced for space): Blue Team publishes a module which exports packages: Red Team publishes a module which exports packages: Only one of those teams can call their module com.google.common. If the Guava Team takes that, then what will the Blue Team and Red Team use? I'm assuming here that we don't really want the package structure to reflect organizational structure. It should represent what the code in the packages actually does. So, we don't want to force rerooting packages like com.google.guava.common.base or com.google.blue.common.bird just to create artificial common prefixes we can use for the module names. There isn't really a great answer here. Personally, I think that google.guava would be a fine name. And google.blue and google.red may eventually make sense for the other modules once they are written. Modules (like the jars in which they are packaged) typically are the natural responsibility of a team of people. Package names are about the organizational logic of the code, but module names can (and maybe even should) reflect the group that is responsible for the module's maintenance. Suppose the Guava project grows in such a way that it makes sense to deliver a separate module for all of the ""collect"" and ""base"" packages separate from all the other packages currently bundled in the library. Which of the modules retains the name ""com.google.common""?  I think it would make more sense at that point to announce to the community that the ""google.guava"" module is jettisoning the ""collect"" and ""base"" packages into a new ""google.guava.core"" or maybe ""google.guava-core"" or maybe even ""google.lychee"" module. I actually think it might be better to separate the module names from the packages they contain because those concepts evolve through separate development lifecycles. But, ultimately, I care less about the name you choose, than that you choose it before the 23.0 release, so we can get it published with this new manifest attribute. The choice is your's.  jodastephen: Lets start by observing that Google (the company) owns everything under com.google. As such, it can choose to structure module names under there any way it wants, so long as there is a company-wide co-ordination to ensure that no package appears in two modules. This observation allows many choices for the module name however, and as such isn't that helpful. (The observation is however that ALL Google modules should start with com.google, so I'd object strongly to google.guava as your module name). The next observation is that the standard (Java-wide) rule for module names should be that the module name is the super-package name of the project. While this rule handles many cases, it does not of course handle the Guava case, as each package is a sibling. In my blog, I describe this case, and argue that the implied super-package in a case like this is the next level up. Thus, I arrive at my view of com.google.common being the right package name for Guava. Doing so does not stop other teams using com.google.common.bird or com.google.common.head as module names if they need to. Looking to the future, there is another way to view the whole problem space however. Each package in Guava is pretty isolated. There are dependencies between the packages, but they form a DAG as far as I can tell. As such, it would be perfectly possible for each package to be a separate module (where the module name is then obviously the package name). Now, today this would be a pain to do, because it would mean publishing a separate artifact to Maven Central for each package, something that nobody would really want. However, there is a fair chance that Oracle will consider having multi-module jar files in a future release of Java (ie. one jar file containing many modules). Were this to happen, having a module for each package is suddenly not such a bad idea, as users could then depend on the subset of Guava they care about, or the whole of it, and not suffer any clashes. In this scenario, the Guava module would then be an aggregating module that contains no bytecode of its own: This is similar to the JDK, where the java.se module aggregates others. But note that there is no java.se package. ie. Aggregating modules can and will have names that differ from the packages, because they necessarily are aggregations of disconnected packages for the purpose of convenience. Given this world view, com.google.guava is a viable module name, because the ""Guava"" project can be thought of as an aggregation of a set of unrelated packages Google chooses to publish publicly. One final note however, if com.google.guava were chosen, Google the company would be committing to never having a package name of com.google.guava, as to do so would be asking for trouble. So, either com.google.common or com.google.guava are reasonable choices derived through different thought processes. While I originally strongly recommended the former, the latter does now have appeal given the description above of internal teams also wanting to use the com.google.common module name. Ultimately, the Guava team must decide as to which of the two world-views of the project describes it best - a single project formed of a coherent set of packages (com.google.common). Or an aggregation of relatively separate packages that could standalone, unified under a brand name (com.google.guava).  eljobe: What is the process by which the guava team can get this decision made?  kluever: As @kevinb9n said here, Provisionally, the name com.google.common seems fine.  cpovirk: @jodastephen's recommendation was simply to declare which module name we choose. (And I think we're all happy with com.google.common.) He hadn't recommended specifically to us that we set Automatic-Module-Name, but his later blog post sounds to me like it recommends the practice in general. Stephen -- just to check explicitly -- do you recommend that we set Automatic-Module-Name? Is there any downside, given that we're happy with com.google.common?  jodastephen: Now that JDK 9 looks like passing the official processes with no further changes, it is safe (and recommended) to add Automatic-Module-Name to Guava. You'll keep declaring that until you write a proper module-info file, which won't be too hard to do once JDK 9 is finally released. (Maven has support for compiling module-info.java on JDK 9 and merging the .class file with the rest of the code so it all works on JDK 8).  cpovirk: Thanks. I'll get this submitted internally and then mirror it out.  ",2017-06-15 02:49:43,2017-07-06 15:58:14,2,1,7
Issue#2848 Support relaxed children() signature in TreeTraverser,cla: yes,,,"findepi: Previously, the TreeTraverser required that children() extended
Iterable<T>. This commit adds support for trees where children are
returned as Iterable<? extends T>. Use case: support for https://github.com/prestodb/presto/blob/master/presto-parser/src/main/java/com/facebook/presto/sql/tree/Node.java#L43 without need to copy children lists during traversal.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: CLAs look good, thanks!  lowasser: Why copy when you can use Iterables.unmodifiableIterable?  That'll let you safely treat an Iterable<? extends T> as an Iterable<T>.  jrtom: We're still working out the details, but we are working on integrating the capabilities of TreeTraverser into the new-ish package common.graph.  Specifically, I expect that we will probably be retiring TreeTraverser in favor of capabilities based on the new SuccessorsFunction and PredecessorsFunction types. And to come back to your original concern: those types do return Iterable<? extends N>.  findepi: @lowasser , good point, thanks, but it just doesn't look that good. @jrtom , this is even better since signature <T> preOrder(T x, Function<T, ? extends Iterable<? extends T>>) will compile nicely with method references. TreeTraversal.using(func) can't be made to work with method references in the ""relaxed"" case unless explicit type for method generic is provided. That said, is there going to be  preOrder() operating on SuccessorsFunction-s? I looked into sources, but couldn't find anything besides the interface declaration. Last but not least, does the probable retirement of TreeTraverser say anything in regards on this PR? :)  jrtom: Yes, there are going to be various traversal options including preorder.  Wouldn't be much of a replacement otherwise.  :) The details are still pending review but there should be something soon, probably in a few weeks. The fact that TreeTraverser is expected to be replaced suggests to me that we're unlikely to change it at this point, but that's not my call. Hope this helps.  ",2017-06-16 21:22:53,2017-08-19 20:14:48,1,2,4
Issue#2849 Fix typo in FluentIterable#stream javadoc,cla: yes,,,"findepi: 
No description provided.
  findepi: @cpovirk, thanks. Could you please also consider (or reject) #2848?  cpovirk: Sorry, I'm not too closely involved with the graph work, so I'll leave that to the people who are.  ",2017-06-16 21:58:21,2017-06-21 15:33:57,1,1,3
Issue#2856 Add EquivalenceRelation and corresponding tests,cla: yes,,,"ivan-osipov: It resolves #2851 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ivan-osipov: I signed it!  googlebot: CLAs look good, thanks!  raghsriniv: #2851 was closed.  ",2017-06-26 19:01:28,2019-10-21 15:10:51,1,2,3
Issue#2869 Refactored RateLimiter#create signature,cla: yes,cpovirk,,"maiph: Referencing: #2797  cpovirk: Can you also fix the other create(..., SleepingStopwatch) method below?  maiph: Sure, I missed that one üëç  ",2017-07-10 18:40:19,2017-07-12 16:04:30,2,2,3
Issue#2875 (refactor) some opportunities to use diamond operator,cla: yes,,,"desmorto: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              jbduncan: Hmm, I wonder if Android even supports the diamond operator...  JakeWharton:  desmorto: well, travis had a android test as well...  jbduncan: Yep, looks like it passes Travis (which indeed runs the Android tests), so I've no objections to this!  cpovirk: I think I found a couple cases that didn't compile with -source 7 -target 7 (which we use so that the Android version is usable under Java 7, too), thanks to difference in the compiler's type inference under those flags. But the rest of the changes are in. Thanks.  ",2017-07-20 00:00:41,2017-07-26 14:57:54,1,105,5
Issue#2881 Hotfix/cachebuilder constructor,cla: no,,,"igorKryvenko: Change CacheBuilder constructor modifier to private and rewrite corresponding tests. 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  ",2017-07-24 22:17:36,2017-07-24 22:27:34,3,4,2
Issue#2882 Hotfix/cachebuilder constructor,cla: no,,,"igorKryvenko: Change CacheBuilder constructor modifier to private and rewrite corresponding tests 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  ",2017-07-24 22:38:17,2017-07-24 22:41:40,7,4,2
Issue#2883 Cache Builder refactor,cla: yes,,,"igorKryvenko: Change CacheBuilder constructor modifier to private, and rewrite corresponding tests.  ",2017-07-25 07:44:02,2017-08-01 20:48:55,2,4,2
Issue#2889 Add generics with Maps. fromProperties().,"type=addition, package=collect, cla: no",lowasser,,"purplest: Add generics with Maps. fromProperties(). It can use like this: It's very useful when we use it to convert properties to a generics map. And in other way, we can implement with BiFunction<T, U, R> to expand this method.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  akhil-am: I signed it!  lowasser: Can you explain your use case in more detail?  Why you're using Properties in the first place, given that it seems pretty ancient and rarely used?  I'm also not sure this adds all that much value over e.g. properties.entrySet().stream().collect(toImmutableMap(...)).  ronshapiro: It also seems a bit odd to me to have full pojos encoded in a properties file.  nick-someone: Unfortunately, it looks like we're not going to be able to accept this change. It sounds like there are alternatives provided (either working with properties.entrySet() or the ImmutableMap<String, String> returned currently and interpreting the correct values).  ",2017-08-01 11:04:35,2019-10-02 13:57:24,3,1,7
Issue#2893 Fix typo in AbstractService log message.,cla: no,,,"hawjo06: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  ",2017-08-05 01:41:08,2017-08-05 01:56:41,1,1,3
Issue#2894 Fix typo in AbstractService log message.,cla: yes,,,"hawjo06: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  googlebot: CLAs look good, thanks!  ",2017-08-05 01:59:36,2017-08-08 18:33:55,1,1,2
Issue#2895 Fix typo in javadoc link,cla: yes,,kluever,"hawjo06: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              kluever: Thanks - will be mirrored out shortly!  ",2017-08-05 03:38:01,2017-08-08 15:10:48,1,1,3
Issue#2900 Handle exception in LocalCache.asMap().compute(...),cla: no,,lowasser,"mmimica: LocalCache.asMap().compute(...) deadlocks if its lambda throws an exception. Demonstrated by the test.
Fixed by properly handling the exception and realising the lock.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  mmimica: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  ",2017-08-09 19:04:50,2017-08-09 19:12:14,1,2,3
Issue#2901 LocalCache.asMap().compute(...) deadlocks if its lambda throws an exception,"package=cache, cla: yes",lowasser,lowasser,"mmimica: LocalCache.asMap().compute(...) deadlocks if its lambda throws an exception. Demonstrated by the test. Fixed by properly handling the exception and realising the lock.  ben-manes: Also see #2799.  mmimica: Oh I see, a duplicate. Well, I think my fix is better because it localizes changes in LoadingValueReference where the actual problem is. An exception is kind of function's legitimate result, which should be caught there and set as a result. Also there is a test. It could be written better. For some reason I cannot get @Test(expected = RuntimeException.class) to work.  ben-manes: Does this remove the loading value? I don't think it does from a glance.  mmimica: It doesn't. It assumes the rest of the code works as expected. I didn't manage to reproduce any problems. Even the test from the other PR passes.
But I'm not familiar with the inner workings of LocalCache.  ben-manes: From looking at the Map.compute implementation, I think it doesn't handle the exception being thrown. Instead the entry is stuck and a subsequent compute replaces it because of the lines previous to your change regarding the previous. It is then stuck with a LoadingValueReference, which works as expected because a getIfPresent will read from the oldValue. But likely a LoadingCache.get will be stuck thinking there is a computing entry and that the loader will do the cleanup (getAndRecordStats vs waitForLoadingValue). Ideally after a test case an internal integrity check would be run to find these conditions. Then any invisible or hard to query cases would be caught. I think CacheTesting.checkEmpty would do that here due to keySet likely having 1 entry. The checkValidState doesn't verify that all entries are fully loaded, so it wouldn't catch it.  ",2017-08-09 19:21:06,2018-05-23 17:40:04,2,2,5
Issue#2902 Static initializer references subclass,cla: yes,,,"Moriadry: Such references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load superclass and another thread tries to load subclass at the same time. My refactor will not change the method provided to outer space.  cpovirk: Is it possible for a thread to initialize, e.g., InactiveComparisonChain without first initializing ComparisonChain? If not, this may be benign. (See a previous discussion of class-initialization deadlocks.) And while eliminating benign cycles is still a good thing, I'm nervous about using ThreadLocal because it can produce leaks. There's probably a safe way to use ThreadLocal, but I'd prefer not to go down that road if we don't have to.  ben-manes: Assuming there is a cycle, wouldn't the initialization-on-demand holder idiom work? That would be preferable to ThreadLocal.  ",2017-08-10 15:29:26,2017-08-16 12:22:23,2,2,4
Issue#2903 Polishing,cla: yes,,,"jbduncan: This PR applies a good number of apparently applicable IntelliJ IDEA code inspections. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: GitHub ate my comment :( In short, I took most of this:  jbduncan: Hi @cpovirk, sorry for being quiet on this. I think a few things were missed, but I'm not sure which, so I'm rather satisfied with the commit you've pushed. Thanks!  ",2017-08-10 23:29:27,2017-08-11 18:10:08,1,43,3
Issue#2904 Fix javadoc link by including package name.,"package=io, cla: yes",cgdecker,cgdecker,"hawjo06: In the javadoc for guava 23.0, the links are currently shown as text, and not generated as hyperlinks.  With this change, the links will be generated as hyperlinks. 



              The text was updated successfully, but these errors were encountered:
              ",2017-08-11 14:03:18,2017-08-11 16:25:31,1,1,4
Issue#2906 FileBackedOutputStream constructor should take temp file dir #2205,"type=enhancement, package=io, cla: no, P3",,,"JoeHale: Simple change - added a few new constructors and passed the tmpDir in.
This will allow multiple threads to use this class and write to different places while preserving the existing functionality.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  JoeHale: I have read/signed the CLA. I am not sure why it wont let me put this pull request up  jbduncan: @JoeHale It may not be accepting your PR because the email address you use to log into GitHub is different from the email address you assigned to your local Git installation's user.email setting. Try double-checking the email address you set for user.email (following these instructions to set it or reset it if needed: https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup), and then try running git commit --amend to hopefully correct your commit with the right email address and then git push --force-with-lease to push the corrected commit.  netdpb: FileBackedOutputStream uses File.createTempFile(String, String), which should create a unique file every time. Can you help me to understand what problem this PR solves?  cpovirk: Mass-closing PRs without an accepted CLA. You're welcome to reopen if you get the check to pass. Alternatively, feel free to open a plain issue to describe the change you'd like to see made.  ",2017-08-11 20:31:27,2020-10-05 16:09:49,1,1,5
Issue#2907 Extended toMap,"type=addition, package=collect, cla: no",,,"asasas234: I have extended a toMap function in the FluentIterable, you can flexibly specify the key and value, you can also specify the key conflict strategy 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ronshapiro: We're generally trying to avoid modifying FluentIterable and instead encouraging people to use streams.  ",2017-08-12 03:36:25,2018-01-29 15:16:54,1,4,5
Issue#2908 Fix javadoc link.,"package=collect, type=api-docs, cla: yes",kluever,kluever,"hawjo06: The link was generated as plaintext. The change will result in the link
being rendered as a hyperlink. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: javac9 -Xdoclint rejects this version :( It sounds like what we have is supposed to work (or at least ImmutableTable.Builder#Builder, perhaps?), but javadoc8 doesn't understand it. Oddly, it looks like javadoc9 doesn't understand it, either.... Maybe I'm doing something wrong.  cpovirk: Hmm, no, I was doing something wrong, though I'm not 100% sure what it was :) I'll see if I can at least get it to work with javadoc9 now.  cpovirk: OK, the code that we currently have in Github works under javadoc9. We can't switch to the new code without breaking our internal builds (which use java9 with -Xdoclint) -- and, it appears, breaking javadoc9. The easiest solution here is probably to wait for our switch to using Java 9 for our open-source builds.  hawjo06: @cpovirk Thanks for looking into this, and the detailed responses.   I will close this PR.  ",2017-08-13 02:36:25,2017-08-14 15:05:05,1,1,4
Issue#2912 Add flatteningToMultimap for a stream of keys,"type=addition, package=collect, cla: yes, P3",lowasser,,"phoenix384: There already is the method Multimaps.flatteningToMultimap for a stream of values.
But one could also want to map an object against multiple keys coming from a stream.
So a collector method flatteningToMultimap(Function<? super T, ? extends Stream<? extends K>>, Function<? super T, ? extends V>, Supplier) would be useful. See Issue #2911 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  phoenix384: @googlebot I signed it!  googlebot: CLAs look good, thanks!  netdpb: See my comment on #2911 about whether this is necessary. But also, this method's erased parameter types are the same as the existing method, so I don't think compiles.  ",2017-08-15 10:46:52,,2,2,4
Issue#2916 Javadoc update when delegate throws exception,cla: yes,,,"kannanekanath: Clarify javadoc about the delegate being called utmost once. This is not true if the get method on the delegate throws RuntimeException.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  kannanekanath: @googlebot signed the CLA now!  kannanekanath: Can someone tell me why there is a tag of cla:no ? I have signed the CLA 8 days ago?  googlebot: CLAs look good, thanks!  jbduncan: @kannanekanath, it seems that @googlebot wasn't intelligent enough to realise beforehand that you requested it to check the CLA status for you. IIUC, it reacts best to phrases like ""I signed it!"", so for the future I'd suggest trying that. :)  ",2017-08-16 10:03:22,2017-08-28 17:47:06,2,1,3
Issue#2917 Remove a dangling closing bracket from Javadoc,cla: yes,,,"sebkur: There's a dangling closing curly bracket in the Javadoc example of
MoreObjects.toStringHelper(). Remove that in the main and the android
sources. See the incorrect rendering here  ",2017-08-17 10:32:08,2017-08-18 14:57:00,1,2,2
Issue#2919 fix some typos in java code,cla: no,piotrek1543,,"Moriadry: 
No description provided.
  piotrek1543: Looks good to me.  JakeWharton: You forgot to rebase and squash the branch to have only a single commit.  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that they're okay with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this State. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  Moriadry: sorry, I'm going to create a new pr on this.  ",2017-08-19 15:11:02,2017-08-30 06:38:37,21,10,10
Issue#2927 Fix some typos in java code,cla: yes,"freddyb2, sudosaket",,"Moriadry: 
No description provided.
  Moriadry: @piotrek1543 @JakeWharton
hey, Could help me review this pr and merge it , thank you! as #2919 said.  ",2017-08-30 07:10:34,2017-09-01 14:42:19,1,13,4
Issue#2938 Update IteratorBenchmark.java,cla: yes,"jbduncan, perceptron8",,"fvarg00: Refer to objects by their interfaces(Item 52)  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  fvarg00: I signed it!  googlebot: CLAs look good, thanks!  jbduncan: How about this LinkedList as well?  perceptron8: How about this ""use concrete classes to remove any possible polymorphic overhead?"" comment? ;)  jbduncan: Ah, I missed that. Silly me. :P  fvarg00: I shall refactor to remote all concrete classes. Thanks @perceptron8  jbduncan: @fvarg00 Uh, I think what the comment is saying is that concrete classes are purposely used instead of the List interface to ""remove any possible polymorphic overhead"" (not entirely sure what that means), so AFAICT this PR would probably not be accepted even if the LinkedList is refactored...  fvarg00: @jbduncan - thanks for your comment. It makes sense now.  ",2017-09-11 05:30:38,2017-09-12 03:13:48,1,1,4
Issue#2942 Moe sync,cla: yes,,,"ronshapiro: 
No description provided.
  ",2017-09-18 14:58:21,2017-09-18 21:08:13,3,57,3
Issue#2945 Fix #2914 by switching -android version suffix to -ga; revert vanilla‚Ä¶,cla: yes,,ronshapiro,"yborovikov: This patch changes -android version suffix to -ga for Android / Java 7 flavored version of Guava, resolving #2914. The resolution piggy-backs on documented Maven ComparableVersion feature that equates ga-suffixed versions (e.g. 24.0-ga) with non-suffixed ones (e.g. 24.0) in the context of comparing / ordering / determining the latest version. Note: This also reverts the patch by @cpovirk, restoring the original vanilla (Java 8+) Guava versioning scheme (e.g. from patched 24.0-jre back to 24.0). Note: README.md text should be updated before releasing the next version to reflect the suffix change for the Android version. 



              The text was updated successfully, but these errors were encountered:
              ooxi: I have read the issue linked. Nevertheless I think using -ga instead of -android will lead to a lot of confusion. Without having seen this pull request I would not have known the difference between 24.0 and 24.0-ga and would most likely have picked 24.0-ga when updating (since general availability seems better than no suffix).  yborovikov: @ooxi You'd have every right to get confused initially (even though such mistake would usually get immediately realized at your project compile time) - what Guava is trying to achieve with releasing both android/java7 and java8+ artifacts is indeed confusing. Arguably, they do have a reason for doing this, though. As to GA version being considered ""better"" than plain (non-suffixed) release one - I'm not sure it's clear cut (and might be highly subjective, depending on one's history of exposure to these). When I encounter such versions I try to check the project documentation on their versioning scheme and semantics. Wikipedia's Software release life cycle article has this diagram:

which probably (yet not necessarily) reflects some majority opinion / consensus on the topic. Anyway, in case of a doubt a quick glance at Guava project landing page should clear any confusion and make the choice between vanilla and android/java7-specific version reasonably obvious.  ooxi: Thank you for such an in-depth explanation of your reasoning. While I still would have been confused and would likely have chosen the wrong version at first, you are right in your estimation that it would have been more logical to use 24.0 than 24.0-ga. I therefore withdraw my initial rejection of this change.  cgdecker: I'm not clear on how -ga makes sense. ""General availability"" isn't a term we use in Guava releases and really doesn't have any particular relevance to ""Android flavor"". The scheme we've chosen is <version>-jre and <version>-android for the two flavors of Guava, and that's what we'll be going with barring significant evidence that we should be doing something different.  ",2017-09-19 20:26:58,2017-09-28 19:13:03,1,10,6
Issue#2946 Splitter Test Cleanup,"package=base, type=other, cla: yes",cpovirk,,"lesiak: Removed duplicate tests, unified naming  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  lesiak: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Turns out the history behind the redundant tests was interesting :) I've changed this PR slightly to make them do what they used to do years ago, and I've merged it. Thanks!  ",2017-09-20 10:24:52,2017-09-21 15:39:27,4,2,4
Issue#2947 Throwables#lazyStackTrace unsupported on IBM JDK 6,cla: yes,,,"fdesu: Fix addresses a problem occurred on IBM JDK 6. To ensure
that we can call underlying method, Throwables#getSizeMethod,
to get  stack size, first a smoke test  with dummy exception.
Once method executed with success, it is safe to return it for
further usage. Issue: #2887 



              The text was updated successfully, but these errors were encountered:
              fdesu: For the sake of clarification: there were two obvious ways: We can go with the first option, however, I think, that second seems more elegant.  cpovirk: The second sounds fine to me. I just submitted your change for internal review.  cpovirk: (Another reason to prefer your second option is that it makes sure lazyStackTraceIsLazy returns false in the case in which we aren't going to provide lazy access.)  fdesu: @cpovirk
Exactly. I think it just ensures that API works fine, instead of making only one method out of two work as designed.
However, I don't have any idea, how to simulate/test it with a unit test (most probably there's no way even to do that, since it more likely to be a system/end-to-end one)  ",2017-09-22 18:08:10,2017-09-25 17:21:44,1,1,3
Issue#2951 automatic specifier update,cla: no,,,"JainSid96: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that they're okay with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this State. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  jbduncan: @JainSid96 @cpovirk It's not really clear to me what purpose this PR serves, given that it contains many existing commits from master. Could you clarify its purpose for me?  jbduncan: @JainSid96, would you mind at all closing this PR? AFAICT, it is just tracking the new commits that are being added to Guava, and thus it's spamming my email inbox.  cgdecker: Given that I don't know what this PR is for, it has no description and the CLA is apparently not signed, I'm closing it for now.  ",2017-09-27 07:20:33,2017-09-29 17:46:54,113,892,31
Issue#2954 Fix Escaper.java comment typo,"type=api-docs, package=escape, cla: no",,cpovirk,"magict4: Fix misspelled method name from ""substing"" to ""substring"". 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  ",2017-09-28 23:34:50,2017-09-28 23:39:31,1,1,4
Issue#2955 Fix Escaper.java comment typo,"type=api-docs, package=escape, cla: yes",,kluever,"magict4: Fix misspelled method name from ""substing"" to ""substring"".  ",2017-09-28 23:46:16,2017-09-29 12:43:54,1,1,3
Issue#2961 Add JPMS module name,cla: yes,,,"jodastephen: Move to the correct pom.xml. Fixes #2920
Commit 9feba7c of #2846 placed the Automatic-Module-Name declaration in the wrongpom.xml. As such, Guava still isn't a valid module, which blocks a whole heap of projects from declaring module-info.java. Feel free to make a separate change rather than merging this PR to satisfy any IP rules.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  jbduncan: @jodastephen By my understanding, if you just sign the Google CLA, then that should be enough to allow this PR to be considered for merging.  jodastephen: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Thanks. Any opinion on whether we should set an Automatic-Module-Name for our guava-testlib test utilities? They're much, much less heavily used, but maybe we might as well? Or maybe it's not worth worrying about modules for code that runs only in tests, since it sounds like there might not be a good story yet for running most tests with modules on?  jodastephen: As it stands, I don't think its clear how test libraries will operate with modules - I suspect that modules don't really apply there. If runtime code might depend on testlib then of course it should have a module name.  cpovirk: Thanks.  ",2017-10-09 12:49:46,2017-10-09 15:47:54,1,2,4
Issue#2973 Fix minor spelling errors in tests.,cla: yes,,,"thekeenant: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2017-10-19 16:42:34,2017-10-19 18:19:13,1,7,2
"Issue#2977 Docs - README.md  - adding tweaks (ToC, separators, thumbnail logo)",cla: yes,,,"ghost: this PR does basically aim at adding the following to the README.md file: main motivation behind such does basically lie within:   



              The text was updated successfully, but these errors were encountered:
              ronshapiro: The README is quite short - I don't think we really need separators (and github does a good job of rendering separators already)  ",2017-10-24 15:40:12,2018-01-24 18:51:00,2,1,2
"Issue#2983 Remove @GwtCompatible annotations from classes in the hash package,",cla: yes,,cpovirk,"niloc132: which have no corresponding .gwt.xml file. Alternatively, if these are expected to be gwt-compatible, I can add the .gwt.xml and the missing emulation for LongAdder (which references other presently gwt-incompatible classes).  cpovirk: Thanks.  ",2017-10-31 22:44:44,2017-11-01 18:29:16,1,3,3
Issue#2989 Modifying Quantiles to return ordered HashMap,"status=fixed, package=math, cla: yes",cgdecker,cgdecker,"hshankar: Usually, when someone computes percentiles, they would end up iterating over the resulting map to print the percentiles or store them somewhere. It is useful to return the percentiles in the order in which they were requested.
e.g,
If one computes Quantiles.percentiles().indexes(50, 90, 99).compute(times) and iterates over the result, it should be iterated in the order 50, 90, 99. Currently, we use HashMap, so the order is unpredictable. Making it a LinkedHashMap will ensure results in the expected order with very minimal perf impact. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  kluever: /cc @PeteGillin  PeteGillin: This sounds reasonable to me in principle, but if we're going to do it then I think we should make documentation changes (an API that is specified as preserving ordering is much more useful than one that happens to preserve ordering by implementation but doesn't specify it) and I think we should therefore add tests for the behaviour.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  googlebot: CLAs look good, thanks!  hshankar: Makes sense. Updated the docs and added a test. One thing to note is, since the indexes are de-duped, if the same index is repeated, the order of the result will only contain the first instance. e.g, if indexes are 0, 1, 2, 1, 3, the results will be in order 0, 1, 2, 3. I think this should be ok though, since it doesn't change the existing behavior guarantees.  PeteGillin: This looks like a sensible approach to me. (I think @cgdecker is doing the actual review.) Aside: It's a shame we can't use ImmutableMap here, of course, but c.g.common.math can't depend on c.g.common.collect without creating a circular dependency :-(.  ronshapiro: @cgdecker Is this ready to submitted internally?  cpovirk: I don't see an internal review, though I could be missing it. A question to anyone still following along here: Would it make sense to instead sort the indexes? That wouldn't make a difference for (50, 90, 99), of course, but maybe users would want sorted order in most cases? (We could even return a NavigableMap, though we might not bother to change the declared return type at this point.) I suspect that a TreeMap may be a little slower to iterate than a LinkedHashMap, but the difference is likely noise. I'm not sure how the two compare in size.  cgdecker: By and large I've totally missed when things have been assigned to me on GitHub like this, so no, there wasn't any internal review. I'm not clear enough about the use cases/user's expectations to know whether sorting making sense, though to hazard a guess I'd say it probably makes sense. Of course, the user can always copy the result to a TreeMap if that's what they want; preserving the initial order is slightly harder, though still possible, by creating a LinkedHashMap manually and putting each key in the initial order and its value from the returned Map into that.  PeteGillin: If we do user-specified-order, as @hshankar originally suggested, and the user wanted sorted, then the user has another option: specify the indexes in sorted order. I just spot-checked about a dozen callers in our codebase, and most of them were hard-coding the indexes, so putting in order would be trivial (and the ones who weren't hard-coding them were generating them in order anyway). That seems like another argument for preferring user-specified-order, on top of the one that @cgdecker mentions (that converting to a TreeMap is easier than vice versa). In practice, all of the callers I spot-checked in our codebase were already specifying the indexes in order, so it wouldn't make any difference to them which we chose (and both would be more predictable than the current behaviour).  ",2017-11-09 22:38:10,2019-10-02 17:48:45,1,2,7
Issue#2990 Fix Types.toString for arrays,"type=defect, package=reflect, cla: yes",cpovirk,"cpovirk, fluentfuture","MaridProject: The current behaviour of TypeToken.of(<array type>).toString() mismatches with the Types.toString() javadoc: For array type {@code Foo[]}, {@code ""com.mypackage.Foo[]""} are returned For example, TypeToken.of(String[].class) returns [Ljava.lang.String;. Fortunately, a new java8 method getTypeName() has appeared whose behaviour is exactly the same as Types.toString() except that it can deal with arrays (including primitive ones).  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  MaridProject: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again.  MaridProject: Please, help me with obtaining cla:yes label. What's wrong with my account? The e-mails in the git commit and my GitHub account and the CLA account are the same.  jbduncan: @MaridProject Oh, really? When I look at the commit list directly (https://github.com/google/guava/pull/2990/commits), it shows the following...  Usually, in the place of ""Dmitry Ovchinnikov"", there would be your GitHub username, like in this example:  ...but because there isn't, it seems to suggest to me personally that the email address you used to create the commit isn't exactly the same as your GitHub email address. Have you tried entering git config user.email in Git Bash (or the terminal that you use with Git)? If it's set up correctly, it should show this: If the email part is different to what it shows above, you can try these GitHub instructions to set up your email address associated with your local Git. Then if you type git commit --amend, then by my superficial understanding, it should update your commit locally with the up-to-date email address, which you can then push again with git push --force-with-lease. Hope this helps!  MaridProject: @jbduncan , thank you very much. There was a typo in my e-mail address. Here is my configuration: And here is a snippet from the git log So, I skipped one letter ""n"" and so the emails don't match.
Thank you again.  googlebot: CLAs look good, thanks!  cpovirk: Thanks for noticing this. I believe the bug is in the docs, as I think our goal is to match the JDK's behavior. Primary TypeToken author @fluentfuture would know.  MaridProject: Curiously, the method Types.toString(Type) (with package-private modifier) has javadocs but TypeToken.toString() (with public modifier) doesn't. Nonetheless, I feel that the first sentence Returns human readable string representation of {@code type}. is what you wanted since the beginning (by intent). [Ljava.lang.String; could not be considered as a ""human readable string"", it's just a string representation.  cpovirk: I do believe that String[] is nicer in a vacuum, but I think that we're trying to exactly match the JDK's strings. We go to some effort to do that, even across JDK versions (e.g., here).  cpovirk: I do think I was too quick to dismiss the behavior change: I had been thinking that the problem was our implementations of Type.toString(), where we'd like to match the JDK, but of course you're talking about TypeToken.toString(), where we're freer to do what we want. (That said, it's possible that someone depends on the current behavior. We'd still be within our rights to change it, but we'd have to weigh the risks.) Sorry about that. And now I've been starting at this for 30 minutes, and I'm pretty confused. It looks like we mostly use JavaVersion.CURRENT.typeName(Type), but we sometimes use Types.toString(Type) instead. And those two look to be intended to mostly match. They're probably intended to be different in some cases, but I suspect we're not using them all in exactly the right places -- one consequence of which is that we might be using [Ljava.lang.String; and java.lang.String[] in the wrong places. As noted above, it's one thing for TypeToken to have its own toString format, but we'd like our Type implementations to match the JDK's. But I'm not sure whether we're accomplishing that, either. (Certainly our tests for toString() are sparse.) There's probably something better that could be done here, distinguishing between methods used in toString() and methods used in getTypeName() and then changing TypeToken to rely solely on getTypeName(). (But it's more complicated than that because we'd want identical behavior in the backport, where we can't rely on getTypeName().) I assume that it's possible to do this, but it's likely to be a larger change, requiring testing on various JDK versions to account for the quirks of each.  fluentfuture: Yeah. We went through quite some work to keep our Type#toString() consistent with JDK's native Type implementations. In a nutshell, Guava's toString() has been always delegating to the underlying Type's toString() or getName() without doing any stunt on our part. For non-Class Type, this has been pretty human readable because JDK's toString() has been pretty human readable (and we keep Guava's Type#toString() consistent with JDK's); for non-Array Class, this has also been pretty readable cause JDK's getName() has been pretty readable. Unfortunately array Class before Java 8 didn't offer a method that returned human readable string. We could have tried to build a human readable string but then it'd add yet another condition where we differ from the JDK's implementation. I share Chris's concern about backward compatibility regarding relying on Java 8's getTypeName(). If we must, perhaps adding a new TypeToken#getTypeName() method would be a more backward-compatible change although we need to make sure it carries its own weight compared to the user code simply calling typeToken.getType().getTypeName() in Java 8 code.  cpovirk: If there are cases in which our Type.toString() implementations differ from the JDK's, we'd ideally fix that. It's also possible that we could modify TypeToken.toString() specifically to behave more like Type.getTypeName(). Additionally, could make sure our Type.getTypeName() implementations match the JDK implementations. (Maybe they already do.) But these are larger questions than the documentation, which is at least no longer incorrect.  ",2017-11-11 16:28:01,2018-01-29 16:42:04,1,3,6
Issue#2993 Changed the ArrayIndexOutOfBoundsException to StringIndexOutOfBoundsException,"type=enhancement, package=base, status=triaged, cla: yes, P4",,,"muteness: In the repeat method of Strings class, if the length of the potential output string overflows, the exception to be thrown should be StringIndexOutOfBoundsException instead of ArrayIndexOutOfBoundsException.  kevinb9n: We will think about changing this; however I don't think this is the right exception type either. It's not a matter of an index that was greater than the size of an array OR a string.  cpovirk: We have precedent for throwing OutOfMemoryError in Files. But then we'd also commented that we wanted to use it in CharEscaper/UnicodeEscaper but that we couldn't because it's not available under GWT :\  muteness: I thought it'd be better to have a custom exception for this, but one of the constructors in the String class  (public String(char value[], int offset, int count)) throws StringIndexOutOfBoundsException when count is negative or offset > value.length - count.  cpovirk: I guess the closest precedent is StringBuilder, which also throws OutOfMemoryError (though again, not under GWT).  muteness: I just looked into the StringBuilder implementation. I think it throws OutOfMemoryError when it cannot allocate a capacity for the underlying array. But for the same purpose as the repeat method, it throws StringIndexOutOfBoundException. Take the following method as an example. If str.length() + count overflows, it doesn't throw OutOfMemoryError but instead throws StringIndexOutOfBoundException from getChars method.  cpovirk: str.length() + count shouldn't overflow in getChars, though, should it? I think that's what the ensureCapacityInternal call is there to prevent.  muteness: I think you're right. Thanks!  ",2017-11-13 22:36:14,,1,2,7
Issue#3002 Add builder for EventBus.,"status=triaged, package=eventbus, cla: yes, P4","nutshare, liach",cgdecker,"aschatten: (Fixes: #2375) Allows setting identifier, SubscriberExceptionHandler and other
parameters of EventBus independently.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  aschatten: I signed it!  googlebot: CLAs look good, thanks!  liach: @Nullable?  liach: I suggest declaring this class final, adding a private constructor, and adding a builder() static method in EventBus.class for users to access the builder. Should be similar to the builder for immutable lists.  nutshare: The word ""default"" is used many times in the class. WIll it be appropriate to extract it as a constant?  nutshare: Does the exception is really thrown here? On the spot, it looks like every call will create a new instance. And there is no test, that verifies the exception.  liach: Should be package protected since this constructor is accessed from another class. Currently, JVM will generate an extra method to allow this call.  lihongjie0209: I noticed that this pull request fail to pass a test: why change in  event bus break HashBiMapTest???  liach: @lihongjie0209 I guess the base branch has that failed test. If the pr is rebased onto current master, it should work just fine.  bluishoul: How this PR going on guys?  bndeepti: When is this PR planned to be merged ? We ran into the same issue and we wanted the builder for EventBus. @liach @aschatten @cgdecker  aschatten: @bndeepti as far as I can see from the conversation in #2375, @cgdecker planned to work on this. I took a stab at it, but I would like to receive his or any other stakeholder's feedback if this PR is going in the right direction.  AnnotationThomas: @aschatten maybe it is possible for you to make a PR for it. When reading the conversation from #2375 I don't think he is working on it or he is having trouble with it.  cpovirk: Realistically, we're unlikely to add functionality to EventBus at this point.  ",2017-12-05 09:03:50,2019-10-15 17:44:53,2,4,11
Issue#3004 Deprecate ConcurrentHashMultiset#createEntrySet(),cla: yes,,,"Xaerxess: Fixes #3003. 



              The text was updated successfully, but these errors were encountered:
              ",2017-12-05 16:08:16,2017-12-06 15:15:49,1,1,3
Issue#3005 Extend Uninterruptibles with methods allowing awaiting on Condition,cla: yes,ChristianSchwarz,,"cpiotr: Issue: #2870 Condition class exposes a number of methods to await on it.
Most of them throw exception when executing thread gets interrupted.
In scope of this change utility methods are introduced to serve as uninterruptible proxies.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  cpiotr: I signed it!  googlebot: CLAs look good, thanks!  ChristianSchwarz: @cpiotr I think this method can be removed, cause it adds no value.  cpiotr: @ChristianSchwarz Good point, removed.  ",2017-12-06 22:09:20,2017-12-09 11:39:24,2,2,3
Issue#3007 Remove unused org.checkerframework:checker-compat-qual dependencies,cla: yes,,,"stevegutz: org.checkerframework:checker-compat-qual appears to be unused under both the jre and android flavors of guava and guava-tests. The org.checkerframework:checker-compat-qual:2.0.0 jar contains .class files with either org.checkerframework or afu.plume in their packages. I see the following after making this change, so I believe it is safe, though I could of course be missing something: This addresses #3006.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  stevegutz: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: As noted in #3006, this is intentional.  ",2017-12-06 23:33:13,2017-12-07 03:39:54,1,4,3
Issue#3010 Extend Uninterruptibles with methods allowing awaiting on Condition,cla: yes,,cpovirk,"cpiotr: Issue: #2870 Condition class exposes a number of methods to await on it.
Most of them throw exception when executing thread gets interrupted.
In scope of this change utility methods are introduced to serve as uninterruptible proxies. 



              The text was updated successfully, but these errors were encountered:
              ",2017-12-09 11:45:43,2017-12-14 14:22:41,1,2,3
Issue#3018 POC: replace explicit null checks by automatic,cla: yes,liach,,"denis-zhdanov: This PR illustrates an approach where explicit null-checks are replaced by automatic checks. Consider a sample class - Iterators: Original source code Suggested source code Resulting bytecode looks like if it's compiled from the source below: Raw bytecode Implementation The checks are generated by the Traute javac plugin - it finds existing package-level ParametersAreNonnullByDefault annotation and adds checks for all method parameters not marked by Nullable annotation (Checker's NullableDecl is supported by default). Restrictions Traute is a javac plugin and corresponding API is available since java8. Do you guys use something like javac8 -source 1.7 -target 1.7 for generating javac7 bytecode? Proposal I'd be glad to create a PR/modify current PR which replaces all explicit null-checks if the team likes the approach.  liach: What's this for?  denis-zhdanov: @liach this adds Traute javac plugin to compiler's classpath  lowasser: I'm not sure we would want this?  Historically we have resisted ""silently generated"" code -- e.g. this is why we favor AutoValue over Lombok -- and strongly prefer code to be explicit and traceable.  denis-zhdanov: @lowasser, thanks for the feedback! My assumption was that preserving existing contracts (implied by ParametersAreNonnullByDefault) and making the code more clear by removing explicit checks might be good for the project. Regarding the traceability - exceptions thrown from the failed generated checks reference corresponding parameter line. Also exception message makes it clear what wrong has happened  ",2017-12-24 07:20:49,2018-01-24 17:37:05,6,14,5
"Issue#3023 base.Ascii: Add methods indexOfIgnoreCase, containsIgnoreCase, startsWithIgnoreCase and endsWithIgnoreCase","package=base, status=triaged, cla: yes, P3","Maaartinus, liach, kevinb9n",,"martinfrancois: Implements the changes proposed in issue #3011
I was not sure in which version this is going to be pulled in - so I left // TODO comments at the @since tags. Feel free to tell me which number to change it to üòÉ  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  martinfrancois: I signed it!  googlebot: CLAs look good, thanks!  liach: I fear this implementation may be too slow: If the length of sequence is n, the length of subSequence is m, then the time complexity is always O(n+m) or higher, because all the chars need to be converted into a string first; if we can change a letter to lower case one by one, then the execution time may be faster.  martinfrancois: Good point. I didn't initially think of this, but I'll definitely have a look into it.  martinfrancois: Just fixed that one by implementing the toLowerCase() call in the for-loop itself  liach: You can just put if (prefix.length() > seq.length() - offset) unless someone maliciously passed a negative number for offset parameter.  martinfrancois: I had it like that initially but in the case of seq as empty string and prefix as ""x"" it will result in a negative prefix, which lead me to this implementation. Should I check this in another way?  liach: then this is totally fine.  liach: You can change these to @since NEXT  martinfrancois: Thanks for letting me know! I will update them.  Maaartinus: What do you expect startsWithIgnoreCase(""aaa"", ""a"", 1) to return? I'd vote for true, but this is impossible to implement without a indexOfIgnoreCase(seq, prefix, offset).  liach: This one is  martinfrancois: Thanks for noticing! I fixed it in the latest commit.  Maaartinus: A negative offset should probably be forbidden.  Maaartinus: This is much less efficient than a direct check, e.g., for startsWithIgnoreCase(""aaaaaaaaaaaaaaaaa"", ""b"").  liach: If the last one is fixed, then it is fine here.  liach: This one is  liach: If the last one is fixed, then it is fine here.  liach: toCharArray() involves a linear time copy of array. It is slow, too.  martinfrancois: Thanks, I totally forgot about that. I fixed it now.  liach: Still should not toString  liach: This one is  martinfrancois: Sounded like a good idea at first but now I agree - you guys are 100% correct. Will fix that.  liach: Can you change it to a do-while with increment of i in the loop? that way the code look cleaner.  liach: You should just use getAlphaIndex to make things efficient  liach: You can copy the whole method, changing two char array arguments to char sequence arguments so that you can deal with strings and string builders directly without toCharArray calls that duplicate all the char contents.  liach: Charsequense instead  liach: String ->CharSequence  liach: Can you replace all toLowerCase calls to getAlphaIndex calls for efficiency?  martinfrancois: will do!  martinfrancois: It was quite some work but now I changed the implementation to use getAlphaIndex instead of toLowerCase. Please have a look again. If everything is fine, I'll squash the commits.  liach: Thanks for this great pull request!  martinfrancois: You're welcome üòÉ  thanks a lot, too, for the very thorough and good code reviews of you all, they were very constructive and helpful.
I now squashed the commits. Maybe one of you Googlers can run the benchmark (I hope I did it right)? I don't think there is any possibility to run them myself. Would be interesting to see the performance differences. Besides that, from my side it's good to merge.  martinfrancois: Hey there, just wanted to ask if there's any news concerning this pull request?  jbduncan: @martinfrancois I'm not on the Guava team myself, so I can't truly speak on their behalf, but as someone who's contributed to the project for a couple of years now, I think it's worth letting you know that they can be very slow addressing new issues and PRs, which I think happens because they're busy as a whole dealing with Google-internal priorities. So if they take forever to respond (which seems likely at this stage, sadly), it absolutely won't be because you did something wrong; they're just apparently very, very busy with their day-to-day jobs, and someone from the team will eventually respond to this PR. If you don't get a response as quickly as you'd like, writing a reminder message like the one you wrote here every now and then should encourage a more timely response, even if they're a bit too busy to review the PR properly. I hope this helps! :)  cpovirk: There are various reasons that we haven't done a good job about replying to issues. Busyness is part of it, but we should do better. It looks like our current triage process misses pull requests. I'll try to get that fixed.  martinfrancois: @jbduncan thanks for the very kind words and the tips üòÉ I appreciate that a lot, it's good to know that it's not an ununsual case. @cpovirk also thanks for taking it serious and trying to get pull requests integrated into your triage process üëç  martinfrancois: Thanks for accepting my pull request! I wanted to ask when the changes of it are going to get synced out? I haven't seen it on the master yet.  martinfrancois: Any news on this PR?  kevinb9n: I'm sorry that we are so slow on this. Fundamentally we appreciate the request, but we have a bit of work to do on our end that we haven't been able to prioritize yet. FYI, I do see a pretty significant amount of Google code writing stuff like if (s.toLowerCase().startsWith(...)) so I do think the case for adding these methods to Guava may be a pretty good one.  martinfrancois: @kevinb9n thanks for the update on this! It has now been almost half a year, are there any internal processes it still needs to go through or did the team just not get around to merging it into the codebase yet?
Thanks!  cgdecker: I want to quickly note here that when an issue or PR is marked ""triaged"" and assigned to someone, that doesn't necessarily mean it's accepted. Triaged just means that someone has looked at it and thinks it's well-formed and worth thinking about more, and assigned it to someone who they think should best be able to consider it. That said, Kevin has noted that this seems like something that there's a good chance we'll want to do. Another note: API additions do generally need to go through an API review process we have internally, which tends to involve writing up a doc exploring pros and cons of an API, basic statistics for how often existing code in our codebase would want to use the API(s), options for how to address the problem, etc., followed by scheduling it to be discussed with a group of reviewers. That's obviously a bit of work, so even when you've written the code, it can be hard to fit it in with everything else we're doing. That's not to say we can't do better--we can and should do better, and are working on improving our processes around bugs/PRs--but just to give some idea of why things might take so long sometimes.  martinfrancois: Thanks a lot @cgdecker! I tried to find a description of your process but was unable to. Your description made it very clear to me. Now I understand what goes into it and it explains the long process, but I do appreciate your attention to detail and sense of quality, it gives me an even greater confidence in the high standards of the guava code base.  martinfrancois: Hi everyone,
I don't want to sound impatient, but it's been almost a year now. Are there any news on this one?
Thanks,
Fran√ßois  maehly: Fran√ßois Martin has personally and elaborately explained to me this PR and it's history. Actually he was so kind to copy over the implementation into a project we are working on together. I vote for merging this PR.  martinfrancois: @kevinb9n or @cgdecker could I please get an update on the current status of your internal review process concerning this PR?  ",2018-01-03 21:05:50,,1,3,10
Issue#3027 Restrict length of varargs array in immutable collection factory methods,"status=triaged, cla: yes",lowasser,lowasser,"panacekcz: This PR documents the restriction that immutable collection factory methods with varargs pose on the length of the last argument, and adds a check for this precondition to prevent NegativeArraySizeException from being thrown. Fixes #3026.  lowasser: I'd prefer just saying here that the total number of elements must fit in an int, here and everywhere else.  panacekcz: @lowasser, I have changed the messages.  panacekcz: Can I ask what is the status of this? Are you willing to merge this PR or do you want me to do some changes?  lowasser: Working on merging it, there's some shenanigans and I haven't gotten to it yet.  ",2018-01-08 10:27:40,2018-01-24 20:09:15,2,5,4
Issue#3032 Code Cleanup.,cla: yes,,,"shahabkondri: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Thanks. Took most of this.  ",2018-01-16 19:22:54,2018-01-16 20:23:38,7,12,3
Issue#3045 Change .orderedBy() builders generic type to <? super>,"type=enhancement, package=collect, status=triaged, cla: yes",cpovirk,,"tgyurci: Using .orderedBy(...) over new Builder<>(...) is much more compact. It compiles on both Java 7, 8 and 9.  It is source-compatible change, but I am not sure, whether it is fully binary-compatible or not.  googlebot: Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.  tgyurci: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: MinMaxPriorityQueue.Builder doesn't need this because its build() method lets you create a queue for subtype of the comparator's type: <T extends B> MinMaxPriorityQueue<T> create(). As for the immutable types: They're this way because, in 2008: Add the ""? super"" make you need a ""."" in this line: If the types are the same, that generic parameter isn't needed. Java's type inference has improved in the last 10 years, so perhaps we no longer need this. Can you add a test like the above (without <String>) to confirm that it works now?  tgyurci: I reverted the changes in MinMaxPriorityQueue but added some test for it's .orderedBy() too.  cpovirk: Sorry, the test I was asking about is a little different than the ones you added (but those ones are good to have, too, so thanks). I'll add the test locally.  cpovirk: The new tests break under GWT :( That might mean they break under various versions of Eclipse, too. We should try this again someday, but for now, we'll leave it the way it is.  ",2018-02-15 16:32:54,2018-02-23 16:13:05,1,14,4
Issue#3047 Add CodeTriage badge to google/guava,"status=will-not-fix, cla: yes",netdpb,,"codetriage-readme-bot: Adds a badge showing the number of people helping this repo on CodeTriage.  CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed Read more about the CodeTriage project. Your project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to CodeTriage? Roughly 9 months ago, cupello added this project to CodeTriage in order to start contributing. Since then, 156 people have subscribed to help this repo. Adding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project. You can see an example of a CodeTriage badge on these popular OSS READMEs: While I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics. If you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again. Thanks for making your project Open Source! Any feedback is greatly appreciated. 



              The text was updated successfully, but these errors were encountered:
              netdpb: CodeTriage seems like a really valuable resource, but especially for projects that have a high frequency of incoming bugs that are relatively easy to triage by people who are not part of the core team. Most of our issues are not bug reports or user questions, but rather design proposals or feature requests. And many of them may be reasonable requests but don't fit into what we want to maintain as part of Guava. We have started to triage our bugs more actively (sadly, we were not doing a great job for a while), but it's hard for us to see how adding people who are not deeply involved with our design process will help. I'll close this PR for now, but we'd be interested in hearing more from you about how we might be able to use this service.  schneems: I guess it's a question of how you want to acquire new regular contributors, and what exactly you want them to help you with once they're on board. I used this service to get commit on Rails and while I did a good amount of bug triaging, I also followed saw common themes and questions come up and common answers be delivered that I eventually felt comfortable to proactively suggest when an idea wasn't a good fit. Eventually a core member would come by, agree and close the issue. I wasn't always right, but over time I got better and better until one day they decided my judgement was in line enough with the core team that they gave me commit. You've already got a pretty healthy following at 164 subscribers. These are people who have indicated that they're interested in helping out in some capacity on this project even if issue triage isn't the best fit. I would be interested to hear from you, as a maintainer, what kinds of things you want help with?  jbduncan: @schneems Were you able to get a hold of one of the Guava maintainers privately or offline to discuss this further? I'm subscribed to Triage's Guava feed, so if there is a way that contributors such as myself could better contribute to Guava, I'd love to hear more. :)  kevinb9n: The difficulty here is that we don't actually need much help with implementation. What we need is more quality bug reports, and quality feature requests, that are highly persuasive. We need to understand not just what feature could be added, but how we can be sure that it is broadly useful, and why it leads to people writing better code than they have to today. There's no badge you can add for that.  kevinb9n: To be clear, I am grateful for this suggestion. And I do feel very sad that Guava is so hard to contribute usefully to from the outside. As things stand, though, I agree with @netdpb that this badge won't help matters.  jbduncan: @kevinb9n Ah okay. It is sad that that's the case, but it confirms what I knew deep down, so thank you anyway. :)  schneems: If you open an issue that says what you want and what the project needs then it will eventually get in the hands of all subscribers. Maybe there‚Äôs a better fit I could add for the product later, but that‚Äôs the only outreach method that would be usable today.  ",2018-02-18 19:12:34,2018-02-26 21:24:31,1,1,6
Issue#3050 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Correct a typo in ImmutableBiMapTest.
 2c5dd53  ",2018-02-28 20:05:21,2018-02-28 22:10:25,1,1,3
Issue#3056 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Traverser.java: add support for multiple start nodes.
 Update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashCode(). RELNOTES=common.graph.Traverser: add support for traversing from multiple start nodes. 9dce1c3  Fix List>.isSubtypeOf(List>).
 This used to return false because isSubtypeOf() does a wildcard capture of the Foo type parameter, turning it into Foo, and then List> isn't a subtype of List>. Wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context, wildcard should remain as is. I found this when trying to add isSubtypeOf() precondition check in getSubtype(), in response to #3048. RELNOTES=TypeToken.isSubtypeOf() bug fix. 9918890  Add isSubtypeOf() ""pre""-condition check before getSubtype() returns.
 We have to call it before return because before type variable substitution, isSubtypeOf() can't apply. See #3048 RELNOTES=Validate TypeToken.getSubtype(). f6d1461 



              The text was updated successfully, but these errors were encountered:
              ",2018-03-06 02:10:35,2018-03-06 04:59:10,3,14,3
Issue#3057 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Change all instances of encoded.subSequence() to use a simple start index offset, which reduces the Java memory footprint for TrieParser by at at least 130 MBs. This is because the original call to subSequence() would generate a new String on the heap for each call, where as just using an offset avoids the need to generate a new String all together.
 This memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.OutOfMemoryError: GC overhead limit exceeded, mostly in the TrieParser class. 100-test runs at original code:
Memory usage 100-test runs with my changes:
Memory usage At maximum: 187 MB saved
At average: 167 MB saved RELNOTES=Reduced heap memory usage when parsing domain names 521c770  ",2018-03-07 02:58:07,2018-03-07 17:59:20,1,2,3
Issue#3061 Add lcm method for big integers,cla: no,,,"srinivascodes: /*Returns least common multiple of two big integers using gcd method*/ 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  kevinb9n: Hi - we will discuss adding lcm methods and get back to you. (Personally I want to add them everywhere there is gcd, but we don't have overwhelming evidence that it's actually needed much, except for people all implementing their own Rational class.)  srinivascodes: I have signed the e-cla.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  ",2018-03-08 16:14:26,2018-03-08 16:40:48,2,1,3
Issue#3062 Add lcm method for big integers.,cla: no,,,"srinivascodes: /*Returns least common multiple of two big integers using gcd method*/  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for the commit author(s).  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  ",2018-03-08 16:42:05,2018-03-08 16:48:58,2,1,2
Issue#3063 Add LCM method for BigIntegers,"status=triaged, cla: yes, P3",,,"srinivascodes: /*Returns least common multiple of two BigIntegers using gcd method*/ 



              The text was updated successfully, but these errors were encountered:
              perceptron8: @srinivascodes I suspect this PR won't be merged anyway, so here's my two cents:  srinivascodes: @perceptron8 Thanks for your valuable advice. Changed my code's implementation.
By the way, why do you suspect that this PR won't be merged? Is it because, there is no requirement of lcm method or is it like the implementation is not good enough?  jbduncan: @srinivascodes I can't speak for @perceptron8, but I suspect that from reading this comment from one of the Guava team members, and also from what I personally know of the Guava team, that they will want to go through their rigorous internal API review process first, which would probably mean that you'd need to reimplement your efforts from scratch by the time they're ready to give feedback, if they haven't already gone and implemented it themselves inside Google. It's for that reason that they suggest in their contribution guidelines that people who want new APIs should raise an issue first and that code should come afterwards. :)  jbduncan: I hope that this sheds some light on things for you. ;)  perceptron8: @srinivascodes My intuition was based mostly on contribution guidelines that @jbduncan mentioned. BTW you may still like to include some tests.  cgdecker: I'm going to close this for now; there's already an issue (#3060) open requesting that this be added and until we decide that it's something we want to do, having a PR with code for it doesn't help much. Writing the code is generally the easy part.  ",2018-03-08 17:16:24,2019-10-02 20:25:08,2,1,6
Issue#3070 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add X-Download-Options header (IE8 header to control the ""Open"" button on the download dialog).
 RELNOTES=Defined an X-Download-Options header b3acfc6  ",2018-03-13 19:13:26,2018-03-13 20:43:19,1,2,2
Issue#3071 static method of print/println with formatting,cla: yes,,,"zenglian: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cgdecker: Sorry, this isn't something I see us wanting to add to Guava.  zenglian: This is really one of the most frequently used functions of Java. I think it will be good if you guys do something with it.  jbduncan: @liweys I can't speak for the Guava team, but I can think of two reasons why short-hand methods for System.out::println do not add enough value to meet Guava's ""utility times ubiquity"" bar: IDEs (or IntelliJ IDEA, at least) have code completion function(s) which allow System.out.println(...) to be typed easily. For example, if you type sout in IntelliJ IDEA and hit Enter, it will automatically expand to System.out.println(). Thus, providing short-hand functions would probably not save any time in writing and especially reading of code (the most important of the two), as most if not every Java programmer already understands System.out::println. We are in a time where a lot of Java applications are server-side and web applications, where loggers are a lot more useful that ""println"" statements (as messages written to loggers can be redirected to logs and then interrogated later for debugging purposes). I hope this sheds some light on things.  ",2018-03-14 08:07:53,2018-03-14 18:12:04,1,2,4
"Issue#3072 FileBackedOutputStream, override temporary file name","status=triaged, package=io, cla: yes, P3",,cgdecker,"davidphan: for issue #2473
This will allow to override the temporary file name 



              The text was updated successfully, but these errors were encountered:
              ",2018-03-14 19:44:10,,1,2,4
Issue#3073 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add @SInCE NEXT to new methods on Traverser.
 f4aa911 



              The text was updated successfully, but these errors were encountered:
              ",2018-03-14 20:49:15,2018-03-15 22:57:41,1,2,3
Issue#3074 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  In Ascii, define a constant for the character case bitmask, and use it in place of 0x20 and 0x5f throughout the class.
 c58f51b  ",2018-03-16 19:51:10,2018-03-16 20:22:37,1,2,4
Issue#3076 HashBiMap: unnecessary call to rehashIfNecessary,"package=collect, status=triaged, type=performance, cla: yes",,lowasser,"fxleyu: After to insert the new key-value, the map's size will not increase. So, the rehashIfNecessary(); is not necessary . 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  fxleyu: I signed it!  googlebot: CLAs look good, thanks!  TeemoJUN:  oldEntryForKey.prevInKeyInsertionOrder = null;oldEntryForKey.nextInKeyInsertionOrder = null; why prevInKeyInsertionOrder ,nextInKeyInsertionOrder set to null.but nextInKToVBucket,nextInVToKBucket not set to null  ",2018-03-20 16:44:17,2018-03-22 21:49:17,1,1,6
Issue#3077 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Make ByteSource.read() use sizeIfKnown(), if available, to help avoid extra byte array allocations/copies.
 Also don't use 32 as the initial ByteArrayOutputStream size in either version of ByteStreams.toByteArray(); just seems way too small. Use the default size for buffers instead, at a minimum. Also change ConcatenatedByteSource.sizeIfKnown() to return absent if its Iterable of sources is not a Collection; this is to prevent sizeIfKnown() trying to loop over an infinite Iterable, which previous caused an infinite loop. That is also fixed in this CL; ConcatenatedByteSource.size() and sizeIfKnown() now stop and return Long.MAX_VALUE if the result would exceed that rather than going negative and continuing. But looping over an infinite Iterable in sizeIfKnown() seems potentially slow even if it will eventually stop, and as such against the spirit of sizeIfKnown(), which should be fast. 27d33d4  Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.
 They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer, then copying from that buffer to a different buffer in the BAOS. Additionally, the way BAOS operates is not great: whenever it needs more space, it creates a new array twice as large as the previous, copies all bytes from the previous array to the new one, and discards the previous array. Instead, read directly from the source into a sequence of buffers. When a buffer fills up, don't discard it, but instead create a new, twice as large, buffer and start reading into it. 47530ce  Set serialVersionUID in TypeToken.java
 RELNOTES=Add a serialVersionUID to TypeToken dc8ef1a  jbduncan: I question the reasoning behind this change. What if, for example, a user passed in a Vavr collection, where AFAICT none of them implement java.util.Collection? ...Although, having said this, I think that all Vavr collections have an asJava() O(1) view method that returns an appropriate java.util.Collection, so maybe this isn't such a big problem?  cgdecker: Yeah, this does prevent you from getting a known size with some things that it would actually be fine to iterate over. I was actually considering just getting rid of this sizeIfKnown() implementation because iterating over an unknown number of component sources to get the size seems somewhat dubious for something that's supposed to get you the size if it's quickly available. Sure, this doesn't need to read all the streams, but still. I'm still not sure what I want to do about this... one thing I was considering was changing slice()'s sizeIfKnown() to have a special case for when it's a slice of a concatenated source, where rather than trying to get the whole sizeIfKnown() of the concatenated source, it just iterates over its component sources until it knows whether or not the concatenated source is big enough to encompass the full slice. But I decided I'd spent enough time on the issue and did this as a compromise.  jbduncan: Ah okay. I see now that this is more complicated than I thought at first, and I understand that you've put a lot of thought into things and that you came to this compromise after spending a lot of time already on it. I admit that I still don't see the link between SlicedByteSource.sizeIfAbsent()'s implementation and returning Optional.absent() here early if the sources are just a plain Iterable. Would you kindly go into more detail about that for me?  cgdecker: So, slice() allows the slice you specify to start at any offset and have any length, because you don't know the size of the underlying source without reading it, as a rule. So when you want to get the sizeIfKnown() of the SlicedByteSource, you can't just say it's the length of the slice. It's really either the length OR the number of bytes there are between the offset and the end of the underlying source, whichever is smaller. So, you need to know the sizeIfKnown() of the underlying source to get the sizeIfKnown() of the slice. And with this change, calling read() always at least asks for the sizeIfKnown(), on the assumption that it either won't get it and will read like normal or that it will get it quickly and maybe perform a little better. So what happened (a test caught this) was: Now, changing ConcatenatedByteSource.sizeIfKnown() to stop looping once it hits Long.MAX_VALUE fixes it looping forever, but if the individual sources are, say, 4 bytes each, you're still calling sizeIfKnown() on them something like 2.3 quintillion times before you get there. Admittedly A) infinite iterables are a perverse case here, and B) this is an extreme example, but you get the picture. Basically, if sizeIfKnown() isn't relatively fast, it's probably better not to use it. But of course, a Collection could have millions of elements, and a non-Collection could have 1. So it's hard to say how the line should be drawn. But then again, it probably doesn't matter too terribly much: ByteSource.concat() doesn't have a huge number of usages, and I'd be willing to bet that for the vast majority of them, the Iterable is both a Collection and has 4 or fewer elements.  ",2018-03-20 20:38:29,2018-03-20 22:30:06,3,13,4
Issue#3079 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Automated rollback of e50ce7e
 *** Reason for rollback *** Causing OutOfMemoryError in some tests. *** Original change description *** Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods. They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer, then copying from that buffer to a different buffer in the BAOS. Additionally, the way BAOS operates is not great: whenever it needs more space, it creates a new array twice as large as the previous, copies all bytes from the previous array to the new one, and discards the previous array. Instead, read directly from the source into a sequence of buffers. When a buffer fills up, don't discard it, but instead create a new, twice as large, buffer and start reading into it. 8e34106 



              The text was updated successfully, but these errors were encountered:
              ",2018-03-21 19:06:55,2018-03-22 15:40:31,1,4,3
Issue#3080 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  HashBiMap: unnecessary call to rehashIfNecessary
 Closes #3076 532ab83  Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.
 They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer, then copying from that buffer to a different buffer in the BAOS. Additionally, the way BAOS operates is not great: whenever it needs more space, it creates a new array twice as large as the previous, copies all bytes from the previous array to the new one, and discards the previous array. Instead, read directly from the source into a sequence of buffers. When a buffer fills up, don't discard it, but instead create a new, twice as large, buffer and start reading into it. (Roll-forward of previously rolled back e50ce7e now that the tests failing because they were mocking InputStream are fixed.) e1b6d11  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  ",2018-03-22 20:25:18,2018-03-22 21:49:17,2,5,4
Issue#3083 Adds Overloaded Methods to CacheBuilder,"type=addition, status=triaged, package=cache, cla: yes","ben-manes, kluever, lowasser",lowasser,"slyr91: Address #2999
I have overloaded the methods listed in the issue so that they accept Duration as a parameter. One function I couldn't quite implement without a bunch of additional code was if the value was negative the error message would return the value + the unit. I cut the unit variable out and replaced it with nanoseconds. The value is also converted to nano.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  slyr91: I signed it!  googlebot: CLAs look good, thanks!  slyr91: Also, this is my very first contribution to real world code. Constructive feedback is always welcome and if you hate it there will be no hard feelings.
As I was signing that CLA it looks like the Travis app failed but I don't understand why. I only modified the one file and it was all contained to those 3 methods and the imports. Nothing complicated.  slyr91: This Travis failure appears to be related to travis-ci/travis-ci#9379
A possible fix is to ignore the java8 install temporarily until they resolve the issue.  kluever: Unless we're going to plumb the Duration instance all the way through the cache internals (which would require a serious re-write), then I think we should just call expireAfterWrite(duration.toNanos(), TimeUnit.NANOSECONDS) here. Ditto for the other overloads.  slyr91: Your right, I didn't see that at first. That makes way more sense. I will make the modification soon.  kluever: I'm about to submit a change to add these overloads, as well as updates for all of the tests (so this pull request can probably be closed).
Thanks for the push in the right direction!  ben-manes: I noticed that we don't check for overflow after ns conversion. I'm planning on fixing that sometime soon in Caffeine, just in case. You might want to bundle that into your CL.  kluever: I'm not quite sure I follow. I was planning on just letting duration.toNanos() blow up if passed > ~292 years (and document as such)  ben-manes: sorry, I meant for the TimeUnit one being delegated to. I thought one could write expireAfterWrite(Long.MAX_VALUE, TimeUnit.DAYS) without it blowing up due to the negative check preceding the conversion. But it looks like the conversion doesn't overflow and saturates instead.  kluever: Yep, the saturation behavior of TimeUnit.toFoo() is extremely surprising...I'm shocked it hasn't caused more bugs actually :-)  ",2018-03-24 04:59:12,2018-04-04 18:46:02,1,1,6
Issue#3085 Commenting testcase that does not compile,cla: no,,,"nituoath: 
No description provided.
  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  ",2018-03-26 17:29:28,2018-03-26 17:39:45,1,1,2
Issue#3087 Moe Sync,"status=triaged, status=in-progress, cla: yes",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Supersource nullToEmpty and emptyToNull in Strings.java to native JS.
 This allows us to improve performance in docs/xplat code that uses those methods. RELNOTES=GWT: Supersource Strings.nullToEmpty() and Strings.emptyToNull() 1850b42  Open source refactorings directory.  This is knowingly very simple, without yet documentation or many refactorings; it's a prototype first.
 694060c  Ignore FinalizableReferenceQueueClassLoaderUnloadingTest in JDK 9.
 ae891f2  jbduncan: Although it's just a start, I'm glad that stuff related to Refaster is being open sourced now! üéâ  jbduncan: Sorry, I meant to say ""Even though it's just the start...""!  ",2018-03-27 21:14:57,2018-03-28 19:03:29,3,11,5
Issue#3089 Add missing test case for Comparators.emptiesLast(),"package=collect, status=triaged, cla: yes, P1",kevinb9n,,"ineuwirth: There were two new utility methods added in a1a83d4 however only one of them is covered by unit tests. 



              The text was updated successfully, but these errors were encountered:
              ",2018-03-27 21:58:32,2018-05-23 17:40:05,1,1,3
Issue#3090 Fix broken badge in Readme,"status=fixed, type=documentation, cla: yes, P2",cpovirk,,"hrldcpr: maven-badges.herokuapp.com is frequently (and currently) broken.  cpovirk: Thanks. The new badge just showed up as broken for me, but it worked after a refresh. Hopefully it will prove more reliable over time.  hrldcpr: ü§¶‚Äç‚ôÇÔ∏è  haha yeah I noticed that too. Seems fine now‚Ä¶ I think it should be at least as reliable as before, since maven-badges.herokuapp.com also depends on shields.io  ",2018-03-28 02:43:32,2018-04-04 13:27:24,1,1,5
Issue#3095 Dev,cla: no,,,"krdev: 
No description provided.
  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  ",2018-03-28 22:13:17,2018-03-28 22:13:35,9,3083,5
Issue#3097 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix https://github.com//issues/3081.
 a446dd1 



              The text was updated successfully, but these errors were encountered:
              ",2018-03-29 21:07:31,2018-04-03 16:08:41,1,2,3
Issue#3099 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add java.time.Duration overloads to CacheBuilder:
  cacheBuilder.expireAfterAccess(Duration)
  cacheBuilder.expireAfterWrite(Duration)
  cacheBuilder.refreshAfterWrite(Duration)
 Fixes #2999 RELNOTES=Add java.time.Duration overloads to CacheBuilder. ffa5051  remove maven-badges.herokuapp.com from readme
 Fixes #3090 de5a62a 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ronshapiro: CLA was verified in #3090  ",2018-04-03 18:31:24,2018-04-04 13:27:25,2,4,4
Issue#3103 Moe Sync,cla: no,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Slightly discourage the use of the  overloads on CacheBuilder.
 babed10  Fix tests that failed if we couldn't recursively delete securely by using Jimfs and just getting rid of the whole file system each time.
 Fixes #3100 1974d26  Fix typo in Future javadoc.
 7416b72  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  ",2018-04-05 22:36:57,2018-04-09 19:30:53,3,3,5
Issue#3107 Fix toString of NonSerializableMemoizingSupplier,cla: yes,,cpovirk,"alicederyn: Delegate is set to null once the value has been computed, but is still referenced by the toString method. When it's null, use the value instead.  alicederyn: First solution I thought of  ",2018-04-09 13:47:50,2018-04-18 19:56:51,1,1,3
Issue#3109 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove pre-mature optimization of storing a total bit size for ConcatenatedHashFunction.
 d7874ed  Update Public Suffix data.
 This copy is updated whenever Chrome's copy is updated, which is
typically every 6 weeks. Star the following to watch Chrome's updates: https://bugs.chromium.org/p/chromium/issues/detail?id=610495 3c3aede  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2018-04-11 19:49:10,2018-04-12 00:50:23,2,4,4
Issue#3111 Add Queues.reversedDeque(Deque),"type=addition, package=collect, status=triaged, cla: yes, P3","Maaartinus, jbduncan, liach, cpovirk",,"ogregoire: Fixes #3110  ChristianCiach: Why does the method return an Iterable instead of a Deque?  ogregoire: It's an oversight from my initial request. I'll fix it, thanks!  liach: If you access this field, you should declare the deque field package private to prevent generation of a synthetic accessor.  Maaartinus: Or use delegate(), which is already accessible as it's protected.  jbduncan: Or, even better I imagine, call delegate() instead? :)  jbduncan: @Maaartinus got there before me. üòú  ogregoire: Thanks for the feedback everyone! I changed to use delegate(), indeed.  ",2018-04-12 22:32:04,,3,1,8
Issue#3117 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix toString of NonSerializableMemoizingSupplier
 Fixes #3107 9185822  Use Splitter instead of String.split, in InternetDomainName.
 e56f1aa  Use Splitter for IPv6, too. This eliminates usage of java.util.regex from this file (which is used via String.split, otherwise).
 65a2a7d  Use Diamond.
 27eb336  Automated rollback of a12ef6b.
 It looks like the original change can cause an infinite loop in LocalCache.LoadingValueReference.get(). c2266a6  Don't enable use of Unsafe.getLong() on aarch64 devices.
 Android devices may report to run aarch64 while running in 32-bit mode, and then
crash when loading 64-bit values at unaligned addresses. 263bbcf  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ronshapiro: CLA verified in #3107  ",2018-04-18 19:26:11,2018-04-18 19:56:52,6,14,6
Issue#3121 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Adding a new (initially internal, pending API Review) static factory to Striped.
 This allows for custom Lock injection, which might be useful for cases not covered by the currently existing factories. With this, Striped with fair sync is possible. 69a5c28 



              The text was updated successfully, but these errors were encountered:
              ",2018-04-19 19:03:55,2018-04-20 18:55:21,1,4,2
Issue#3123 Remove references to @DoNotMock,cla: yes,,,"cushon: which is not longer part of open source Error Prone. 



              The text was updated successfully, but these errors were encountered:
              ooxi: Shouldn't at least the comment be kept?  ",2018-04-23 00:21:52,2018-04-23 18:45:53,1,4,3
Issue#3124 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Make SuppliersTest.testMemoizeExceptionThrown() actually memoize the suppliers before testing them.
 Fixes #3122 7622bb8  Use https for API docs
 938839f  ",2018-04-23 18:51:52,2018-04-24 13:53:45,2,3,3
Issue#3125 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Strip @DoNotMock annotations
 RELNOTES=N/A 88134a2 



              The text was updated successfully, but these errors were encountered:
              ",2018-04-24 17:20:42,2018-04-24 17:57:40,1,4,3
Issue#3127 Use @SafeVarargs annotation for Sets#cartesianProduct,cla: yes,,,"sagar-shah94: We already had @SafeVarargs annotation for Lists.cartesianProduct(List<? extends B>... lists. but Sets.cartesianProduct(Set<? extends B>... sets)  was missing this annotation so i have added that annotation in order to fix issue.
Fixes #2724  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  sagar-shah94: I signed it!  googlebot: CLAs look good, thanks!  cgdecker: Thanks, your change has been submitted internally and will be mirrored out soon.  sagar-shah94: @cgdecker Can you please suggest me an issue that i should work on next. since i am new to contributing to google guava, i don't know which issue would be the best to work on for beginners like me?  cgdecker: @sagar-shah94 Your changes in this PR are being synced out in #3130. Please reply there to confirm you're ok with that to make our CLA bot happy.  ",2018-04-24 17:41:30,2018-04-30 16:29:31,1,1,3
Issue#3129 collect: add Sets#newSingleElementSet,cla: yes,,,"kofemann: In many situations APIs force to use Set, where only a single element is
required. Such use cases can be covered by Sets#newHashSet(element).
However, if we know in advance that this is an immutable Set with a
single element a more efficient implementation can be used. Add a new Sets#newSingleElementSet method to create a lightweight Set
to store a single element.  lowasser: I'm not sure I follow.  What is wrong with ImmutableSet.of(element) or, if you need nullability, the JDK java.util.Collections.singleton(element)?  jbduncan: What does this bring to the table that ImmutableSet.of(element) and Collections.singleton(element) doesn't?  jbduncan: @lowasser got there before me. :)  kofemann: Crap! Some how I have missed it in JDK and was surprized that something like this does not exists in guava. Now I know why :). Sorry for the noise!  jbduncan: Oops, sorry @kofemann, @kevinb9n tells me that my response a couple of hours ago came across as brusque, so I wanted to apologise. So please, no worries about the noise. :)  kofemann: @jbduncan every thing is ok.  ",2018-04-26 17:07:42,2018-04-26 18:54:31,1,2,4
Issue#3130 Moe Sync,cla: no,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Use @SafeVarargs annotation for Sets.cartesianProduct().
 Fixes #3127
Fixes #2724 63a2f5a  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  sagar-shah94: I am ok with changes!  sagar-shah94: @ronshapiro Can you please tell me how i can make googlebot happy by informing that i am ok with changes in this PR?  cgdecker: Oh, I'd missed the message that the CLA bot won't change its status. So we're all set here, thanks!  ",2018-04-27 20:35:19,2018-04-30 18:56:37,1,2,4
Issue#3132 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix a few formatting nits
 RELNOTES=N/A 6251cc8 



              The text was updated successfully, but these errors were encountered:
              ",2018-05-03 19:25:17,2018-05-04 01:20:23,1,11,3
Issue#3134 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Bump jsr305 version.
 3104724  jbduncan: Oh! I admit that I'm surprised that we're still depending on JSR-305 annotations, given that the Checker Framework's annotations were introduced as a dependency at some point. Whereabouts in Guava are the JSR-305 annotations still being used?  ronshapiro: ParamatersAreNonNullByDefault. It doesn't seem like https://youtrack.jetbrains.com/issue/KT-21408 has gone anywhere, but that's the remaining holdout.  ",2018-05-04 16:33:24,2018-05-04 17:43:39,1,2,4
Issue#3138 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Replace http://errorprone.info with https://errorprone.info since that site
serves from https now
 9cccb7f  ",2018-05-07 19:11:04,2018-05-08 18:50:31,1,2,3
Issue#3139 Moe Sync,"status=triaged, cla: yes",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Support type annotations in NullPointerTester
 RELNOTES=N/A feefa80  Continue type annotation preparations in NullPointerTester
 9f40145  Add Token Binding HTTP header names to header libraries.
 5406f50  Use the type annotation version of @nullable in the Java 8 branch
 RELNOTES=Use the type annotation version of @nullable in the Java 8 branch daa53cc  ",2018-05-08 19:30:06,2018-05-09 15:17:26,4,336,5
Issue#3141 Fix #3140,"status=triaged, cla: yes",,cgdecker,"avakel: Javadoc indicated that returned unmodifiable Multimaps would return
modifiable collections for removeAll and replaceValues when the actual
implementation throws an UnsupportedOperationException for those
methods.  ",2018-05-09 14:50:37,2018-07-10 19:39:29,1,2,4
Issue#3142 Moe Sync,"status=triaged, cla: yes",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix a documentation error.
 FluentFuture.catchingAsync does not take a future as an argument. bf25a56 



              The text was updated successfully, but these errors were encountered:
              ",2018-05-09 20:22:31,2018-05-10 14:28:18,1,2,4
Issue#3144 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Update Public Suffix data.
 The copy is updated whenever Chrome's copy is updated, which is
typically every 6 weeks. Star the following to watch Chrome's updates: https://bugs.chromium.org/p/chromium/issues/detail?id=610495 16cb038  ",2018-05-11 18:45:22,2018-05-11 19:57:21,1,2,3
"Issue#3145 Put type annotations on types, not declarations","status=triaged, cla: yes",cgdecker,cgdecker,"mernst: To improve readability, the Java Language Specification recommends that type annotations are written ""immediately before the type to which they apply"" (https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.7.4).  This pull request makes Guava conform to that style guideline.  ",2018-05-12 17:55:01,2018-05-14 23:30:16,1,90,4
Issue#3146 Moe Sync,cla: no,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Move type annotations immediately before the type they apply
to
 Fixes #3145 RELNOTES=N/A 4270efb  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  cushon: The CLA for 4270efb was signed in #3145.  ",2018-05-14 22:18:35,2018-05-14 23:30:16,1,102,4
Issue#3148 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Introduce Strings.lenientFormat(), copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.
 RELNOTES=Introduce Strings.lenientFormat(), copied from Preconditions.format(). a728cdc  Branch eventbus, net, and escape for Java 7
 RELNOTES=N/A eeee4ba  Swap Preconditions and Verify over to Strings.lenientFormat.
 2299ad2  ",2018-05-15 19:30:11,2018-05-15 20:25:07,3,71,4
Issue#3149 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Continue migrating to type annotations for @nullable
 RELNOTES=N/A f642763  Remove usages of CaliperMain from java_benchmarks targets since the deps for java_benchmarks don't need to (and shouldn't) include CaliperMain anymore.
 Such benchmarks should be run via the java_benchmarks generated binary directly. GITHUB_BREAKING_CHANGES=n/a 84d45bc  ",2018-05-16 18:42:45,2018-05-16 22:50:00,2,13,4
Issue#3152 Put @NullableDecl last in lists of annotations,"status=triaged, cla: yes, P2",,,"mernst: Conceptially, @NullableDecl is a type annotation (one day, Guava may be changed to use a type annotation instead), so it makes sense to put it as close as possible to where it would appear as a type annotation.  That means putting it last in lists of declaration annotations, closest to the return type. This pull request makes that change.  cpovirk: @cushon  ",2018-05-21 04:35:42,2018-05-23 17:40:05,1,2,4
Issue#3154 Use api instead of compile for Android,cla: yes,,cpovirk,"jereksel: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  JakeWharton: The direct analogous is api. implementation is merely an optimization that should be opted into.  jereksel: I signed it!  googlebot: CLAs look good, thanks!  jbduncan: @JakeWharton I thought it was the other way round? Isn't implementation the same as compile, with api being the optimisation? :/  jbduncan: @JakeWharton Wait, I'm challenging myself now. I realise that I'm not 100% clear on the difference between api and implementation, so never mind. :)  JakeWharton:  jereksel: api it is then.  cpovirk: (Found https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation to back up Jake.)  cpovirk: Hmm, so should we change the JRE one to api, as well? It sounds like compile may be deprecated.  JakeWharton:  jbduncan: @cpovirk compile is indeed deprecated. :)  cpovirk: Huh. So is the idea that Android projects are more likely to use the java-library plugin? If anything, I might have naively guessed they were less likely :) Is it just that the default Android build setup suggests java-library or something?  JakeWharton:  cpovirk: Ah! Thanks.  jbduncan: Hmm. It sounds to me that implementation is the most sensible default, and api should be used only if the java-library plugin is imported and the given project wants to expose Guava types to its users. Is my understanding correct @JakeWharton?  JakeWharton:  jbduncan: @JakeWharton Cool! So you're suggesting api here because it's the most liberal option and most equivalent to the older compile, am I right?  cpovirk: (Even for people who don't expose Guava in their APIs, I'd be a little nervous about excluding transitive dependencies from the classpath, given problems with static analyzers and perhaps annotation processors discussed in #2824 and #2721. (There could also be problems if people use Guava annotations but don't consider that ""exposing an API,"" but that seems less likely.) I suppose that those problems are relatively unlikely to affect people, though.)  cpovirk: Anyway, I do like the idea of suggesting the thing that is more likely to work (even if it's slower in some cases -- and I suspect only marginally so, since Guava isn't going to be changing between one build and the next). It is a little sad that this exports Guava to downstream targets, but that seems like the lesser evil (and no worse than what people see today). One final thought: We could decide to give instructions for each of... ...where the Java 7 instructions look like the current Android instructions and the Android instructions look like your new ones. But I'm not sure that's worth the potential confusion.  jbduncan: @cpovirk I think it's worth at least changing the remaining compile instruction for ""guava-jre"" to api, so that the Gradle installation instructions are consistent. :)  cpovirk: @jbduncan, @JakeWharton said above: I believe 'api' only exists for JRE projects if you're using the
'java-library' plugin. If you're using the regular 'java' plugin you only
get 'compile' and 'implementation' (the idea being you're a leaf node and
don't have anywhere to expose dependencies to). So I worry that api won't exist for some people, and they'll be confused. Does Gradle warn about compile in JRE projects like it does in Android projects?  jbduncan: @cpovirk Good point about @JakeWharton's comment! Gradle does warn about compile in JRE projects too. :( Taking all this into consideration, I think the best advice to give Gradle users is something like the following: To add a dependency using Gradle: But having said this, the example advice I give above is quite verbose. I wonder if there's a better way of presenting it to Gradle&Guava users...  ",2018-05-23 21:03:18,2018-05-25 17:39:01,2,1,5
Issue#3157 fix a grammar mistake,cla: no,,,"AYWWWWW: fix a grammar mistake 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  AYWWWWW: @googlebot  I signed itÔºÅ  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  AYWWWWW: @googlebot I have added gmail account to githubÔºåhow about now?  jrtom: @AYWWWWW  I'm guessing that your email may not be set on your commits.  (See the instructions above.)  AYWWWWW: @jrtom you are right, thanks.  ",2018-05-25 02:18:14,2018-05-28 11:54:51,1,1,3
Issue#3158 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Use api instead of compile for Android
 Fixes #3154 03d7fd7 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2018-05-25 14:48:37,2018-05-25 17:39:01,1,1,3
Issue#3159 a,cla: no,,,"LittleFatz: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  ",2018-05-27 06:48:01,2018-05-29 15:50:09,3,1,3
Issue#3161 fix a grammar mistake,cla: yes,,,"AYWWWWW: fix a grammar mistake  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  jbduncan: @AYWWWWW To make sure that your commit is signed with the email address you use for logging into GitHub, try following these instructions and then running git commit --amend --reset-author before force-pushing your ""fix a grammar mistake"" commit again. :)  googlebot: CLAs look good, thanks!  AYWWWWW: @jbduncan I googled and solved it . Thanks anyway  jbduncan: @AYWWWWW Cool, glad you managed to find your own way of solving it. :)  ",2018-05-28 11:56:40,2018-05-31 17:27:23,1,1,3
Issue#3163 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()
 RELNOTES=Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration() 3eadb52  Some changes to the Guava README.
 Move most information about the latest release to the release badge at the top, which now links to the GitHub release page for the latest release and automatically displays the latest release version number. Note: I probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being some change made when prepare_release is run so that the release script knows what commit to create the release from. There are ways we could deal with that, but I didn't want to deal with that yet. 0f36477  Fix https://github.com//issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int,Long,Double}.
 9e6e1d0  Automated rollback of 9e6e1d0
 *** Reason for rollback *** Appears to tickle a J2CL bug. *** Original change description *** Fix #3156 by implementing a proper CollectSpliterators.flatMapTo{Int,Long,Double}. 15db5b7  ",2018-05-29 02:29:34,2018-05-29 13:31:03,4,3,6
Issue#3170 Moe Sync,cla: yes,,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  fix a grammar mistake
 Fixes #3161 d60f7f3  In open-source Guava, completely skip trying to discover pluggable PatternCompiler implementations.
 It's never been possible to create such implementations externally, anyway, and users are now seeing problems running the useless discovery code under the module system. Fixes #3147 RELNOTES=base: Fixed the ServiceConfigurationError that some users encountered when using Guava as a JPMS module. 0954b82  Suppress exceptions raised from argument's toString methods during lenient formatting - take 2.
 60c6e22  Create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and ICU4J.
 e0eae79  Fix b/80241237 to correctly *not* change segment weight, nor report an eviction, when a compute() call does not change the present value.
 RELNOTES=Fix a bug where Cache.asMap.compute* methods could cause nonsensical weights to be stored, breaking cache eviction. 21b52f6  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2018-05-31 15:30:28,2018-05-31 17:27:23,5,11,6
Issue#3171 Moe Sync,"status=triaged, cla: yes",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add a direct dependency from guava-gwt to checker-qual.
 The GWT sources (specifically, GwtSerializationDependencies) use @nullable directly, so we shouldn't rely on relying on it indirectly through guava-jre. However, what actually prompted this is a strange behavior in Compile-Testing, which Truth uses. This CL should help, though it might not be a fully solution.
google/compile-testing#149 5cb6f0a  Fix mangled Javadocs.
 5928882 



              The text was updated successfully, but these errors were encountered:
              ",2018-06-01 19:44:10,2018-06-04 15:24:20,2,3,5
Issue#3176 Test setValue(null) (both success and failure cases),"package=testing, type=addition, status=triaged, cla: yes",cpovirk,cpovirk,"nikhilbarar: Added tests:  cpovirk: Can you suppress the new methods in  
guava/guava-testlib/src/com/google/common/collect/testing/TestsForMapsInJavaUtil.java
 
         Line 156
      in
      c2f8967
  I'm interested to see if that fixes all the failures.  nikhilbarar: Thanks. setValue method was already present in the suppress list of ConcurrentSkipListMap and ForwardingNavigableMap tests. I've added the new methods as well at both the locations, which fixed all the failures.  cpovirk: Thanks very much. I've submitted this internally. It will be mirrored out within the next few days, with you listed as the author.  nikhilbarar: Thanks üëç Happy to help  WilliamCollishaw: Looks like this PR can be closed, all changes are available in master. See #3191  ",2018-06-07 18:07:25,2019-05-25 03:27:37,4,4,6
Issue#3179 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix nonpublic identifiers and documentation that use ""whitelist"" or ""blacklist"" to use less problematic terms.
 8a21b1c 



              The text was updated successfully, but these errors were encountered:
              ",2018-06-12 20:59:23,2018-06-12 23:25:43,1,9,3
Issue#3186 add 'oraclejdk10' to Travis build matrix,"type=defect, status=triaged, package=general, cla: yes, P1",,,"sullis: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Well, we should get the tests working with Java 10 so that the continuous build at least verifies that nothing new breaks under Java 8 :( Looks like we should update Mockito, for starters. We'll see how things look and how soon we can get it all working. Additional help is welcome. Thanks for raising this.  cpovirk: Looks like only 2 failures after that: The former is just checking that Throwables.lazyStackTrace is able to use its fast path, which may just become impossible with new versions of Java. It will still return the stack trace, albeit by using the slow path. Users should consider Java 9's StackWalker. The latter is #3086, which we hope affects few users. In both cases, I'll update the test to not run on Java 10, just as we did for Java 9.  ",2018-06-24 18:56:31,2018-07-10 19:39:28,1,1,3
Issue#3191 Moe Sync,"cla: no, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  ",2018-06-28 15:42:23,2018-06-28 16:27:16,6,39,6
Issue#3193 Moe Sync,"cla: no, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary. 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  ",2018-06-28 17:44:33,2018-07-10 18:54:51,7,24,6
Issue#3197 Moe Sync,"cla: no, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary. 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of the commit author(s) and merge this pull request when appropriate.  ronshapiro: Before merging this, can we update 893d350 to correctly reflect @hadrienk as the author? I can take care of this if you want, @cgdecker  cgdecker: Fixed the author field and force pushed the updated commits.  ",2018-07-02 21:12:21,2018-07-10 19:39:14,10,28,8
Issue#3204 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Adds constants for Sec-Metadata header.
 https://github.com/mikewest/sec-metadata RELNOTES=Adds constants for Sec-Metadata header. 2035a27  Update Public Suffix data.
 This copy is updated whenever Chrome's copy is updated, which is
typically every 6 weeks. Star the following to watch Chrome's updates: https://bugs.chromium.org/p/chromium/issues/detail?id=610495 0dc7152  Add @nullable to AbstractSequentialIterator's computeNext() method return value so that [] doesn't complain
 e59ed3d  Internally, use PatternCompiler from Doubles.tryParse.
 (Redo of CL 202132002, which was partially rolled back in CL 202139691.) This time including tests to cover the RE2J approach.
To avoid the errors of last time, I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent; see the Pattern Javadoc). e51afe5  ",2018-07-13 15:02:29,2018-07-13 15:29:34,4,17,5
Issue#3205 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included
 Now they depend only on host and port. Useful for storing IPv6 addresses in Set and Map RELNOTES=net.HostAndPort: Changed equals() and hashCode() to stop depending on whether brackets were included. Now they depend only on host and port. 6684d0f 



              The text was updated successfully, but these errors were encountered:
              ",2018-07-16 18:53:25,2018-07-16 20:43:02,1,4,3
Issue#3211 Check the array indexes in Quantiles.ScaleAndIndexes is non empty,"status=triaged, package=math, cla: yes, P2",,,"NhatDinh: Fix Issue #3210   googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  NhatDinh: I signed it!  googlebot: CLAs look good, thanks!  ",2018-07-19 17:41:41,2019-10-02 16:48:51,4,2,3
Issue#3213 Missing Performance Optimization for toArray of size zero #3209,"package=collect, status=triaged, type=performance, cla: yes, P2",lowasser,,"thespags: Proof of concept for improving RegularImmutableList's toArray performance. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  thespags: I signed it!  googlebot: CLAs look good, thanks!  nick-someone: 35ca2cc#diff-68927d2f7d9093f2ba963bdf10537151 created the existing implementation. I'm not sure that this implementation would be much faster, considering that RegularImmutableList uses the System.arraycopy in its implementation of copyIntoArray (which both parts of the new implementation you propose delegate down to). Sorry for the delay in getting to reviewing this PR!  thespags: @nglorioso my idea was a proof of concept as requested by @lowasser. This implementation is faster. I've shown it on the original issue. Check out #3209 with my results. @lowasser expanded the the optimization with f5a3541  thespags: @nglorioso Further, if you read #3209, you'll see the issue was ImmutableCollection always creates an array of correct size before calling System.arraycopy ignoring the optimization of passing a 0 length to Array.copyOf. A more in depth analysis is in the orginal blog post I reference, ‚ÄúArrays of Ancient Wisdom‚Äù .  ",2018-07-20 22:38:22,2019-10-02 13:40:52,1,2,4
Issue#3216 gradle syntax highlighting,"status=triaged, cla: yes",ronshapiro,ronshapiro,"theel0ja: 
No description provided.
  ",2018-07-29 16:48:23,2018-08-16 22:28:59,1,1,3
Issue#3217 Change toString() redundant use of StringBuilder since Java 1.6 >,"status=triaged, cla: yes",MarkMielke,lowasser,"trentkjackson: From Java 1.6 > the plus operator is changed into StringBuilder by compiler.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  trentkjackson: I signed it!  googlebot: CLAs look good, thanks!  MarkMielke: Have you timed the code to ensure it is actually faster? The code looks more complex than before, and slower due to the excess complexity of using String.format() and ternary operator. It's not clear to me what is wrong with the previous code, which is very straight forward.  MarkMielke: You piqued my curiosity. According to javap: In terms of actual runtime using Oracle Java 8u162: (A = original, B = proposed) This shows that your code is much faster in the ""hostname only"" scenario, but much slower once you add the ipv6 processing, or the port. Taking a look at your code, it seems clear to me why this would be. In the ""fast path"", you are returning the hostname without any processing. You are only invoking String.format() or StringBuilder in the other cases. This code has the same benefit as yours, but has almost none of the overhead in the slower cases: Benchmark results: (A = original, B = your proposed, C = above proposed) +/- measurement error, the above code is the best choice of the three options. But, for the benchmarks, I am executing the loop 10 million times. Of the cases above, only the first ""hostname only"" case sees any speed up, and for that one, it takes 10 million iterations to see 300 ms of speed up. I don't think 300 ms per 10 million iterations is worth making the code more complex, and introducing a new code path which requires additional test cases to confirm that every code path works correctly every time. I think the current code as-is, works just fine and there is no need for a change here.  MarkMielke: You piqued my curiosity. According to javap: In terms of actual runtime using Oracle Java 8u162: (A = original, B = proposed) This shows that your code is much faster in the ""hostname only"" scenario, but much slower once you add the ipv6 processing, or the port. Taking a look at your code, it seems clear to me why this would be. In the ""fast path"", you are returning the hostname without any processing. You are only invoking String.format() or StringBuilder in the other cases. This code has the same benefit as yours, but has almost none of the overhead in the slower cases: Benchmark results: (A = original, B = your proposed, C = above proposed) +/- measurement error, the above code is the best choice of the three options. But, for the benchmarks, I am executing the loop 10 million times. Of the cases above, only the first ""hostname only"" case sees any speed up, and for that one, it takes 10 million iterations to see 300 ms of speed up. I don't think 300 ms per 10 million iterations is worth making the code more complex, and introducing a new code path which requires additional test cases to confirm that every code path works correctly every time. I think the current code as-is, works just fine and there is no need for a change here.  ogregoire: You take the assumption that From Java 1.6 > the plus operator is changed into StringBuilder by compiler. However, the compiler uses invokedynamic instructions since Java 9 (OK, Guava is not yet compiled against Java 9+, but what about the future? What about future Java versions using something different than invokedynamic?)  Maaartinus: @ogregoire IMHO this all doesn't matter here. The plus operator gets changed to something, but this only for a single expression. Maybe even for a sequence like String s = ...; s += ""a""; s += 5; ..., but not for an arbitrarily complex code containing conditionals like here. With Java 8, there are multiple StringBuilders there...  ogregoire: @Maaartinus What I meant is that something that is true today might become false tomorrow. His basic assumption that + is translated to StringBuilder's append from Java 6 onwards is proven as false with Java 9's indy concat.  Maaartinus: @ogregoire Right, things do change all the time. But the OP could have formulated his assumption like ""+ gets optimized and it's unclear when using StringBuilder is faster"". This uncertainty will most probably stay, I can even imagine cases when + wins as it's simpler to optimize a virtual concat(""("", a, "":"", b, "")"") than the corresponding string-building expression (as an extreme, the right coder and exact count could be determined upfront and the array reused without copying). But that's pretty OT....  lowasser: I'm pretty sure that's the intent of http://openjdk.java.net/jeps/280...  lowasser: I'm with @MarkMielke: the current code as-is works just fine and there is no need for a change here.  ",2018-07-30 05:23:23,2018-08-13 17:07:01,1,1,7
Issue#3218 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.
 Noticed during discussion of #3202 813ebd6  Remove Futures methods that implicitly use directExecutor().
 RELNOTES=Removed the Futures methods that implicitly use directExecutor(). 52fa868  Reduce ProGuard retained code from usages of Multimaps.synchronizedXYZMultimap.
 Effects on MultimapSynchronizedProGuard:
JAR bytes: 148295 bytes => 50236 bytes (-66%)
Classes: 67 classes => 28 classes (-58%)
Methods: 458 methods => 155 methods (-66%) b42b6d2  Remove deprecated CharMatcher constants.
 RELNOTES=Removed deprecated public static fields from CharMatcher. Use the equivalent public static methods instead. 2786afa  Move ExecutionSequencer into guava as @beta.
 RELNOTES=Added ExecutionSequencer, a new utility to run a series of asynchronous operations serially. 3b25fe7  Automated rollback of c7aa4671cd70853515171333c823e3cdece92918.
 *** Original change description *** Move ExecutionSequencer into guava as @beta. 35aa102 



              The text was updated successfully, but these errors were encountered:
              ",2018-07-30 20:54:03,2018-07-31 13:38:11,6,14,4
Issue#3221 Update README.md,cla: yes,kashike,,"xamuel: Added CONTRIBUTING,md into README,md  kashike: Wrong repository.  ronshapiro: That file is a standard, and Github calls it out in a few places. I don't think we need to document it in the readme.  ",2018-08-02 06:37:57,2018-08-13 13:49:18,1,1,4
Issue#3222 Joiner returned from skipNulls() now returns this from an override of skipNulls(),"package=base, status=triaged, type=performance, cla: yes, P4",,cpovirk,"rgoldberg: Joiner returned from skipNulls() now returns this from an override of skipNulls(). This prevents creating additional anonymous inner class Joiners on subsequent calls to skipNulls(). Such calls are probably rare, but, given that each new anonymous inner class Joiner instance will keep a reference to its parent, it's best to minimize the number of these instantiations in any ways possible. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: I suspect that few users call skipNulls() twice. Certainly this would help them somewhat, which is a small help, but there's also the small downside of extra code, in particular on Android.  ",2018-08-02 09:11:22,,1,2,5
Issue#3224 add java lazy model,cla: no,,,"harbby: scala lazy demo: java demo : 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  jbduncan: Hi @harbby, good news! Guava's Suppliers.memoize already does what this PR proposes, so LazyReference is not needed. :)  harbby: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  harbby: @jbduncan  Thank you, I will read Guava's Suppliers.memoize carefully.  kashike: @jbduncan Now if only memoize accepted java.util.function.Supplier.... maybe one year... üòπ  jbduncan: @kashike Indeed! But I'd personally argue that, in the meantime, Suppliers.memoize(javaSupplier::get) is a relatively painless workaround. (Although I'm sure you already know of this workaround and would argue otherwise. üòâ)  ",2018-08-03 15:26:33,2018-08-03 15:43:12,4,2,4
Issue#3225 Change ImmutableSet.Builder to keep overflow hashtables and only deduplicate within table to improve performance,"package=collect, status=triaged, type=performance, cla: yes",lowasser,lowasser,"bobyangyf: This fixes #3223 Building large sets in ImmutableSet.RegularSetBuilderImpl regressed with change mentioned in the issue, with a slightly gain over the original performance. Instead of deduplicating all elements and rehashing when table needs to expand, we keep a list of overflow tables, and only deduplicate within each hashtable. This saves work from consistently rehashing elements while still allowing deduplication of elements as they come. JMH benchmarks results (Note: small set is 3 distinct elements, large set is 1000000 insertions, 500000 distinct elements, elements are Integers, building is add() and build() operations) https://gist.github.com/bobyangyf/05189f515d37b6c3a471ff1659024e12  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  bobyangyf: I signed it!  googlebot: CLAs look good, thanks!  bobyangyf: I believe this can actually be calculated slightly differently for better performance.
Investigating...  lowasser: Any reason not to just do a for-each loop here?  lowasser: for-each?  lowasser: Can you test the case where elements do overlap?  lowasser: I'm a little confused about the circumstances under which tables[j] is null?  bobyangyf: The overflow tables are arrays of deduped elements (per each of the hash sets), which are not necessarily filled full (and in fact most often not filled completely full).  lowasser: I think they should be, I guess?  Here's what I thought your implementation was going for, every time a reset occurs: If that's not what you were going for, can you explain what you meant instead?  bobyangyf: In your outlined case, because chooseTableSize(k) returns powers of 2s, we end up wasting some capacity of the hashTable.
Since rehashes are the most expensive, I chose to maximize the use of the hashTable instead. That is on the reset: corollary is that dedupedElements is full, expect that the initial construction of the hashTable and dedupedElements don't follow these conditions. I could modify the constructor to follow these conditions as well, guaranteeing max fill. However, the flattened result of dedupedElements is not max filled. It is sized according to the max possible size resulting from the flattening of all overflows, but there could be some duplicates between the overflows.
While not the case in this implementation, my next patch with some fixes makes it clear that when we copy builders, we can not guaranty that dedupedElements are filled.
Furthermore, the constructor of RegularSetBuilderImpl doesn't guarantee the sizes that result in always filled conditions either.  lowasser: for-each?  lowasser: maybe rename hashTable ""currentTable"" and rename this too, so it's clearer that we're changing tables?  lowasser: mention that the previous table gets discarded  lowasser: mention we end with O(log n) tables at the end  lowasser: I believe you're underselling this, actually: I think the allocation is still O(n) worst case, not O(m). AFAICT, the worst-case input for this implementation is e.g. 1, 1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, .... in which case overflowTables contains {1}, {1, 2}, {1, 2, 3, 4}, {1, 2, 3, 4, 5, 6, 7, 8} which has ""maximum duplication"": every element that can be duplicated is duplicated as many times as possible.  But we've still only allocated O(m): m = n/2.  bobyangyf: m is the number of distinct elements, n is the number of puts. The above cause you mentioned would still end up with O(n) total memory in the worst case, since we keep every one of those {1}, {1,2} .... tables, making total of O(n) space.
It's true that the largest/latest overflow table, and the final allocation for the set would only be O(m) = O(n/2) though.  lowasser: Just use List, here and below  bobyangyf: This contains some bugs not caught in tests. Will submit some patches later with more tests.  lowasser: I'm concerned about the semantics of this, unfortunately: it seems like it'd destroy insertion order, because elements from overflowTables are getting added after elements from the current chunk, when they were added to the builder before.  I'm not sure I see a good way around that. =(  bobyangyf: Yeah this was a bug I found. I'm closing this pull request due to some new findings that I'm going to post on the issue.  bobyangyf: See #3223 for details.  ",2018-08-03 22:37:48,2018-08-14 17:39:21,1,2,5
Issue#3226 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add a note about the relative ordering of afterDone and listener execution
 25ab9de  Insulate AbstractFuture from Futures.java/MoreExecutors.java dependency
 Made DirectExecutor package-private so that we can refer to it directly in AbstractFuture. 660d915  Remove reference to Strings.isNullOrEmpty from AbstractFuture.
 c72e9c7  Introduce Trusted interface.
 So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture. 227d67f  Automated rollback of 227d67f
 *** Original change description *** Introduce Trusted interface. So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture. e058d91 



              The text was updated successfully, but these errors were encountered:
              ",2018-08-06 21:21:35,2018-08-07 02:17:50,5,6,3
Issue#3229 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Automated rollback of 45ca383
 *** Reason for rollback *** The test that caused the inital rollback is buggy *** Original change description *** Introduce Trusted interface. So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture. 683eb05  Optimize ImmutableCollection.toArray(T[]) as per https://shipilev.net/blog/2016/arrays-wisdom-ancients/, the key goal being to avoid the necessity of zeroing a newly created array where possible.
 Addresses #3209. f5a3541  Adds WASM as a supported Media type to Google Java utilities.
Adds WASM support to the StaticFileAction in devserver (so that it is served
with the correct Content Type).
 RELNOTES=Adds WASM as a supported Media type to Google Java utilities. 67bb79e  Allow Service to transition from STARTING to TERMINATED. Add a new ""doCancelStart"" method that is called when a service is stopped while still starting. This gives implementations a chance to abort code which may be preventing the service from starting.
 RELNOTES=Added doCancelStart protected method to AbstractService 6cdea3a  Fix javadoc typo in LinkedListMultimap
 Fixes #3228 1d0eeee  Add callable's toString to null failure message.
 I find this happens in mock-heavy tests, and this makes it easier to identify the source of the bad mock call. 9c03abc  Enhance toString() for futures returned from ExecutionSequencer.
 Also make tests for ExecutionSequencer actually run, by porting them to junit3 :-( 0c2b6fb  Make ordering of Primitives#all{Wrapper,Primitive}Types deterministic
 RELNOTES=N/A c8ad64d  ",2018-08-09 16:04:14,2018-08-09 22:27:30,8,43,7
Issue#3236 Use newGuard() to make example in Monitor class javadoc more concise.,"status=triaged, cla: yes",cpovirk,,"jsampson2: This commit also cleans up the method javadoc for newGuard() itself and replaces a lingering throw Throwables.propagate(throwable) with simply throw throwable (not related to newGuard(), but good to clean up). Note: I have not modified the copy of Monitor.java under the android directory because the newGuard() method was never added there.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  jsampson2: Regarding the CLA: I've signed an individual CLA and Guidewire has also signed a corporate CLA.  cpovirk: Guidewire has also signed a corporate CLA. Do you know how long ago? They're not showing up in our system.  jsampson2: Huh. I'll dig it up and follow up in email.  cpovirk: Justin's company signed the CLA a while back, and it's just been migrated to our new system. We'll see if CLABot updates as a result of this post. But regardless, this PR is now compliant.  cpovirk: Will submit internally and mirror out.  cpovirk: I had apparently missed/forgotten that this was possible since Java 7 -- nice.  jsampson2: Yeah. I'm sensitive to Throwables.propagate() because we actually had an exception-handling bug in Monitor's early days due to overuse of it, which was fixed with a more involved set of changes in 287bc67 (long before Java 8 came out).  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2018-08-14 06:24:06,2018-09-12 21:42:21,1,1,4
Issue#3237 Optimize ImmutableSet.copyOf to use expectedSize and avoid redundant copying,"status=triaged, cla: yes",lowasser,,"bobyangyf: ImmutableSet.copyOf() was not taking advantage of expectedSize when copying other sets.
It was also creating redundant copies of arrays during copying that is later discarded. This partially fixes #3223 in terms of this method.
Benchmarks below: These are adding 2000 distinct Objects with unique hashcodes that simply return the value of a field.  lowasser: I'm not sure what you're going for here?  You mention ""inserting into the set would make a copy,"" but you can't insert into the set; it's an immutable set.  Additionally, I'm not sure why you're switching to iterators?  Allocating an iterator seems unnecessary. It totally makes sense that if we're copying a Set, we can use its size as a stronger-than-usual sizing hint, but I'm not sure about the other parts of this change.  bobyangyf: I meant ""builder"" not ""set"". Oops. I'll update that.  bobyangyf: Previously, even when we have an ImmutableCollection, we would create a copy of the collection as an array, and then insert them into the Builder, which would create an another array, which unnecessarily creates an array.
This made for a regression in the copyOf(ImmutableSet) benchmark.
Creating an iterator for the ImmutableCollection is much more efficient than copying the array. I changed everything else to use iterators so that we can have one consistent api for construct(). And profiling didn't show that big a difference.
Otherwise, we need two construct() implementations where one takes in an Iterable and another takes in an Array.  bobyangyf: ping?  lowasser: I'd prefer for this to be Iterator<E> and you have to cast the result of toArray() instead of the other way around.  lowasser: I think it makes sense to use the known number of elements as a sizing hint for the of(...) methods.  bobyangyf: 57e4b6d seems to do this  ",2018-08-14 18:57:44,2019-05-23 05:28:13,1,1,4
Issue#3238 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time's Interval.gap when migrating to Java Time which has no Interval class.
 Joda Time:
Interval interval = ...;
Interval gap = interval.gap(interval); Java Time (after this CL):
Range interval = ...;
Range gap = interval.gap(otherInterval); RELNOTES=Adds a gap() method to Range that computes the Range that lies between them. 856f3bc  Use gradle formatting
 Fixes #3216 44abd86  Add missing @SInCE tag.
 https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier) Noticed because of #2853 (comment) 2e93145  Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.
 b155e35  Remove unnecessary local.
 It is a holdover from when we used the value locally, rather than just returned it: 353ae34 94134ff  Make delayed get() test more resilient to thread scheduling delays.
 cc18f99  Switch FluentFuture and AbstractFuture in inheritance chain
 RELNOTES=AbstractFuture doesn't expose FluentFuture APIs anymore. 4d8e0a8 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2018-08-15 14:28:55,2018-08-16 22:28:59,7,29,4
"Issue#3243 Add MediaType for ""application/geo+json"".","status=triaged, cla: yes",kluever,kluever,"simon04: GeoJSON Format has been standardized in August 2016 as https://tools.ietf.org/html/rfc7946. This PR adds a MediaType.GEO_JSON constant.  WilliamCollishaw: Consider adding @since NEXT in the new constants javadoc for if this gets approved.
Also merge conflict
üòÑ  simon04: I'll consider amending the Javadoc and resolving the merge conflict once it's clear whether this PR will have the chance to be merged. There wasn't a merge conflict in 2018-08, and I haven't gotten a reply/comment since. To me it doesn't make sense to contribute to FOSS when PRs are ignored for months and eventually discarded (cf. my bad experience in googleapis/google-http-java-client#314).  jbduncan: @simon04 The Guava team (or the Google Java Libraries team in general) seem to be very busy and struggle to follow up on issues and PRs (I don't know about the Google HTTP Java Client team), so perhaps Guava isn't the best project to contribute to. I don't know if there's a respective library in Apache Commons (Apache Commons IO, perhaps?), but in my experience they're more prompt than the Guava team, so you may have better luck contributing this MediaType or equivalent to Apache Commons than Guava. I hope this helps. :)  kluever: I have a CL out for this internally. Once it gets submitted, it'll get mirrored out shortly there after. Thanks!  WilliamCollishaw: This can be closed  ",2018-08-17 12:10:51,2019-06-03 14:10:12,1,1,6
Issue#3244 Javadoc for MediaType.KML+KMZ+MBOX,"package=net, type=api-docs, status=triaged, cla: yes",,kluever,"simon04: This PR adds Javadoc for the constants MediaType.KML, MediaType.KMZ, MediaType.MBOX.  ",2018-08-17 12:12:07,2018-08-21 22:47:19,1,1,4
Issue#3245 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Don't allocate a CancellationException if cancellation causes are not enabled.
 99393cf 



              The text was updated successfully, but these errors were encountered:
              ",2018-08-17 13:57:56,2018-08-20 14:43:31,1,4,2
Issue#3247 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add Javadoc for MediaType.KML+KMZ+MBOX
 Via #3244 Original Author=Simon Legner (simon04) 7ac917c  [guava concurrent] Inlined getDone() and getUninterruptibly() to break the source dependency from AbstractFuture to other classes in /util/concurrent.
 b6726e1 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  ",2018-08-21 18:27:35,2018-08-21 22:46:59,2,4,4
Issue#3248 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix parameter name in Javadoc
 name doesn't exist in the current context. #CodeHealth RELNOTES=Fix parameter name in Javadoc 9dbaf13  ",2018-08-24 14:34:33,2018-08-29 00:52:48,1,2,3
Issue#3254 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled.
 f380040  Suppress warnings on thread suspending test.
 d51037d  Suppress violation of MissingEqualsCall for EqualsTesterTest, given it quite legitimately fails to call #testEquals.
 16e6fce  Automated rollback of changelist f380040
 *** Reason for rollback *** Test depends on incorrect Future implementation *** Original change description *** Add more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled. 47d758e  Update Public Suffix data.
 The copy is updated whenever Chrome's copy is updated, which is
typically every 6 weeks. Star the following to watch Chrome's updates: https://bugs.chromium.org/p/chromium/issues/detail?id=610495 5fafe78  ",2018-08-29 23:17:03,2018-08-30 19:56:29,5,6,4
Issue#3256 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add more validation to AbstractFuture when cancellation causes are enabled, so that it matches the behavior when they are disabled.
 49c73aa  Bail early without a CancellationException in AbstractTransformFuture.
 2ba14fd  ",2018-09-04 18:39:34,2018-09-04 19:52:15,2,8,2
Issue#3257 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Use TrustedFuture where possible
 5f14366 



              The text was updated successfully, but these errors were encountered:
              ",2018-09-07 20:37:57,2018-09-12 14:31:13,1,2,2
Issue#3261 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: 
No description provided.
  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  cpovirk: We have the author's permission in #3236  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2018-09-12 21:14:34,2018-09-12 21:42:10,2,21,3
Issue#3262 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove trustedGetException()
 tryInternalFastPathGetFailure gives access to similar fast-path RELNOTES=N/A 9d9d4d2  ",2018-09-13 22:49:04,2018-09-14 03:38:12,1,4,2
Issue#3266 Implement getRandom() for Iterables,"package=collect, status=research, cla: yes, P4",,kluever,"dgray16: Hi, I want you to present my minor improvement for Iterables class. In commercial application I am working with I faced a problem that I need to take random element from ArrayList. Thing that confused me the most that such functionality has been rejected for Apache Commons (Collections) long time ago and has not been reviewed. I hope that Guava community does not think the same way.
Thanks.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  dgray16: I signed it!  googlebot: CLAs look good, thanks!  jbduncan: Hi @dgray16, welcome to Guava! :) Thing that confused me the most that such functionality has been rejected for Apache Commons (Collections) long time ago and has not been reviewed. Huh, that's interesting. Could you point us towards a web page or something that confirms this, e.g. an entry in the Apache Commons mailing list? I hope that Guava community does not think the same way. In a way, I hope so too! But I'm not a Googler, and even though a community of sorts has developed around Guava over the years, it's still the Guava team over at Google who have the ultimate say over what goes in and what doesn't. And the Guava team (1) have very high standards and (2) have historically not been the best at responding to issues and PRs quickly. So to give you a realistic idea of what to expect:  dgray16: @jbduncan
Hi there.
Appriciate your advices : ) Apache:
https://issues.apache.org/jira/browse/COLLECTIONS-541
https://issues.apache.org/jira/browse/COLLECTIONS-156  jbduncan: You're welcome @dgray16! And thank you very much for providing the links. üëç  jbduncan: Ah okay, I see that https://issues.apache.org/jira/browse/COLLECTIONS-541 is still open, actually, but that it's just not been at the top of anyone's priority list at Apache Commons. I see that PR apache/commons-collections#5 was opened to implement that issue, but it was closed and I do not (yet?) understand why. I see that this Apache Commons JIRA comment raises a concern over the method using a new Random() internally (which the code in this PR also suffers from). This is a problem because it means that one can't use an external Random with a deterministic ""seed"". Being able to set the ""seed"" for a Random is rather important in tests, since otherwise not the same sequence of pseudo-random numbers would get generated each time the Random's methods are called in the tests, meaning that test results would be hard to reproduce. There's also the problem that users may want to use pseudo-random number generators other than Random, e.g. SecureRandom or Apache Commons RNG's implementations. Thus to accomodate these, Iterables.getRandom(Iterable) would really need to be something like Iterable.getRandom(Iterable, IntSupplier). But I'm sure that when the Guava team gets around to this, they'll cover these details if they think the idea behind this PR is a good idea. So no need to worry about them yet. :)  dgray16: @jbduncan
I think that approach with IntSupplier is good one, but do not you think that in this way we are trying to solve the problem that does not exist?
Like, I am typical user of this API, and I want to get the result in the easiest way. I will repeat myself once more that I am not against additional overloaded methods, I want to define motivation of potential API user.  jbduncan: @dgray16 Good question! I've only just started working as a grad software engineer, so I don't have loads of experience yet, so for all I know, maybe going for a solution like using IntSupplier is indeed trying to solve a problem that doesn't exist! All I can say is it's my gut feeling that to not include such an overload will be questioned by people eventually, especially if this JEP is ever accepted, which aims to introduce more pseudo-random number generators in the Java standard library and provide common interfaces for them. Guava team, WDYT?  JakeWharton: You can do this with streams by skipping a random amount and invoking findFirst().  jrtom: Here are some issues that I'd expect to come up in the API review.  (@jbduncan has already pointed out some of the key ones; thanks for that!) First of all, this is what you're proposing as the implementation, which seems reasonable for what it's doing: Let's consider the primary metric by which Guava evaluates possible API additions. Utility: your proposal would replace the above one-liner by a shorter one-liner that is (in my opinion) not difficult to do correctly, or to read.  So the utility--the amount of added value--is fairly low. Ubiquity: generally we try to approximate that by looking for the number of times that the replaced code is used inside Google (since that's where we can easily search, and it's a pretty big code base). Doing a search on Iterables.get\(.*new\sRandom reveals that this pattern is currently used fewer than 10 times inside Google, so the 'ubiquity' aspect isn't looking great. One thing that I think is a minus to this proposal: it hides the call to Iterables.size().  This is fine if you're supplying a Collection, but if you're supplying an Iterable that isn't one, every time you call this method you re-incur the cost of calculating the size. When combined with @jbduncan's good points--that you would want to be able to provide both the RNG and the seed, thus increasing the surface area of this API--this suggests to me that this proposal is unlikely to be accepted.  dgray16: @JakeWharton
Thanks for suggestion. Do not you think that it would be more efficient to get element from array by index instead of iterating through list in case of List?
With iterator we forced to iterate anyway. And by the way java.util.stream.Stream#findAny() works a bit ""unrandom"".  dgray16: @jrtom
Thanks for reply. Anyway it is just a discussion, my point is to present idea rather then argue about it.  Maaartinus: Doing a search on Iterables.get\(.*new\sRandom reveals that this pattern is currently used fewer than 10 times inside Google, so the 'ubiquity' aspect isn't looking great. @jrtom That's maybe 10 times too much. AFAIK the recommended way is to use ThreadLocalRandom.current()..... Poor implemetation was made because of my confidence of a fact that such a ""toy""method should not be too complex in its implementation. @dgray16 Actually, everything in a widely used library should be as close to perfect as possible since it may get used a lot. Your implementation is not bad. It's about the best solution for most cases, but sometimes, a different implementation may be needed: Because of that, I prefer to have no utility method, as writing my own code makes me think about such cases.  ogregoire: This looks like a duplicate of #2041 .  jrtom: @ogregoire You could think of this as being a special case of #2041, but since selection using a uniform random distribution is such a common thing to want to do (that, importantly, requires considerably less specification than any non-uniform distribution) I think it's reasonable to treat them as mostly-separate problems, while recognizing that they're related and that a solution for one should be reasonably congruent to the other.  kashike: A version of this that accepts a Random would be nice too.  kluever: @jrtom I found 26 hits inside google using ""Iterables.get(.*random"", which is more than you, but still fairly low on the ubiquity scale. I'm also generally -1 on this proposal (all of the above comments are good), but I'm happy to leave this open in the ""research"" category in case other folks want to make a stronger case for it. In the case that you have a List (which I suspect is the majority case), we're not actually saving much:
list.get(random.nextInt(list.size()); // before
Iterables.getRandom(list, random); // after If you have an Iterable/Collection, sure it's a little longer, but still not that much of a savings:
Iterables.get(iterable, random.nextInt(Iterables.size(iterable))); // before
Iterables.getRandom(iterable, random); // after  ",2018-09-16 09:57:00,,1,2,11
"Issue#3268 Update truth, animal sniffer, error prone annotations, and JUnit",cla: yes,cpovirk,,"swankjesse: All of these dependencies are out of date from those used in gRPC, and preventing
me from getting a current build of Guava into gRPC. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Thanks. I'm submitting this internally. Do you know what problem it causes for gRPC? I would expect them to override dependency versions when necessary, since their deps' deps are likely to get out of date (like here...). We should still update, but I have been getting more involved in Maven/Gradle dependency-version issues lately, so I'd be interested for any info you have.  swankjesse: When I tried to upgrade to Guava only in gRPC it failed because they‚Äôre using strict version matching: So when I try to use Guava 26.0-jre their build fails where gRPC and Guava dependencies disagree. I don‚Äôt think the strict versioning is worth the friction it causes, but gRPC isn‚Äôt my project. As long as Guava stays up-to-date on its own dependencies and releases frequently, it shouldn‚Äôt be a problem to get a gRPC release that can support it.  cpovirk: Thanks. I think gRPC agrees and is in turn doing it only for Spring. We've since cleared up some misunderstandings we had about Spring, so gRPC might be willing to back that out. Anyway, we should still do these updates. I've submitted the change internally, and it should be mirrored out today.  cpovirk: (@ejona86 so that I'm not talking about him behind his back :))  ejona86: So when I try to use Guava 26.0-jre their build fails where gRPC and Guava dependencies disagree. We exclude mis-matched dependencies in our build. Yes, it is a pain, but it can be solved fully from the gRPC-side. But bumping the versions here isn't a bad thing. I'm going to be very happy to remove failOnVersionConflict(), but we need to replace it with another check. I've not found a way to check requireUpperBoundDeps from Gradle (for obvious reasons). I think we may be forced to have a ""test Maven project"" just to run requireUpperBoundDeps.  cpovirk: I've not found a way to check requireUpperBoundDeps from Gradle (for obvious reasons). Oh, ha, of course. Thanks for the update.  ",2018-09-18 19:35:05,2018-09-19 16:28:10,1,1,4
Issue#3269 A utility for single execution of  Runnable,"type=addition, package=concurrent, status=will-not-fix, cla: yes",jolkdarr,,"tareqhs: A funtionality similar to Suppliers.memoize() for Runnable  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  tareqhs: I signed it!  googlebot: CLAs look good, thanks!  jolkdarr: Fix typo in Javadoc.
Boolean 'done' is checked twice. Necessary ?.  tareqhs: Hi @jolkdarr Double check locking improves performance by doing an initial non-synchronized optimistic check before doing the actual check inside the critical block. Theoretically, the synchronization lock will be acquired only a few times (hopefully once) reducing the overall overhead. https://en.wikipedia.org/wiki/Double-checked_locking  jolkdarr: Hi @tareqhs Thanks for the reply.
For this kind of synchronization, I prefer to use an AtomicBoolean or a single short integer (0/1) avoiding the use of an object as lock.  tareqhs: Hi @jolkdarr This is a slightly different behavior. My intended behavior is that everyone depends on the outcome of the Runnable and waits for it to finish if it has not finished yet. The behavior you are describing is triggering the task only once.  Maybe we should have a separate Runnables.triggerOnce(Runnable) for that?  ben-manes: This seems similar in spirit to RunnableFuture in j.u.c.  netdpb: What does this do that java.util.concurrent.FutureTask doesn't?  ",2018-09-19 07:41:16,2018-09-25 14:18:29,1,2,5
Issue#3270 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: 
No description provided.
  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  cpovirk: One change is by a Googler; the other has a verified CLA in #3268.  ",2018-09-19 16:03:24,2018-09-19 16:27:52,4,11,5
Issue#3273 Update the ‚ÄúNo removed APIs since‚Äù counter to 26.0,cla: yes,cgdecker,,"swankjesse: Removal of one of the catchingAsync overloads caused me some grief
because one of my projects‚Äô transitive dependencies was using it. 87d87f5
vitessio/vitess#4214  cgdecker: Futures itself is actually @Beta, so no non-@Beta API was removed. (Given how long it's been around, though, I do feel like it's something we should really prioritize getting as much as we can of out of @Beta.)  swankjesse: True! Since: 1.0  ",2018-09-23 00:12:11,2018-09-24 14:39:14,1,1,3
Issue#3274 add [openjdk11] to Travis build matrix,"type=defect, package=collect, status=in-progress, cla: yes, P1",,netdpb,"sullis: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2018-09-24 01:08:41,2018-09-28 19:25:35,1,1,3
Issue#3275 Check input collection size in PowerSet before actually copying it's content,cla: yes,,kluever,"tgyurci: It helpes avoiding OOMs for big Sets.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  googlebot: CLAs look good, thanks!  kluever: Thanks - I've submitted this internally and it should be mirrored out soon!  ",2018-09-24 12:04:15,2018-09-24 19:02:25,1,4,3
Issue#3276 Add ofNull() method to Suppliers.,"type=addition, package=base, status=will-not-fix, cla: yes",,,"ehenoma: Despite the fact that I avoid the use of nullable references, there are often few alternatives, especially if third-party libraries are used. If, in such cases, a supplier is needed that returns null continuously, the current solution with the Guava library is to call the ofInstance() method with the argument null . This is not really clean and can be easily improved. My added method makes the user's code cleaner and more readable. Without my method: With my method: 



              The text was updated successfully, but these errors were encountered:
              netdpb: I don't think ofInstance(null) is very awkward. And as you suggest, nulls should be used sparingly, so I'm not sure we want to make that case any easier. :) Also, I see only 141 cases of people using Suppliers.ofInstance(null) across all of Google's codebase, so I don't think it's worth adding to the API surface. Does that make sense?  ronshapiro:  ",2018-09-25 14:14:29,2018-09-25 14:44:33,2,2,4
Issue#3280 Removed @Beta for toImmutableList and toImmutableMap,"status=triaged, cla: yes, platform=java8",,netdpb,"yuyumao: #3251  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  yuyumao: I signed it!  googlebot: CLAs look good, thanks!  zshamrock: @yuyumao just to double check do you also consider to remove @Beta from other immutable collection classes, like Maybe there are others, but these are the ones I've found.  yuyumao: @zshamrock I've added all the classes you listed  danielhultqvist: @netdpb Any updates on this PR? Seems that the failing Travis build is probably unrelated. My team are hesitant of using the collectors as it warns about the usage in IDEA  cpovirk: #3393  ",2018-10-01 06:43:08,2019-04-29 20:56:37,14,8,7
Issue#3281 Moe Sync,"cla: yes, internal-sync",,,cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  ,2018-10-01 19:23:44,2018-10-01 19:24:07,1,2,2
Issue#3282 remove @Beta toImmutableSortedMap,cla: yes,,,"yuyumao: 
No description provided.
  ",2018-10-02 08:43:10,2018-10-02 08:43:26,1,1,2
Issue#3283 describe alternative for unmodifiable/synchronizedNavigableSet java8 users,"package=collect, type=api-docs, status=triaged, cla: yes, platform=java8, P3",cgdecker,,kofemann: Since java8 includes Collections.unmodifiableNavigableSet and Collection.synchronizedNavigableSet the alternative in guava can be deprecated.  kofemann: @cgdecker do you expect something from my side?  kofemann: ping...  kofemann: Annual status check .... Ping  kofemann: Annual ping...  ,2018-10-03 19:35:47,,1,1,4
Issue#3287 Narrow @Beta annotations to the methods of Futures,"status=triaged, cla: yes, type=debeta",ronshapiro,ronshapiro,"swankjesse: Right now the @beta annotation on the class is easy to miss, especially
since certain methods are also directly-annotated @beta. Remove the annotation from the class and apply it to each public member. In a follow-up PR I'd like to remove the @beta annotation from a few
methods (transformAsync, catchingAsync, immediateFuture). 



              The text was updated successfully, but these errors were encountered:
              ronshapiro: The change LGTM. As for the removals, I know @cpovirk had plans for addressing some of these, but I can't find the doc (if there was one) and he's currently out on leave.  ronshapiro: Hrm, those JDK 11 failures are bizarre. Maybe they're flaky?  cgdecker: Ugh, actually I think the build is just failing on JDK 11 in general. I noticed that last week when I pushed the change adding JDK 11 to the travis build, but failed to do anything about it so far.  cpovirk: Thanks. I've imported this into an internal CL I have going -- which will also remove a small number of @Beta tags as a starting point.  ",2018-10-06 02:53:43,2019-02-26 19:18:55,1,1,6
Issue#3294 maven-compiler-plugin 3.8.0,"status=triaged, cla: yes, P2",,netdpb,"sullis: notes: https://blogs.apache.org/maven/entry/apache-maven-compiler-plugin-version 



              The text was updated successfully, but these errors were encountered:
              ",2018-10-14 07:11:21,2018-11-06 22:53:23,1,1,3
Issue#3296 Added split to Guava immutable list metod,cla: yes,,,"Dunemaster: For those, who want to use ImmutableList and dont want to pay extra overhead of creating a unmodifiableWrapper or copying to ImmutableList  lowasser: IIRC this can't happen because Google's dependency system can't have cyclic dependencies between packages; collect depends on base but base cannot depend on collect.  Dunemaster: @lowasser , what would you suggest?  lowasser: I would suggest doing nothing.  There's really no better thing to do than what's already there.  ",2018-10-16 20:17:46,2018-10-17 19:11:49,3,4,3
Issue#3297 Removed @Beta from Files class,"status=invalid, cla: no, type=debeta",,,"LianyanGu: Issue number #3285  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  LianyanGu: I signed it!  netdpb: We are working on removing @Beta from APIs that are stable. Thanks for the PR, but we have to go through our internal decision process.  ",2018-10-17 18:44:44,2018-11-02 17:40:32,1,1,3
Issue#3298 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Enable GoodTime API checker for Guava
 753e1d5 



              The text was updated successfully, but these errors were encountered:
              ",2018-10-17 20:00:21,2018-10-18 17:35:24,1,26,4
Issue#3304 Unhandled overflow in the `concat()` method of per-type primitive utility classes,"status=triaged, package=primitives, cla: yes, P3",JakeWharton,,"ineuwirth: The concat() method in the per-type primitive utility classes throws unexpected NegativeArraySizeException or ArrayIndexOutOfBoundsException if the input arrays contain too many elements. Added test cases to demonstrate both overflow cases. A possible fix is provided. In this commit, only the module guava and only the utility class Longs are covered along with the unit tests. See #3303  JakeWharton: Math.toIntExact?  ineuwirth: I preferred to write a custom checker to provide  ",2018-10-20 16:36:26,,2,2,6
Issue#3305 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Enable goodtime-api for Guava (with some exceptions).
 603ecca  *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.
 This is in response to (and should resolve) #3299. 9db70c6  Suppress warnings in classes that implement equals() without also implementing
hashCode().
 The contract for Object.hashCode states that if two objects are equal, then
calling the hashCode() method on each of the two objects must produce the same
result. Implementing equals() but not hashCode() causes broken behaviour when
trying to store the object in a collection. 73f7e84 



              The text was updated successfully, but these errors were encountered:
              ronshapiro: Travis seemed to have missed this PR during Github's partial outage yesterday. Closing and reopening with the hopes that it will run the tests.  ",2018-10-22 20:13:43,2018-10-23 16:25:06,3,26,5
Issue#3306 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Document that Chars.lexicographicalOrdering is different than Alphabetical
ordering, which is more appropriate for user text.
 5377565  ",2018-10-29 16:17:35,2018-10-29 16:43:42,1,2,3
Issue#3309 Add MediaType for Microsoft Outlook,"package=net, type=addition, status=triaged, cla: yes",,kluever,"Tomschi: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  Tomschi: I signed it!  googlebot: CLAs look good, thanks!  kluever: For new MediaTypes, we're trying to make sure we have well-formed javadocs and canonical links to explanations/definitions. Can you find a good reference link for this media type?  Tomschi: I found this:
https://www.loc.gov/preservation/digital/formats/fdd/fdd000379.shtml Is this reference ok?  kluever: Looks good - I'll get this submitted internally and mirrored out.  ",2018-11-02 10:12:49,2018-11-06 22:53:23,1,1,3
Issue#3310 release of references in ExpiringMemoizingSupplier,"type=defect, package=base, status=triaged, status=working-as-intended, cla: yes",netdpb,,"tareqhs: nullify the value reference before calling the delegate to avoid
unexpected leaks if the delegate fails  netdpb: Can you describe the bug you're trying to fix? Exactly what is leaked?  tareqhs: hi @netdpb the supplier that is returned by Suppliers.memoizeWithExpiration holds a reference to the memoized result which prevents it from being garbage collected. If the delegate supplier throws an unchecked exception while the value is being reloaded after expiration then the old value will be still referenced although it is not reachable anymore. The fix guarantees that the old value is de-referenced regardless of whether reloading after expiration succeeds or not.  netdpb: I see.  Thanks for the clarification.  netdpb: Could this be even simpler? Just set value to null before calling delegate.get(). Yes, there will be two volatile writes in the no-exception case, but that's negligible because we rarely get here.  tareqhs: This was my initial thought but I preferred avoiding a redundant write because mostly we do not fail and the redundancy is near constant here.. do you think it is worth it?  netdpb: Let me get another opinion.  netdpb: From a colleague, and the original author of the lines in question: Concurrency is hard! The current code relies on the value field never being invalidated.
Thread A may see that the time has not yet expired, then be indefinitely delayed, and then return value, so Thread B that is updating the value must not set it to null.
OTOH we would like to be able to null out expired values - we would even like to go further and null out expired values while we are computing a new value, so the GC can reclaim one humongous object graph while we are working on the next one.  But that will require more surgery.  It might help to be able to use VarHandles and/or StampedLock from recent jdk releases.  Or maybe reuse the strategy from StampedLock by hand. Whenever we null out a field for the benefit of the GC, we we would like to use a plain (non-volatile) write, but there's no public API to do that on older JDKs. That makes sense to me, and suggests that neither your approach nor mine is correct.  netdpb: I'm going to close this PR for now. Feel free to reopen if you think we should proceed.  ",2018-11-02 10:22:13,2018-11-13 14:57:11,1,2,3
Issue#3312 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add MediaType.MICROSOFT_OUTLOOK and add missing javadocs to a few other MediaTypes.
 Closes #3309 522d3aa  Use maven-compiler-plugin version 3.8.0.
 Closes #3294. f31bf94 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2018-11-06 21:11:53,2018-11-06 22:53:23,2,4,2
Issue#3313 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Correct documentation for Splitter#withKeyValueSeparator(Splitter)
 8340e5a  Standardise message format for ""duplicate key"" IllegalArgumentException thrown from ImmutableTable.Builder.build().
 Internally, ImmutableTable.Builder.build() delegates to two classes, {Dense,Sparse}ImmutableTable and these currently have inconsistent error messages when a duplicate key is detected. Prior to this CL, SparseImmutableTable had a message formatted like:
""Duplicate value for row=%rowKey%, column=%columnKey%: %newValue%, %oldValue%""
Whereas DenseImmutableTable had:
""duplicate key: (%rowKey%, %columnKey%)"" After this CL both classes will format the message like:
""Duplicate key: (row=%rowKey%, column=%columnKey%), values: [%newValue%, %oldValue%]."" RELNOTES=Standardise message format for ""duplicate key"" IllegalArgumentException thrown from ImmutableTable.Builder.build(). 96e21ae  common.graph PackageSanityTests: specify a default object for EndpointPair inputs.
This should resolve a few internal flaky test issues
 4210f57  ",2018-11-08 23:22:46,2018-11-09 19:00:58,3,13,4
"Issue#3314 Field, parameter, and variable.",cla: yes,,,"reudismam: The final modifier can be used in fields, parameters, and local variables to indicate they cannot be re-assigned. This edit improves clarity and it helps with debugging. 



              The text was updated successfully, but these errors were encountered:
              kluever: See google/truth#501 (comment)  ",2018-11-10 20:11:17,2018-11-12 15:49:36,1,1,3
Issue#3315 Use the class Path to represent a path instead of a String.,"status=triaged, package=io, cla: yes",MarkMielke,cgdecker,"reudismam: Strings can be used to represent a file system path even though some classes are specifically designed for this task. For instance, java.nio.Path. It is useful to change the type of the variable to Path, since strings can be combined in an undisciplined way, which can lead to invalid paths. Second, different operating systems use different file separators, which can cause bugs.  jbduncan: This seems like a good change to me! It wasn't immediately obvious to me, but I see now that packing a string into a Path (even though we unpack it immediately afterwards) ensures that an exception is thrown if the passed string doesn't represent a valid path. So as a non-Googler this change receives my üëç.  jbduncan: Although, I suppose I wonder if this change will work on Android? Does Android have java.nio.file.Path now? ü§î  jbduncan: And if so, should the File parameter for the method getClassPathEntry(File, String) be changed to a Path as well?  jbduncan: Or even the String parameter for that matter?  liach: is there more instances of such unsafe usage?  MarkMielke: I think it is important to note that most of the reasons for and against using Path instead of String, also apply to File, and it would be useful to understand why File wasn't already used in these situations. I don't think it being a Path, or a File, guarantees that it is ""valid"" as a path. It may improve the odds, by doing additional checks - but there are likely several paths that are in fact valid, that are not possible to represent with a Path. For example... when I call ""mv some_file some_directory"", I normally spell this ""mv some_file some_directory/"", as the trailing ""/"" is valid in a Unix path, and in the case of ""mv"" it will assert that the target is a directory before potentially overwriting a file of the same name: A Path or File will have additional overhead in processing to ensure it is valid, and to track it. At a minimum, it is a String wrapped in another class object. However, every alteration or representation may have additional processing. What is the performance overhead of switching everything from String to Path or File from a runtime perspective? How much more memory does it require? How much more CPU does it require? How is .toString() implemented, as might be commonly called? Generally, I like the idea of Path and File, which is why I have long used File in appropriate places, and I started to switch these to Path in Java 7 and later. However, I don't think it belongs everywhere. As an example - sometimes Integer are stored in String. While it makes sense to sometimes represent it as an Integer... sometimes it is simpler and faster, to leave it as a String.  2761098800: 475e3  MarkMielke: Based upon my general comments... since URL is actually taking a String, what is the value-add of converting it first into a Path and then back into a String? Why not pass the value through, and let URL decide what is valid and what isn't valid? What if there is something that URL recognizes, that Path mangles? Why introduce an additional transform at all? Is there an example of something that works faster or more correct with this change, then without this change? I also have a concern that a ""URL"" is not a ""Path"" despite the ""String path"" reference. The ""URL"" is defined by a URL RFC/STD. The ""Path"" is something specific to the file system of the machine you are running on. I'm not sure they are interchangable except as a subset. For example, and I haven't reviewed this in detail... what should happen if you use special characters like + or %20 or %2F? Will these continue to have the same meaning after this change? Particularly consider %2F before answering... The other one I wonder about is if Path.toString() returns abc\def\ghi (Windows path) and URL expects abc/def/ghi (URL path), wouldn't this create a problem? I don't see the value of this change myself.  ChristianCiach: As far as I understand the method in question, it is used to construct a URL pointing to something inside a jar file. In particular, the String parameter is used to denote the path inside the given (jar-) File. A Path is heavily dependent on the local operating- and file system. For example, under Windows, Paths.get(...) will return a different implementation of Path than under Linux. The content of a jar file (or especially the way to reference it) is surely not related to the file system of the local host, so using Path in this context seems like the wrong thing to do.  cpovirk: I'll close this, since it's not clear what the problem being solved is. Feel free to reopen with a test that demonstrates an issue, and we can have a look.  ",2018-11-10 20:34:02,2019-10-02 15:11:52,1,1,10
Issue#3318 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Address why users should prefer our immutable collections to things like Collections.emptyList().
 2b9f74c  Add the Origin-Trial HTTP response header.
 229188e  ",2018-11-16 15:01:41,2018-11-16 16:07:25,2,4,3
Issue#3319 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Create a Guava BOM.
 RELNOTES=Create a BOM for Guava. 0a6c51e  ",2018-11-20 16:12:13,2018-11-20 19:19:01,1,4,3
Issue#3324 Didn't update readme with latest version for Android.,cla: no,,,"abuicke: Didn't update readme with latest version for Android. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  ronshapiro: This will be in our next public sync - we're just behind because of the holiday.  ",2018-11-25 16:13:50,2018-11-25 19:13:56,1,1,3
Issue#3325 Moe Sync,"cla: yes, internal-sync",,,cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  ,2018-11-26 18:50:52,2018-11-26 19:19:14,5,86,5
Issue#3327 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Update Public Suffix data.
 The copy is updated whenever Chrome's copy is updated, which is
typically every 6 weeks. Star the following to watch Chrome's updates: https://bugs.chromium.org/p/chromium/issues/detail?id=610495 When that bug is not updated, the copy is updated 3 weeks before the
Estimated Week of Stable: https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates 648071f  ",2018-11-28 21:58:53,2018-11-29 18:10:10,1,2,3
Issue#3330 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Internal change
 3e74359  Add the @immutable a few more classes. Both annotations enforce at compile-time that the annotated class meets the annotation‚Äôs requirements.
 16001aa  ",2018-11-30 16:16:34,2018-11-30 20:07:15,2,3,2
Issue#3332 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing documentation and @SInCE tags to MediaType entries that were added
after its initial relase of 12.0
 b545d0e  Remove ""Media type for"" or similar phrasing for visible constants in the MediaType class.
 172bb45  ",2018-12-02 17:37:47,2018-12-02 20:03:54,2,2,3
Issue#3334 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Make example compile (i.e. supply a Path/File) and use depth first instead of breadth first.
 Reason: Depth first is more common for file traversal. RELNOTES=N/A e7b8045 



              The text was updated successfully, but these errors were encountered:
              ",2018-12-03 22:37:00,2018-12-05 23:21:20,1,3,3
Issue#3337 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Use the primitive ""number"" type instead of the object counterpart ""Number"" to avoid a jscompiler error.
 An upcoming change to J2CL that simplifies how casting logic is transpiled will make the code ""(Number) (Object) 3"" here transpile to just ""/** @type {Number} */ (3)"" and jscompiler will see the ""invalid cast"" since ""3"" is not ""Number"" in the closure type system. 065a831 



              The text was updated successfully, but these errors were encountered:
              ",2018-12-12 00:32:01,2018-12-12 01:25:13,1,1,3
Issue#3339 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add the application/jose and application/jose+json media types.
 https://www.iana.org/assignments/media-types/application/jose
https://www.iana.org/assignments/media-types/application/jose+json
https://tools.ietf.org/html/rfc7515#section-9.2 RELNOTES=Add MediaType for ""application/jose"" and ""application/jose+json"". e846cdf  Suppress soon to be GoodTime errors ('time' is now considered a keyword).
 2705b06 



              The text was updated successfully, but these errors were encountered:
              ",2018-12-14 14:31:05,2018-12-14 16:34:43,2,6,4
Issue#3344 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Use maven-javadoc-plugin 3.0.1.
 cd52f44  ",2018-12-18 14:44:01,2018-12-18 19:03:44,1,2,3
Issue#3350 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Hide Files methods that are @deprecated internally
 cf8ea79 



              The text was updated successfully, but these errors were encountered:
              ",2018-12-23 22:49:40,2018-12-24 04:08:33,1,2,3
Issue#3355 Remove unused imports and update/remove suppress warning,cla: no,,,"OleksiiBondar: 
No description provided.
  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  liach: consider applying the same changes to android codebase  OleksiiBondar: Closed to simplify resolving git comming email  ",2018-12-24 22:56:10,2018-12-25 01:48:13,2,10,3
Issue#3356 Remove unused imports and warnings,"status=triaged, cla: yes",,cpovirk,"OleksiiBondar:  OleksiiBondar: @liach Thanks, added similar changes to android as well  liach: looks good (imo this has a big chance of merging as it's a bugfix)  cpovirk: Not sure what we're doing with serial warnings nowadays, but I'll import the rest of this. Thanks.  ",2018-12-25 02:05:06,2019-02-26 19:18:54,2,17,5
Issue#3359 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable.
 Fixes #3343 RELNOTES=Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable. 7b8f8bd  ",2019-01-03 00:03:13,2019-01-03 17:26:05,1,2,3
Issue#3362 Remove @Beta from EventBus #3360,"status=triaged, cla: yes, P3, type=debeta",,,"rickybiswas25: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  rickybiswas25: I signed it  googlebot: CLAs look good, thanks!  kluever: We're likely going to start discouraging use of com.google.common.eventbus in favor of alternatives, so it won't be coming out of @Beta.  cgdecker: Update: it came out of @Beta. But note that it mostly came out of @Beta because we're discouraging its use now, and won't be making further changes to it.  ",2019-01-07 17:00:31,2021-04-19 15:13:40,1,1,6
Issue#3363 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Correct the spelling of the Range class.
 It's Range not Ranges. 40993be 



              The text was updated successfully, but these errors were encountered:
              ",2019-01-10 20:52:59,2019-01-15 21:40:57,1,1,3
Issue#3364 rename literal,"status=triaged, cla: yes",,,"mjaow: refactor the literal 6 in LockFreeBitArray to LONG_ADDRESSABLE_BITS  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it.  mjaow: I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  mjaow: I signed it!  googlebot: CLAs look good, thanks!  cpovirk: Thanks. We've submitted this internally, and it will be mirrored out the next time we push changes.  mjaow: @cpovirk @ronshapiro
seems the Moe Sync #3366 test failed  ",2019-01-12 11:36:32,2019-02-14 14:38:19,1,1,4
Issue#3366 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Enable GoodTimeApi for c.g.common.cache
 RELNOTES=Enable GoodTimeApi for c.g.common.cache acf26c9  refactor literal to named constant
 Fixes #3364 47a6942  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2019-01-16 16:17:19,2019-01-24 17:18:28,2,15,3
Issue#3368 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Enable GoodTimeApi for c.g.common.cache
 RELNOTES=Enable GoodTimeApi for c.g.common.cache 7a3e5ab  refactor literal to named constant
 Fixes #3364 a282981  Adds constants for Sec-Fetch-(Dest|Mode|Site|User) headers.
 https://github.com/mikewest/sec-metadata RELNOTES=Adds constants for Sec-Fetch headers. cfb1208  Remove @CanIgnoreReturnValue from c.g.c.collect.Ordering.min/max()
 RELNOTES=Remove @CanIgnoreReturnValue from c.g.c.collect.Ordering.min/max() a83bb5f  Swap the parameter order of the Collections.disjoint call in Sets.intersection
 Collections.disjoint is implemented in such a way that it has better
performance if its 2nd parameter is the smaller of the two when both params are
instances of Set. The Sets.intersection javadoc says it has better performance
when set1 is the smaller set, but that is currently not the case for the
isEmpty operation specifically. Our team ran into a pathological case of this where we check for an empty
intersection of two sets, one being ~5 orders of magnitude larger than the
other. RELNOTES=Update isEmpty operation of intersection to follow the smaller set first advice in the javadoc. 1162460  Remove @CanIgnoreReturnValue from c.g.c.collect.ClassToInstanceMap.getInstance()
 RELNOTES=Remove @CanIgnoreReturnValue from c.g.c.collect.ClassToInstanceMap.getInstance() ecb601f  Remove @CanIgnoreReturnValue from c.g.c.collect.Iterators.getOnlyElement()
 RELNOTES=Remove @CanIgnoreReturnValue from c.g.c.collect.Iterators.getOnlyElement() f8ee1a2  Remove @CanIgnoreReturnValue from c.g.c.base.Ticker
 RELNOTES=Remove @CanIgnoreReturnValue from c.g.c.base.Ticker 44e129f  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2019-01-24 16:56:16,2019-02-13 13:55:29,8,27,5
Issue#3370 RFC: Optimize AbstractFuture.setFuture,"package=concurrent, status=triaged, type=performance, cla: yes, P3",cpovirk,,"njhill: Chained/recursive async ListenableFuture transformations (e.g. via Futures.transformAsync/catchingAsync/scheduleAsync/... or SettableFuture.setFuture) currently cause indefinite growth of live objects, with intermediate futures not eligible for collection until the entire chain/tree is completed, even if/when already set asynchronously. This PR is a proof-of-concept experiment to rework the setFuture mechanics so that such chains are collapsed on the fly where possible, and makes some related optimizations along the way. It needs some further refinement but should be fully functional. The approach is motivated by the observation that chains (or more generally trees) of AbstractFutures, previously linked via setFuture calls, form a disjoint group whose members share a common fate. Although a tree structure is implied by the order in which the futures were combined, only identification of the root has any significance w.r.t. future program state. In other words the group can be considered as a set with no structure apart from the existence of a unique ""unset"" member. And since listeners and waiters added to any of the futures in the group are interested only in the common outcome, there's no need for them to remain tied to their ""local"" future instance. If the future overrides afterDone() then it must remain reachable, i.e. there is no hope of unpinning it. Unfortunately this applies to most of the internal AbstractFuture subclasses used to implement the Futures methods, but it turns out they can be refactored to use a (newly introduced) weaker hook named afterEarlyCancellation(). This gets called if and only if the future is cancelled prior to being set asynchronously. AbstractFutures which make use of setFuture() but don't override afterDone() are considered to be ""passively completable"" - they can be manipulated such that from the outside they appear to behave/complete as normal, but no callback references need to be retained to them once they are set asynchronously. This is achieved by relocating/redirecting their Listeners and Waiters elsewhere. Passive completability is currently signalled by overriding a new protected requiresAfterDoneCallback() method to return false (it returns true by default). There may be a better approach like a marker interface or new abstract AbstractFuture subclass or even automatic determination via reflection, though the cost of the latter may be prohibitive. The private SetFuture class currently serves as an immutable link to the next future, pointing to both the source and target, and is also registered as a listener on the target. This has been changed to serve a different purpose, now a mutable, shared placeholder set as the value for multiple AbstractFutures belonging to the same async-set group. It still has two fields - a fixed (final) pointer to an arbitrary ""delegate"" member of the group (chosen when first established), and a volatile pointer to the group's current unset future*. A new future ""joins"" the group when an existing member is successfully passed to its setFuture method or is passed itself as the argument to the setFuture method of the group's current unset target. In either case the group's existing SetFuture instance becomes the value of the newly joined AbstractFuture. If the new future is passively completable, its listener stack is moved to the group's delegate future (replaced by a new MOVED Listener sentinel), which is guaranteed to be explicitly completed. Waiters in this scenario are released, will recheck their owning future's value finding it is now a SetFuture, and then just block on SF.delegate.get(). A new private Pending class represents the same unset state as null but is set as the value of the group's single unset (innermost) member and holds a pointer to that group's SetFuture object. When setFuture is called on this unset future the Pending value is unwrapped, replaced with the SetFuture object it contains. If trusted, the new future's value is set to the same Pending object (it moves down the chain). The whole operation involves no new allocation if the futures are passively completable. A listener is typically no longer created when passively completable futures are set asynchronously, however the design requires that the assigned ""delegate"" future for the group is explicitly completed whether or not it is passively completable. This is easily arranged since when the innermost future is finally (non-asynchronously) set, this delegate can be found immediately via the Pending object which the terminal value replaces. If the innermost future is async-set to a non-trusted future, the Pending object is discarded and the contained SetFuture is added as a listener to the target (it continues to implement Runnable for this reason). Before:
 After:
 Completion ""callbacks"" are still required for non-passively completable async-set futures (apart from those which happen to be a SetFuture delegate). A new private Completer class is used for this purpose - a simple Runnable pointing back to the future in question. As well as benefiting allocations and object retention, this approach reduces the total number of volatile writes and CAS operations required to process a given chain of futures. (*) For clarity the above explanation ignores the special case of joining two existing async-set groups that occurs if the unset member of a non-singleton async-set group is set to a future already belonging to a different (necessarily disjoint) non-singleton async-set group. Logically the outcome is just a single async-set group formed by their union, whose unset member is that of the second one. But special handling is required in the implementation since we now have two SetFutures, neither of which can be discarded: one of them is ""retired"" and added as a listener to the other, which means that its target value will no longer be updated when the aggregate async-set group's target changes. However the future which the target is set to will either be updated or (if there are futher group compositions) lead transitively via a chain of SetFutures to one which is updated. Thus the new impl can still result in chains of async futures but they should be much rarer and shorter, since each link in such a chain must have resulted from a setFuture composition of non-singleton async-set groups of futures. A small modification is also included to avoid listeners added via Futures.addCallback() continuing to hold a ref to their target future once it has been async-set - the Futures$CallbackListener.future field is changed to be non-final (safe since it's published via CAS to the listeners stack), and is updated to the group's delegate future at the time the listener is redirected or relocated by AbstractFuture. The following exaggerated example takes more than 2 minutes to fail with an OutOfMemoryError after ~14 million iterations when run with the current version and -Xms1g -Xmx1g. With this PR and -Xms32m -Xmx32m it completes 100 million iterations successfully in less than 4 seconds: There is negligible if any change to the existing caliper benchmark numbers (both runtime and allocations), but a new benchmark for testing performance of setFuture and subsequent completion based on the above snippet shows considerable improvement: I have not tried this yet but expect further optimization is possible to Listener handling, in particular changing Listener to an interface or abstract class which the ""internal"" callbacks can extend directly to eliminate some allocation and indirection, and bypass the public addListener method when moving listeners between TrustedFutures. 



              The text was updated successfully, but these errors were encountered:
              njhill: @cpovirk any thoughts on the value of this kind of change? btw the build failure is unrelated and affecting all branches - caused by travis moving to jdk11.0.2 which appears to have an incompatibility with maven-javadoc-plugin (at least until next version 3.1.0 is released).  cpovirk: Thanks. @lukesandberg, author of most of AbstractFuture, may have some thoughts. If not, I will set myself some reminders so that this doesn't fall off my radar.  njhill: @lukesandberg @cpovirk curious if you had a chance to take a look at this?  cpovirk: Not yet, sorry :( Various non-Guava stuff has been eating my time even more than usual lately.  njhill: @cpovirk @lukesandberg  I realize that the size of the change is likely off-putting, but I wonder if you could at least read just the overview, results and possibly ""behaviour differences"" sections above to determine if this might even be of interest. If the answer is no then there's no need to look at the code!  ",2019-01-29 01:40:01,,2,17,5
Issue#3372 Improve efficiency of bulk removals in transformed lists.,"package=collect, status=triaged, type=performance, cla: yes, P3","lowasser, kevinb9n",,"hwaite: Override removeRange(int,int) for Lists.TransformingSequentialList and
Lists.TransformingRandomAccessList so that source list has opportunity
to do more efficient deletions. Call fromList.subList(from, to).clear()
instead of removing with iterator.  hwaite: Anything further needed from me in order to get this merged?  ",2019-01-31 23:33:15,,2,1,6
"Issue#3377 Removed @Beta from RangeMap, RangeSet and their implementations #3376",cla: no,,,"tyomka: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  ",2019-02-08 14:40:19,2019-02-08 14:46:03,1,12,2
"Issue#3378 Removed @Beta from RangeMap, RangeSet and their implementations #3376",cla: no,,,"tyomka: 
No description provided.
  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  ",2019-02-08 14:54:53,2019-02-08 15:04:35,1,12,2
"Issue#3379 Removed @Beta from RangeMap, RangeSet and their implementations #3376",cla: no,,,"tyomka: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed.  ",2019-02-08 15:19:03,2019-02-08 15:24:30,1,12,2
"Issue#3380 Removed @Beta from RangeMap, RangeSet and their implementations #3376","package=collect, status=triaged, cla: yes, P3, type=debeta",,cpovirk,"tyomka: 
No description provided.
  Felk: Any updates on this?  ",2019-02-08 16:25:59,,1,12,7
Issue#3382 Document the JDK 9+ alternative to `Iterators#forEnumeration`,"status=fixed, package=collect, type=api-docs, cla: yes",,netdpb,"Stephan202: 



              The text was updated successfully, but these errors were encountered:
              Stephan202: The JDK 11 build failures are unrelated to this change.  ",2019-02-10 14:49:26,2019-10-02 16:48:51,1,1,5
Issue#3383 Document the JDK 9+ alternative to `MoreObjects#firstNonNull`,"status=fixed, package=base, type=api-docs, cla: yes, P3",,cgdecker,"Stephan202: Analogous to #3382. 



              The text was updated successfully, but these errors were encountered:
              cgdecker: Submitting this internally; it should be synced out soon.  ",2019-02-10 19:23:58,2019-10-02 21:34:36,1,1,5
"Issue#3384 Document the JDK 9+ alternatives to `Preconditions#{checkElementIndex,checkPositionIndexes}`","package=collect, type=api-docs, status=triaged, cla: yes, P2",,kevinb9n,"Stephan202: Analogous to #3382 and #3383. I can imagine these two suggestions will cause some debate, since they have overloads that accept a @Nullable String desc for which there is no counterpart in the standard library. One way to settle the debate could be to benchmark whether the JDK builtins are more efficient. (Objects#checkIndex is annotated @ForceInline and delegates to a @HotSpotIntrinsicCandidate, so it may be.)  kevinb9n: My bigger concern is that it's confusing enough as it is for users to understand and pay attention to the key difference between an ""element index"" and a ""position index"", and one of my goals here was to educate users on that difference and prompt them to choose wisely between the two. It's quite sad that the JDK chose to implement only one of them and not even explain the situation. In all, I don't think I really want to point people that way.  Stephan202: @kevinb9n fully understand. I wonder whether the JDK implementers considered the Guava naming during their implementation process. In any case: feel free to close this PR if/when the verdict is final :)  ",2019-02-11 21:19:00,2020-01-13 21:27:18,1,1,5
Issue#3385 Document the JDK 9+ alternative to `Maps#immutableEntry`,"package=collect, type=api-docs, status=triaged, cla: yes, P2",,kevinb9n,"Stephan202: I think this suggestion is worthwhile for two reasons: 



              The text was updated successfully, but these errors were encountered:
              kevinb9n: (we're merging this one in a sec, thank you for it!)  ",2019-02-11 21:37:20,2019-02-26 19:18:55,1,1,4
Issue#3386 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add Report-To header.
 https://www.w3.org/TR/reporting/ 24f15fd  Remove unused imports and warnings.
 Fixes #3356 3d35188  Reformat with google-java-format
 RELNOTES=N/A 7722bf9  Add missing @override annotations
 492f1a6  Document the retention of listeners added to Guava implementations of ListenableFuture.
 RELNOTES=The retention of listeners added to Guava implementations of ListenableFuture is now documented. 3d56928  Reformat with google-java-format
 RELNOTES=N/A 12168b6  Name the method parameter 'unused' for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn't complain)
 0451f49  Remove @beta from APIs:
 collect io util.concurrent other Fixes #3287
Fixes #3251 (aside from ImmutableRange*, but those whole classes are @beta, anyway)
Addresses the main concerns of #3285 but doesn't cover the broader request
Fixes #3340
Partially addresses #3239 RELNOTES=Removed @Beta from a number of frequently used APIs. 91c249d  Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java's internal encoding.
 a02262d  Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().
 RELNOTES=@CanIgnoreReturnValue removed from Ordering.sortedCopy() and immutableSortedCopy()`. cbbcc98  Make a constructor private.
 (I'm looking into EnumMap stuff for other reasons, and I got to wondering if this was used outside the file. Nope.) 9d01511  Delete WellBehavedMap.
 The bug it worked around was fixed in Java 7:
https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706 And I don't believe it was ever present under Android:
https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146 I haven't looked for the absolute first version ever of GWT, but the still very old GWT file doesn't have the bug, either. Deleting this class will simplify some work I'm doing around our EnumMap usage for j2cl. f836239  Internal GWT change
 cd33465  Automated rollback of changelist cd33465
 *** Original change description *** Internal GWT change b937ab0  Use J2ObjC's @RetainedWith annotation instead of @weak on ImmutableMap.keySet to prevent crashes on iOS.
 TESTED=Created a map inside a autorelease pool and saved a reference to the
keyset. Checked that the keyset functions correctly outside the autorelease
pool. Checked that both the keyset and the map are deallocated by the
autorelease pool when not holding a reference to the keyset. Did this test with
both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>). RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.keySet(). 31ade17  Annotate checkNotNull's input and output as @nonnull.
 We don't want to go down the road of annotating most things @nonnull, as we eventually want to use tools that assume that that's the default. However, it's pretty weird for checkNotNull() to return a @nullable value in the minds of some tools, so let's annotate just that method and see how it goes. GITHUB_BREAKING_CHANGES=N/A
RELNOTES=Annotated checkNotNull's input and output as @NonNull. 68ee322  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.)  ",2019-02-14 19:47:33,2019-02-26 15:39:59,16,219,9
"Issue#3387 Deduplicate common logic in Uninterruptibles class, avoiding allocations","type=enhancement, package=concurrent, status=triaged, cla: yes, P2",,cpovirk,"njhill: I recently came across this discussion around the reason for having duplicated logic in Uninterruptibles, and am offering this as an approach which avoids per-method call allocations and reflection. There is some overhead in terms of class count though, apologies if this was already discounted for that reason. Also related: #1409  netdpb: I'll let @cpovirk comment in more detail, but the number of classes is also a sensitive issue on Android, as well as classloading on static initializers (as you do with static final fields).  cpovirk: There are also some performance concerns, even with more efficient approaches. It's not clear that they would actually matter in practice (or even exist, since I haven't benchmarked -- and probably wouldn't trust myself if I had :)), but, in particular, a large fraction of Future.get calls at Google are actually Futures.getUninterruptibly calls (by way of Futures.getDone), so some of these methods do get called a lot. It's still possible that this is worthwhile, but in practice, we never have to edit the existing code, so I'm not too concerned about duplication from a maintenance perspective.  nick-someone: Thanks for contributing, but I think we'll close this PR for now citing concerns about the class count.  ",2019-02-14 21:54:16,2019-11-05 16:00:33,1,1,5
Issue#3392 CharMatcher: Improving the way it is deprecated,cla: yes,,,"mirraj2: I've updated the documentation to try to provide clearer instructions on ways that people can migrate away from some of the deprecated methods. I also added a method called asciiDigit() because I think it is important to give developers an easy way to handle one of the most common use cases.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  mirraj2: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: I don't think moving the information about alternatives to the deprecation tag is that helpful. isDigit() was never equivalent to 0123456789. And I'm not convinced that asciiDigit() is useful enough to add weight to this method. What might help with the latter is if you had data suggesting how many users would actually use asciiDigit(). I'm closing this PR for now, but feel free to reopen if you have stronger data. Thanks!  ",2019-02-24 16:54:29,2019-03-01 22:49:27,2,1,3
Issue#3393 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add Report-To header.
 https://www.w3.org/TR/reporting/ 504978f  Remove unused imports and warnings.
 Fixes #3356 f0945a2  Reformat with google-java-format
 RELNOTES=N/A 7809097  Add missing @override annotations
 8843b6c  Document the retention of listeners added to Guava implementations of ListenableFuture.
 RELNOTES=Document the retention of listeners added to Guava implementations of ListenableFuture. f6287e1  Reformat with google-java-format
 RELNOTES=N/A 28cff42  Name the method parameter 'unused' for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn't complain)
 0967c79  Remove @beta from APIs:
 collect io util.concurrent other Fixes #3287
Fixes #3251 (aside from ImmutableRange*, but those whole classes are @beta, anyway)
Addresses the main concerns of #3285 but doesn't cover the broader request
Fixes #3340
Partially addresses #3239 RELNOTES=Removed @Beta from a number of frequently used APIs. 068cb90  Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java's internal encoding.
 e7ec537  Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().
 RELNOTES=Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy(). da2895f  Make a constructor private.
 (I'm looking into EnumMap stuff for other reasons, and I got to wondering if this was used outside the file. Nope.) b1933ce  Delete WellBehavedMap.
 The bug it worked around was fixed in Java 7:
https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706 And I don't believe it was ever present under Android:
https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146 I haven't looked for the absolute first version ever of GWT, but the still very old GWT file doesn't have the bug, either. Deleting this class will simplify some work I'm doing around our EnumMap usage for j2cl. 2115c74  Internal GWT change
 1d49ade  Automated rollback of commit 1d49ade
 *** Original change description *** Internal GWT change 46a2123  Use J2ObjC's @RetainedWith annotation instead of @weak on ImmutableMap.keySet
to prevent crashes on iOS.
 TESTED=Created a map inside a autorelease pool and saved a reference to the
keyset. Checked that the keyset functions correctly outside the autorelease
pool. Checked that both the keyset and the map are deallocated by the
autorelease pool when not holding a reference to the keyset. Did this test with
both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>). RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.keySet(). 76c9545  Annotate checkNotNull's input and output as @nonnull.
 We don't want to go down the road of annotating most things @nonnull, as we eventually want to use tools that assume that that's the default. However, it's pretty weird for checkNotNull() to return a @nullable value in the minds of some tools, so let's annotate just that method and see how it goes. RELNOTES=Annotated checkNotNull's input and output as @NonNull. 63d0b31  Document the JDK 9+ alternative to `Maps#immutableEntry`
 Fixes #3385 998858f  Modernize book reference.
 7eafede  Create constants for the SourceMap header
 None of the tests like this header name, so each required some workarounds. RELNOTES=Add the SourceMap header to HttpHeaders 81f191e  Internal GWT change
 db6ada7  Use J2ObjC's @RetainedWith annotation instead of @weak on ImmutableMap.values
to prevent crashes on iOS.
 TESTED=Created a map inside an autorelease pool and saved a reference to the
values collection. Checked that the values collection functions correctly
outside the autorelease pool. Checked that both the values collection and the
map are deallocated by the autorelease pool when not holding a strong reference
to the values collection. Did this test with ImmutableMap.of(<2 entries>) and
ImmutableMap.copyOf(<EnumMap with 2 entries>). RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.values(). 05ac563  Fix Javadoc breakage under JDK11 canary.
 https://bugs.openjdk.java.net/browse/JDK-8212233
https://bugs.openjdk.java.net/browse/JDK-8193030 d8bdef5  Remove GWT emulations that are no longer needed as of GWT 2.8.2.
 RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher. be02df5  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  kevinmost: Annotate checkNotNull's input and output as @nonnull Hi. Just curious about the motivation behind this decision (well, behind part of this decision). I totally agree that ""it's pretty weird for checkNotNull() to return a @nullable value in the minds of some tools"", and am in favor of checkNotNull() returning a non-null value. I'm just unclear on why the input is considered @NonNull now instead of @Nullable. Maybe I'm misusing it, but I use checkNotNull() as a fluent assertion on expressions where the compiler can't infer the nullability, but I know it's @NonNull. For my uses, the ideal signature would be:  ",2019-02-26 18:54:36,2019-02-26 19:18:55,23,249,14
Issue#3398 Fixed some links,"status=triaged, cla: yes",,,"LorenzNickel: Updated invalid links where I could find an alternative, removed others 



              The text was updated successfully, but these errors were encountered:
              ",2019-03-07 20:46:00,2019-05-05 18:02:36,9,9,3
Issue#3399 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Use J2ObjC's @RetainedWith annotation instead of @weak on
ImmutableMap.entrySet() to prevent crashes on iOS.
 TESTED=Created a map inside an autorelease pool and saved a reference to the
entry set. Checked that the entry set functions correctly outside the
autorelease pool. Checked that both the entry set and the are deallocated by the
autorelease pool when not holding a strong reference to the entry set. Did this
test with the following constructions to cover all entry set implementations: RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet(). c4eef3f 



              The text was updated successfully, but these errors were encountered:
              ",2019-03-08 16:47:34,2019-03-08 19:25:12,1,7,3
Issue#3404 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Lazily allocate CompactHash backing arrays on first write
 Empty maps/sets are extremely common. Lazily allocating the backing arrays can
save hundreds of KB of heap and reduce load on the garbage collector. While here: Memory savings before first write (bytes): 801e018  ",2019-03-13 00:38:58,2019-03-20 17:01:52,1,16,4
Issue#3407 Merge pull request #1 from google/master,cla: no,,,"rthangam: Merge from latest version  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Not sure what this PR is.  ",2019-03-19 07:34:48,2019-03-20 17:01:18,1,0,3
Issue#3408 Initialize uninterruptibles with current interrupt state of thread,"type=enhancement, package=concurrent, status=triaged, cla: yes, P3",cpovirk,,"belugabehr: If a thread comes into Uninterruptibles already in an interrupted state, the first call to the target action will immediately fail with InterruptedException.  Initialize the 'interrupted' flag with the current state of the thread so that the first attempt can complete (assuming the thread is not interrupted again immediately after the initialization).  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  belugabehr: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  belugabehr: @cpovirk Any thoughts on this PR? Thanks!!  cpovirk: I believe we had felt that interruption was the less common case, so it wasn't worth sacrificing performance in the more common case by reading the interrupt bit. That said, I don't think we have real-world numbers about how much more common the common case is (nor about the relative cost of reading the interrupt bit vs. throwing an exception, though that would at least be easier to measure). Without such numbers, it's hard to justify making changes.  belugabehr: @cpovirk Thanks for the review and consideration.  We can close this PR then.  ",2019-03-19 14:01:26,2020-01-06 21:03:40,1,1,5
Issue#3410 Guava - debeta and spring clean,"type=enhancement, status=triaged, cla: yes",,cpovirk,"AnnotationThomas: First of all this is my first project on Guava so I just did the simple part, removing @beta's and some deprecated methods that should've been removed earlier.
If there is anything incorrect to this PR please reply and feel free to give some feedback.
The de-@beta stuff will close several issues already: #3403, #3360, #3253, (#3362 is also part of 3360).  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  AnnotationThomas: I signed it  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ChristianCiach: I am not a Googler, but I can't see this PR being merged. You've reformatted the entire source code, so there is no way to tell what was actually changed. In general, pull requests should touch as little surrounding code as possible. Because of all this reformatting, the diff is useless. I cannot check if the removed deprecated methods are actually allowed to be removed. According to the guava philosophy, deprecated api will not be removed anymore unless it is marked as beta: APIs without @beta will remain binary-compatible for the indefinite future. (Previously, we sometimes removed such APIs after a deprecation period. The last release to remove non-@beta APIs was Guava 21.0.) Even @deprecated APIs will remain (again, unless they are @beta). We have no plans to start removing things again, but officially, we're leaving our options open in case of surprises (like, say, a serious security problem).  ronshapiro: Until we've reviewed each of these tickets, I think it's worth holding off on this PR. We'll also possibly make those changes one-by-one.  cgdecker: We will not be merging this. Aside from the unnecessary reformatting, removing @Beta from any API is something we need to make a decision on on a case-by-case basis (we should be prioritizing this higher than we have, but actually removing the annotation is the easy part). And @Deprecated @Beta APIs that we haven't removed yet mostly haven't been removed for internal reasons; we'll get to them.  ",2019-03-21 16:10:32,2019-05-24 15:49:24,4,4,6
"Issue#3412 Update checker-qual to 2.8.0, because it is now OSGi compatible","type=enhancement, status=triaged, cla: yes, P2",,cgdecker,"travishaagen: Update checker-qual to 2.8.0, because it is now OSGi compatible. Prior to this fix, an OSGi application that uses Guava would encounter OSGi compatibility failures. See also typetools/checker-framework#2281  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  travishaagen: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  travishaagen: 2.8.0 was released, so updated the PR to use that version instead of 2.7.0  travishaagen: @cgdecker Can this be merged? This is a major problem for codebases that use OSGi.  WilliamCollishaw: I believe this can be closed due to updating to 2.8.1 in #3463  cgdecker: Yep, this has been addressed.  ",2019-03-22 14:10:03,2019-05-20 19:22:00,1,1,6
Issue#3413 Rejuvenate log levels,"package=testing, status=triaged, cla: no",,kluever,"khatchad: We are in the process of evaluating our research prototype Eclipse plug-in that ""rejuvenates"" log statement levels based on how ""interesting"" the enclosing methods are to the developers. The assumption is that methods that are worked on more and more recently by developers should have higher log levels (e.g., INFO as compared to FINEST). Our end goal is to reduce information overload, as well as alleviate developers from manually making log level changes. The transformation decision is made by analyzing the ""degree of interest"" (DOI) values of enclosing methods for logging invocations. DOI value is a kind of real number for a program element which shows how developers are interested in it. It is computed from the interaction events between developer and element, such as developer edits the element. In this project, we compute the DOI using the project's git history. We are looking for feedback on our tool from developers. If you can, we would appreciate if you can comment on each of the transformations in the case that this PR is not accepted. Of course, we would also love to contribute to your project. Here is a list of DOI values for enclosing methods of transformed log invocations in your projects: This pull request contains one manual change where we changed (please see below) adjusted a test case to reflect our change. This is not part of the output of our tool but simply a necessary change to make the test pass. We found a bug in the same test case where only log messages having level INFO or above are tested. Now, all levels are tested. This was also a manual fix. We have several settings to analyze these DOI values. The settings we are using in this pull request are: Head: 74fc49f We can vary these settings and rerun our if you desire. For your information, we also generate a list of DOI value intervals. Given this list, our tool could rejuvenate log levels by knowing which intervals the DOI values of enclosing methods for log invocations are in:  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  yimingtang07: I've signed the CLA.  ronshapiro: We can't take a look at this until the CLA is signed. Please check the above message to try and resolve this  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  khatchad: I confirm that I am ok with my commits being contributed to this project.  yimingtang07: I confirm that I am ok with my commits being contributed to this project.  khatchad: @ronshapiro We have followed the directions of the @googlebot. Thank you for considering our PR.  khatchad: Superceded by #3435 to workaround CLA bot issue.  ",2019-03-24 21:32:27,2019-04-04 18:28:30,5,4,5
Issue#3428 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.
 50eddd0  Adds constants for prefetch headers.
 Of note, X-Purpose is NOT just a google specific header as previously defined. https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F https://developers.google.com/web/updates/2018/07/nostate-prefetch RELNOTES=Adds constants for prefetch headers. 966879f  Implement GraphBuilder.immutable().
 RELNOTES=graph: Added GraphBuilder.immutable() for building immutable graphs in a fluent way 7998dc4  Add FluentFuture.from(FluentFuture) factory method.
 This follows the steps of FluentIterable.from(FluentIterable) and other
‚Äúmigration aid‚Äù methods that are deprecated from inception and are just here to
point out code that is no longer needed. RELNOTES=Added deprecated FluentFuture.from(FluentFuture) to point out redundant code. 2d06002  Use byte[]/short[]/int[] for hashtable depending on size
 The hashtable is stored as an Object and cast to the correct type using
instanceof checks. Memory:
byte[] sizes (2-89): 12-41% better (average: 32% better)
short[] sizes (90-22937): 20-29% better (average: 24% better)
int[] sizes (22938+): unchanged Runtime on a Pixel 2:
createAndPopulate: 9% better to 6% worse (average: 4.3% better)
get: 1% better to 8% worse (average: 3.5% worse)
iterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse)
iterateWithEntrySet: unchanged (doesn't use hashtable) Effects on ImmutableMapProGuard:
59105 bytes => 60369 bytes (+2.1%)
21 classes => 21 classes (0%)
200 methods => 201 methods (+0.5%) Effects on ImmutableBiMapProGuard:
68893 bytes => 70235 bytes (+1.9%)
25 classes => 25 classes (0%)
232 methods => 233 methods (+0.4%) b1a1139  Add ValueGraphBuilder.immutable().
 RELNOTES=graph: Added ValueGraphBuilder.immutable() for building immutable value graphs in a fluent way 79e0a57  Remove unnecessary Type parameter
 6f0b66d  Add NetworkBuilder.immutable().
 RELNOTES=graph: Added NetworkBuilder.immutable() for building immutable networks in a fluent way a812af7  ",2019-03-29 13:37:13,2019-03-29 14:47:43,8,28,6
Issue#3431 Moe Sync,"cla: yes, internal-sync",jbduncan,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove unused configuration of load factor
 This allows removal of loadFactor/threshold which saves 8 bytes per object. While here: Shallow object size (bytes): 062afc3  jbduncan: Oops, I believe either this @param should be renamed to expectedSize or the corresponding parameter should be named back to capacity. :)  ronshapiro: good catch!  ",2019-04-01 18:35:22,2019-04-02 14:07:05,1,8,4
Issue#3433 DoubleUtils.bigToDouble replaced with BigInteger.doubleValue,"status=triaged, type=other, package=math, cla: yes, P2",,netdpb,"Klapsa2503: 
No description provided.
  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Klapsa2503: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: Per discussion on #3432 I think we'd prefer to keep the implementations the same between the branches if there's no other compelling reason to. Thank you for suggesting the changes though!  ",2019-04-03 09:26:12,2019-11-01 17:56:43,2,4,5
Issue#3434 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix @param tag as per https://github.com//pull/3431#pullrequestreview-221507095
 cc @jbduncan c691708 



              The text was updated successfully, but these errors were encountered:
              ",2019-04-03 14:58:23,2019-04-05 17:26:48,1,2,3
Issue#3435 Rejuvenate logging statement levels,"status=research, status=triaged, type=other, package=general, cla: yes, P3",,,"khatchad: We are in the process of evaluating our research prototype Eclipse plug-in that ""rejuvenates"" log statement levels based on how ""interesting"" the enclosing methods are to the developers. The assumption is that methods that are worked on more and more recently by developers should have higher log levels (e.g., INFO as compared to FINEST). Our end goal is to reduce information overload, as well as alleviate developers from manually making log level changes. The transformation decision is made by analyzing the ""degree of interest"" (DOI) values of enclosing methods for logging invocations. DOI value is a kind of real number for a program element which shows how developers are interested in it. It is computed from the interaction events between developer and element, such as developer edits the element. In this project, we compute the DOI using the project's git history. We are looking for feedback on our tool from developers. If you can, we would appreciate if you can comment on each of the transformations in the case that this PR is not accepted. Of course, we would also love to contribute to your project. Here is a list of DOI values for enclosing methods of transformed log invocations in your projects: This pull request contains one manual change where we changed (please see below) adjusted a test case to reflect our change. This is not part of the output of our tool but simply a necessary change to make the test pass. We found a bug in the same test case where only log messages having level INFO or above are tested. Now, all levels are tested. This was also a manual fix. We have several settings to analyze these DOI values. The settings we are using in this pull request are: Head: 74fc49f We can vary these settings and rerun our if you desire. For your information, we also generate a list of DOI value intervals. Given this list, our tool could rejuvenate log levels by knowing which intervals the DOI values of enclosing methods for log invocations are in: This supersedes #3413 to workaround CLA bot issue. 



              The text was updated successfully, but these errors were encountered:
              netdpb: Guava is a mature, low-level, general-purpose library. Because of its maturity, much of it is quite stable. It looks like your prototype took that to mean that all logging statements should be at FINEST, but I'm not sure how well your interesting theory tying logging levels to code stability applies. I wonder whether your research is intended to apply more to application/service code than to general-purpose library code.  khatchad: @netdpb Thank you for this feedback! That is a really interesting insight. You may be right! We will certainly consider it.  netdpb: @khatchad I notice that the DOI values for all those logging statements are 0. Maybe you can use that in your heuristic. I'm closing this PR for now, since I'm not sure that the suggestions apply. Feel free to reopen or to reach out to us for more discussion about your interesting project.  khatchad: Thanks again @netdpb. You may want to consider the testing bug we found above in case you ever lower the levels of logs you are testing.  ",2019-04-04 18:27:53,2019-04-05 16:53:27,3,4,3
Issue#3436 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Bumped the FPP to prevent OOMs on JDK 11.
 8acb5b9 



              The text was updated successfully, but these errors were encountered:
              ",2019-04-08 13:55:18,2019-04-10 02:45:42,1,2,3
Issue#3438 Use optimized for loop indexOf(),"status=triaged, type=performance, package=primitives, cla: yes, P3",,,"manu-p-1: Added length locally to loop. Ultimately depends on compiler optimization. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: For something like this, we'd want a benchmark (ideally with JMH, even though we've used Caliper) before making the code longer. Writing a benchmark probably isn't worth the effort unless you're seeing this as a bottleneck in an app, but that's your call.  manu-p-1: Hey @cpovirk ! I can go ahead and write a benchmark (why not) and post the result here later on!  JakeWharton: If you're already going this far, why not compute the subtraction only once?  manu-p-1: You are right. I'm quite interested in seeing the results  manu-p-1: Super negligible performance diff  ",2019-04-08 16:03:20,2019-07-05 01:58:21,1,1,4
Issue#3439 Upgrade error_prone,cla: yes,,cpovirk,"elharo: to sync with the version protobuf is now using  cpovirk: Thanks. Would going all the way to 2.3.3 be worse for your dependency-agreement efforts?  elharo: For weird and possibly arbitrary reasons, it's not quite as problematic if Guava jumps ahead of the pack; but it's still better if everyone can agree. I picked 2.3.2 only because protobuf already shipped with that version. I am thinking about how we might get some approximation of ONE_VERSION_ONLY on Github, but it's tricky.  ",2019-04-10 12:02:27,2019-04-12 16:18:51,1,1,3
Issue#3440 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add websocket headers to HTTP header listings.
 This adds five headers, as defined in RFC 6455: Sec-WebSocket-Accept,
Sec-WebSocket-Extensions, Sec-WebSocket-Key, Sec-WebSocket-Protocol, and
Sec-WebSocket-Versions. This also changes the C++ per-header unit test so that it can recognize the
alternate capitalization of WebSocket, instead of adding five special cases. The
Go and Java versions use the ""Websocket"" capitalization instead. 78fe310  ",2019-04-10 15:56:12,2019-04-10 17:48:13,1,2,3
Issue#3441 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Update GraphBuilder documentation with option of building an immutable graph
 9b01341  Simplify graph.PackageSanityTests by applying the new immutable graph builder.
 c6c6c73  Upgrade error_prone
 Fixes #3439 0e928fc  ",2019-04-12 13:40:18,2019-04-12 16:18:51,3,6,4
Issue#3445 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove obsolete parent per https://github.com/sonatype/oss-parents
and Fixes https://github.com//issues/2756
 0bc019e  ",2019-04-16 15:04:43,2019-04-16 21:58:53,1,2,3
Issue#3446 RateLimiter: Expose CanAcquire and QueryEarliestAvailable Methods,"type=enhancement, package=concurrent, status=triaged, cla: yes, P4","Stephan202, MikeDombo",,"StephenFlavin: In reference to #3044 this PR exposes the methods which are acquire uses internally to check if a RateLimiter can be acquired and additionally a method which returns the time until the next permit is available microsToNextPermit(). My reasoning for using these methods is I would like use microsToNextPermit() as a way to sort a List of objects that have a RateLimiter using comparable  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  StephenFlavin: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  Stephan202: W.r.t. the suggested use case: the shown compareTo is not guaranteed to adhere to the method's general contract. Consider comparing a rate limiter to itself: the result may be 0, but if the clock advances between two invocations of microsToNextPermit, the result will be positive.  StephenFlavin: @Stephan202 what's the merge policy for these changes, I've just rebased on master to fix the build  Stephan202: @StephenFlavin I'm not with Google, so I cannot say when or whether these changes will be accepted. Looking at the file's history, I guess @cpovirk is most likely to have an opinion on these matters :)  StephenFlavin: I've updated this PR to use Durations however I kept the footprint small and avoided the larger refactor.
I'm happy to spend the time doing the refactor if it's required to get this merged.
I would appreciate your thoughts @cpovirk  stunnamaneee:  ",2019-04-17 10:46:20,,3,2,7
Issue#3447 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Override a method instead of special-casing it.
 f6bd487  Mitigate https://github.com//issues/3223 by guessing that Sets are already deduplicated and making ""half and half"" expectations about un-duplicated inputs in ImmutableSet creation.
 RELNOTES=Mitigate #3223. 506432b 



              The text was updated successfully, but these errors were encountered:
              ",2019-04-18 19:51:43,2019-04-29 15:41:43,2,3,5
Issue#3448 Add java.util.UUID to ArbitraryInstances,"package=testing, type=addition, status=triaged, cla: yes",cpovirk,cpovirk,"petedmarsh: I hope this counts as a trivial change. This adds java.util.UUID to ArbitratyInstances - I have recently been working on a project where we used UUID and NullPointerTester and we've often had to set a default manually, this should avoid that.  petedmarsh: The build failure seems to be a problem with the build/travis rather than this change (it happens with other PRs too), but happy to make changes if that's not the case.  ",2019-04-27 18:26:41,2019-05-08 14:35:08,1,2,4
Issue#3449 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Override a method instead of special-casing it.
 75e7b29  Mitigate https://github.com//issues/3223 by guessing that Sets are already deduplicated and making ""half and half"" expectations about un-duplicated inputs in ImmutableSet creation.
 RELNOTES=Mitigate #3223. f1aa0f6  Update ValueGraphBuilder documentation with option of building an immutable graph.
 5879ed3  Update NetworkBuilder documentation with option of building an immutable graph.
 cdb288c  Enable GoodTime-API
 b34102f  Fix misspelled Sec-WebSocket-Version header.
 The correct name is Sec-WebSocket-Version, not Sec-WebSocket-Versions. 86ffa6e  Match the casing of the WebSocket HTTP headers to the RFC directly.
 RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly. 517b596  Update Public Suffix data.
 646d0e0  Remove outdated references to the ""next release of Guava"".
 f2591b5  Update to Truth 0.44.
 b61237c  Migrate from isNotSameAs to isNotSameInstanceAs.
 The two behave identically, and isNotSameAs is being removed. 8c4225f 



              The text was updated successfully, but these errors were encountered:
              ",2019-04-29 15:19:18,2019-04-29 15:41:56,11,34,11
Issue#3453 Add testlib readme,"package=testing, status=triaged, type=documentation, cla: yes",,cpovirk,"elharo: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2019-05-04 16:53:29,2019-10-02 17:48:45,2,1,4
Issue#3454 Upgrade maven compiler plugin,"status=triaged, cla: yes",,,"WilliamCollishaw: Package upgraded from 3.8.0 to 3.8.1  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  WilliamCollishaw: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Thanks, this should be submitted internally soon and will then be synced out.  ",2019-05-05 05:50:53,2019-05-08 14:35:08,3,2,3
Issue#3455 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fixed some links.
 The comparisons to the Android Hash* classes haven't been accurate since at least CL 81367572, so I've removed them entirely. Fixes #3398 1dc514b  Migrate from assertThat(foo).named(""foo"") to assertWithMessage(""foo"").that(foo).
 (The exact change is slightly different in some cases, like when using custom subjects or check(), but it's always a migration from named(...) to [assert]WithMessage(...).) named(...) is being removed. This CL may slightly modify the failure messages produced, but all the old information will still be present. e70a2f9  Migrate from is(Not)SameAs to is(Not)SameInstanceAs.
 They behave identically, and the old names are being removed. Open-source note: The new methods are available in Truth as of version 0.44. c192567  A few more doc tweaks, caught by @jbduncan in f2591b5
 414084c  Remove CheckedFuture from Guava.
 RELNOTES=Removed deprecated CheckedFuture and related utilities. cae1b91  Migrate from assertThat(foo).named(""foo"") to assertWithMessage(""foo"").that(foo).
 (The exact change is slightly different in some cases, like when using custom subjects or check(), but it's always a migration from named(...) to [assert]WithMessage(...).) named(...) is being removed. This CL may slightly modify the failure messages produced, but all the old information will still be present. 1f5c478 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-05-05 16:17:26,2019-05-05 18:02:36,6,87,4
Issue#3456 Upgrade maven dependency plugin - security upgrade,"status=triaged, cla: yes",,cgdecker,"WilliamCollishaw: Maven dependency plugin has a dependency on plexus-archiver.
Plexus-archiver is vulnerable to the Zip Slip vulnerability (CVE-2018-1002200) in versions prior to 3.4.1 & 3.6.0 (reference).
Maven-dependency-plugin version 3.1.1 upgrades to plexus-archiver 3.6.0
Versions bypassed: 



              The text was updated successfully, but these errors were encountered:
              cgdecker: Thanks, this should be submitted internally soon and will then be synced out.  ",2019-05-05 19:54:27,2019-05-07 15:02:57,1,2,3
Issue#3459 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Upgrade maven dependency plugin.
 Fixes #3456 2ef701f 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-05-07 14:21:31,2019-05-07 15:02:57,1,2,3
Issue#3463 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add app.link to the Public Suffix List.
 This is a temporary solution to stop app.link affiliated websites being grouped together in the Password Manager UI. We will reach out to the owners of app.link and work with them to update the public version of the PSL. 8268487  Add java.util.UUID to ArbitraryInstances
 Fixes #3448 ad3d9ad  Upgrade compiler plugin.
 Fixes #3454. 7092295  Update versions of some Guava dependencies.
 Fixes #3405 ed830d3 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-05-08 13:56:20,2019-05-08 14:35:09,4,8,6
Issue#3465 Define project build source encoding as UTF-8,"status=triaged, cla: yes",,ronshapiro,"WilliamCollishaw: At build time the following warning appears:
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!  Defining a project build source encoding removes the warning and can prevent platform dependent issues in the future. Fix summary by maven here and here  ronshapiro: Thanks for all of the fixes!  ",2019-05-09 23:38:46,2019-05-28 14:48:48,2,2,3
Issue#3466 Upgrade maven source plugin from 2.1.2 to 3.1.0,"status=fixed, cla: yes, P3",,cgdecker,"WilliamCollishaw: Upgrade maven source plugin from 2.1.2 to 3.0.1
Define the version as a maven variable due to the version being referenced more than once
3.0.1 is the latest version and has been available since June, 2016 so appears very stable.
EDIT:
Upgrade maven source plugin from 2.1.2 to 3.1.0
After three years with no change, 3.1.0 was release with minor changes. Versions bypassed:  WilliamCollishaw: Updated original description after bumping up one more version  cgdecker: Submitting this change internally, should be synced out later this week.  ",2019-05-10 04:40:04,2019-10-02 21:34:36,6,2,4
Issue#3470 ArrayTable - Implement eraseRow and eraseColumn,"type=addition, package=collect, status=triaged, cla: yes, P4",,,"WilliamCollishaw: Work completed fulfills a //TODO left in the ArrayTable class:
// TODO(jlevy): Add eraseRow and eraseColumn methods? 



              The text was updated successfully, but these errors were encountered:
              ronshapiro: FYI that we'll want to API review this to see how common this would be used.  erikgarduo: Why the issue is still open ?  ",2019-05-13 04:28:51,,9,4,6
"Issue#3471 Fix ""Apache License, Version 2.0"" spelling","status=triaged, cla: yes",,ronshapiro,"don-vip: There are many Java libraries licensed under ""Apache License, Version 2.0"" that do not use its official spelling.
This causes issues like https://issues.apache.org/jira/browse/MPIR-382: with every library defining its own spelling, it's difficult in large projects to have a clear view of all licenses in use.
This PR changes the license spelling to the official one, as advised by Maven developers.  ronshapiro: Thanks! I'll import this  WilliamCollishaw: This license naming format is used in multiple pom files.
  don-vip: Thanks! I have amended my commit.  ronshapiro: Whoops I already submitted this. I'll submit another.  ronshapiro: As an aside - what if you grouped licenses based on URL and not based on title? Wouldn't that dedupe well?  ",2019-05-13 21:12:18,2019-05-28 14:48:48,1,4,4
Issue#3472 change keyToKeyList from HashMap to LinkedHashMap,"package=collect, status=invalid, cla: no",,kluever,"aikawarazu: in  constructor method ,keyToKeyList was set as HashMap ,keyToKeyList should keep insertion-order   .
like in readObject()  method do : keyToKeyList = Maps.newLinkedHashMap();  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  lowasser: Can you include a test of the public API that fails before and passes after this change?  ronshapiro: Please make sure to sign the CLA - without that, we cannot accept any contributions.  cgdecker: The CLA isn't signed and no rationale was provided for making this change, so I'm closing it.  ",2019-05-14 06:11:21,2019-10-02 19:31:08,1,1,6
Issue#3474 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration).
 #goodtime RELNOTES=Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration). dcb5d43  Add Queues.drain(BlockingQueue, Collection, int, Duration) and drainUninterruptibly(BlockingQueue, Collection, int, Duration).
 RELNOTES=add Duration-based Queues drain methods. 5963112  Add a new header field ""CDN-Loop"" to httputils.
 More details: https://tools.ietf.org/html/rfc8586 RELNOTES=Add CDN-Loop header to library according to RFC8586. d9f85b4  Remove app.link from the Public Suffix List.
 8fa5570  ",2019-05-14 21:43:13,2019-05-15 17:04:39,4,10,4
Issue#3475 Merge pull request #1 from google/master,cla: no,,,"runzhigege: Êõ¥Êñ∞ 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ronshapiro: We can't view this without having you sign the CLA. But given that github says there are zero files changed, it looks like this is a mistake. If not, please comment and we'll reopen  ",2019-05-16 07:57:05,2019-05-20 17:55:12,2,0,3
Issue#3476 Upgrade Maven Javadoc Plugin to 3.1.0,"status=triaged, cla: yes",cpovirk,ronshapiro,"WilliamCollishaw: Upgrade Maven Javadoc Plugin from 3.0.1 to 3.1.0
Additionally added wildcard syntax to the list of excluded package names due to failing without it after the upgrade Comment from @njhill in PR #3370 notes a javadoc plugin issue with JDK 11 that should be resolved in this most recent version.  ronshapiro: thanks! I'll import this shortly!  cpovirk: This PR produces a change in behavior: With this PR applied, the generated Javadoc contains entries for com.google.common.base.internal, com.google.thirdparty.publicsuffix, and jdk. Perhaps we need the .* only when that exact package doesn't exist? Maybe you can find a way that works, but it feels unfortunate to have to further hardcode which packages exist. I guess we may need to cross this bridge eventually, unless we can hope that a future change to the Maven Javadoc Plugin will undo this change?  WilliamCollishaw: Good catch, it looks like I can use the wildcard :* instead of .* which will exclude those exact packages, reference.
I will try test this later.  WilliamCollishaw: Good catch, it looks like I can use the wildcard :* instead of .* which will exclude those exact packages, reference.
I will try test this later. Please ignore this comment, i misread the documentation  WilliamCollishaw: @cpovirk this change in behavior is fixed in #3478  WilliamCollishaw: Butchered this branch, reopened new PR #3478  ",2019-05-17 00:02:22,2019-05-21 05:46:36,3,4,4
Issue#3478 Upgrade Maven Javadoc Plugin from 3.0.1 to 3.1.0,"type=enhancement, status=triaged, cla: yes, P2, platform=java11",,,"WilliamCollishaw: Recreated PR from #3476
Upgrade Maven Javadoc Plugin from 3.0.1 to 3.1.0
Additionally added wildcard syntax to the list of excluded package names due to failing without it after the upgrade Comment from @njhill in PR #3370 notes a javadoc plugin issue with JDK 11 that should be resolved in this most recent version. The functionality as described in the excludePackageNames documentation  does not work as explained which did previously work in 3.0.1. I raised MJAVADOC-605, which duplicated MJAVADOC-584 explaining the issue and have included a work around for the issue which significantly increased the size of the excludePackageNames list.  netdpb: Cool. Merging internally.  cpovirk: Yes, thank you!  qingliaowu: Cool  ",2019-05-21 05:45:33,2019-05-28 14:48:48,1,4,5
Issue#3481 Fix javadoc links in the Graph package.,"type=api-docs, status=triaged, status=in-progress, cla: yes, package=graph",,netdpb,"WilliamCollishaw: The following warning was observed when building with JDK 8: Did not edit the ImmutableTable link due to it being fully functional in JDK 11 and it was previously discussed in #2908 The resolved links were not functional in either JDK 8 or 11 prior to this fix. 



              The text was updated successfully, but these errors were encountered:
              netdpb: Thanks!  jrtom: As the person who wrote the Javadoc, thanks for catching that.  :)  WilliamCollishaw: @ronshapiro the author for this PR and #3478 looks wrong.
 Also Github doesn't recognize this account as the author, #3465 looks correct though :)
Thanks for the merges.  ronshapiro: Looks like @netdpb used the wrong syntax for this. I'm not sure if there's anything we can do to retroactively fix this :-/  WilliamCollishaw: Looks like @netdpb used the wrong syntax for this. I'm not sure if there's anything we can do to retroactively fix this :-/ It can be done with a rebase (reference). Not sure how much work that is on your end though :)  netdpb: I'm sorry about that, @WilliamCollishaw.  WilliamCollishaw: I'm sorry about that, @WilliamCollishaw. No worries  ",2019-05-24 06:16:49,2019-05-28 14:48:48,1,6,5
Issue#3482 RFC1123 Compliant InternetDomainName Test Cases,cla: yes,,,"WilliamCollishaw: RFC1123 compliant InternetDomainName test cases Add tests to prove URLs with leading digits are valid and containing only digits are valid.
#1872 was resolved at some point from 2014 to now without the issue getting closed. This PR adds test cases proving this issue can be closed. Some sample real domains from related to these tests would be www.9gag.com and www.9292.nl 



              The text was updated successfully, but these errors were encountered:
              WilliamCollishaw: @cpovirk I believe #1872 can be closed now  frank-dspeed: LGTM +1  ",2019-05-25 17:08:02,2019-06-03 15:25:52,2,2,3
Issue#3483 Replace maven prerequisites with the enforcer plugin,cla: yes,,,"WilliamCollishaw: As of Maven version 3.5 the prerequisites tag was deprecated. Adds minimum required maven and java version into the parent poms which gets inherited by all children. The deprecated prerequisites tag does not get inherited by children (reference) Additionally bump the minimum maven version requirement from 3.0.3 to 3.0.5 to prevent the vulnerable version 3.0.4 ever being used. Sample error messages when invalid versions are used: In both cases the build will fail. Update specific Java version can be specified, for example the following would require Java 8 update 211:
<version>1.8.0-211</version>  ",2019-05-25 20:01:35,2019-06-03 15:25:53,2,2,2
Issue#3484 Update documentation to refer correct method name.,cla: yes,,,"AnuragPorwal: https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#getOrDefault-java.lang.Object-V-  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  AnuragPorwal: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  AnuragPorwal: Fixed in 1b6e406 .
Not required anymore.  ",2019-05-26 04:41:41,2019-05-28 23:00:54,1,1,2
Issue#3485 Clarify behavior of `ImmutableList#copyOf` for null argument.,cla: yes,,,"AnuragPorwal: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ljacqu: Afaik this is the behavior of all ImmutableCollection types. The class javadoc on ImmutableList explicitly refers to the ImmutableCollection which mentions this at the top. So these changes don‚Äòt seem necessary.  cpovirk: The factories are tested by other automated null tests, so let's not add more tests. The existing doc is trying to say that the methods reject null elements, but it's saying it poorly, so thanks for raising this. How about this...? That skips mentioning that elements itself might be null, but we always skip that, preferring to annotate the parameters that can be null with @Nullable. (Otherwise, nearly all of our methods would have @throws NullPointerException if x, y, or z is null.)  ",2019-05-26 07:06:57,2019-06-06 15:06:20,2,1,4
Issue#3486 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add a link back to the goodtime rate bug.
 5750fb6  Copy Durations.saturatedToNanos(Duration) to package-private c.g.c.u.c.Internal so it can be used by the concurrent package (and in Guava).
 #goodtime 568cbb6  Tighten the GoodTime suppression locations in RateLimiter.
 #goodtime 0df55a9  Add Duration-based overloads to Uninterruptibles.
 #goodtime RELNOTES=Add Duration-based overloads to Uninterruptibles. e194e75  Always complete TimeoutFuture, even if toString() throws
 6c09c17  Add Duration-based overloads to MoreExecutors.
 #goodtime RELNOTES=Add Duration-based overloads to MoreExecutors. e2da132  Add Duration-based overloads to FluentFuture.
 #goodtime RELNOTES=Add Duration-based overloads to FluentFuture. 7f5390d  Add Duration-based overloads to Futures.
 #goodtime RELNOTES=Add Duration-based overloads to Futures. 070e07d  Add Duration-based overloads to AbstractScheduledService.
 #goodtime RELNOTES=Add Duration-based overloads to AbstractScheduledService. e7a7a1f  Add Duration-based overloads to Service.
 #goodtime RELNOTES=Add Duration-based overloads to Service. 76718f4  Add Duration-based overloads to ServiceManager.
 #goodtime RELNOTES=Add Duration-based overloads to ServiceManager. 6c6edfa  Remove CheckedFuture utilities from util.concurrent.Futures.
 d3dcc67  Add Duration-based overloads to RateLimiter.
 #goodtime RELNOTES=Add Duration-based overloads to RateLimiter. 7aee4f5  Add Duration-based overload to Monitor.
 #goodtime RELNOTES=Add Duration-based overload to Monitor. ac540c4  Define project build source encoding as UTF-8
 Closes #3465 196dd9e  Fix ""Apache License, Version 2.0"" spelling
 There are many Java libraries licensed under ""Apache License, Version 2.0"" that do not use its official spelling.
This causes issues like https://issues.apache.org/jira/browse/MPIR-382: with every library defining its own spelling, it's difficult in large projects to have a clear view of all licenses in use.
This PR changes the license spelling to the official one, as advised by Maven developers. Closes #3471 eb8695c  Fix Streams.zip documentation typo.
 8cc9e91  Add MediaType for ""application/geo+json"".
 via #3243 RELNOTES=Add MediaType for ""application/geo+json"". b47e9ba  Upgrade maven-javadoc-plugin to 3.1.0.
 Fixes #3478. 34b7a1e  Add Cross-Origin-Resource-Policy header name constants.
 Details https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header RELNOTES=Add Cross-Origin-Resource-Policy header to library. 161241d  Fix Javadoc links.
 Fixes #3481 86be2d1  Update documentation to refer correct method name.
 https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#getOrDefault-java.lang.Object-V- RELNOTES=N/A a6f7253  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-05-28 14:06:37,2019-05-28 14:48:49,22,36,6
Issue#3487 Fix Javadoc.,cla: yes,,,"AnuragPorwal: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2019-05-29 15:52:09,2019-06-03 15:25:53,2,1,2
Issue#3489 MapMakerInternalMap - Remove redundant if statement,"type=enhancement, package=collect, status=triaged, cla: yes",,cpovirk,WilliamCollishaw: Null check is redundant  ,2019-06-01 20:17:26,2019-06-03 15:25:53,2,2,4
Issue#3490 Upgrade maven-gpg-plugin to 1.6,cla: yes,,,"WilliamCollishaw: Latest maven-gpg-plugin version has been at 1.6 since 2015. Bumping up to this latest version from version 1.1, released in 2010.
Versions bypassed:  nick-someone: Marking as fixed by e3090f0  ",2019-06-01 20:46:26,2019-06-06 15:10:13,1,2,3
Issue#3492 LocalCache clean up,cla: yes,,,"WilliamCollishaw: Remove two redundant if statements
Removed some unused imports
Comment grammar fixes 



              The text was updated successfully, but these errors were encountered:
              ljacqu: I don‚Äòt really get the point of these changes. To me it seems that this was just the IDE showing up warnings tbh and that it was fixed without really considering if it makes it easier to read or not  nick-someone: I appreciate raising this PR. In the particular circumstances here, I think we'll keep the if conditions as is, as their current structure makes the conditions they intend to check more clear. I will fix the typo for 'accommodate' you raised though, thanks!  ",2019-06-04 06:03:17,2019-06-06 15:22:06,2,2,4
Issue#3495 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove `@Beta` from `setFuture`.
 RELNOTES=Removed @Beta from setFuture. 2c717c0  Upgrade maven-gpg-plugin to 1.6
 Fixes github.com//pull/3490 c10a164  Clarify behavior of `ImmutableList#copyOf` for null argument.
 Fixes #3485 6f655fb  Make the incidentEdges() documentation a little bit more clear.
 b0a0509  Simplify implementation of Graphs.reachableNodes()
 b917492  Make the adjacentNodes() documentation a little bit more clear.
 7a5a43b  Delete deprecated callWithTimeout().
 fa13235  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-06-06 13:54:32,2019-06-06 15:06:20,7,20,6
Issue#3497 Upgrade animal sniffer version to 1.18,"status=triaged, cla: yes",cpovirk,cpovirk,"WilliamCollishaw: Version 1.18 resolves a JDK8 compatibility issue, resource leak and ends support for JDK 7 



              The text was updated successfully, but these errors were encountered:
              WilliamCollishaw: Oops, forgot about the android JDK 7 compilation. Should I remove the upgrade for Android or close PR?  cpovirk: The JDK 7 failure appears to be a case in which Animal Sniffer is catching a real problem (implicit use of ReflectiveOperationException) that it was missing before. That's interesting because I've seen Animal Sniffer catch this problem in the past -- though maybe it was in a different project that was using a newer version? I'll take care of the fix.  cpovirk: Oh, wait: I think what we saw was that Animal Sniffer caught the problem _if a method was called on the ReflectiveOperationException, which is the only scenario in which we'd seen it cause problems in practice. But we reasoned that other references to ReflectiveOperationException could cause problems (maybe for debugging or something) that we just hadn't seen yet, so it's nice that Animal Sniffer detects them now.  ",2019-06-07 04:33:22,2019-06-30 14:58:50,1,2,4
Issue#3498 Remove single character string concatenation - EventBus,cla: yes,cgdecker,cgdecker,"WilliamCollishaw: Minor performance improvement.
Stack Overflow discussion on this optimization 



              The text was updated successfully, but these errors were encountered:
              cgdecker: The performance impact of this is going to be effectively 0; I don't think it's worth making this change.  ",2019-06-07 05:20:06,2019-06-10 15:43:19,1,2,3
Issue#3499 Fix typo in 'testFindClassesToTest_ignoreUnderscores' function name,cla: yes,,kluever,"WilliamCollishaw: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              kluever: Thanks, I'll get this submitted internally shortly.  ",2019-06-08 06:10:26,2019-06-10 14:24:54,1,2,3
Issue#3500 Fix typo in 'stoppingCount' variable name,"status=triaged, cla: yes",cpovirk,cpovirk,"WilliamCollishaw: 
No description provided.
  ",2019-06-08 06:10:53,2019-06-30 14:58:50,1,2,4
Issue#3502 Fixed double slicing ByteSource,"status=triaged, package=io, cla: yes, P3",,cgdecker,"Maxi17: Fixes #3501 However, there is still a problem in this method. If this.offset + this.length > Long.MAX_VALUE, it will overflow. These are 4 possible approaches:  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Maxi17: I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-06-12 15:37:03,,1,2,5
Issue#3505 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing description tags to guava-parent poms.
 We were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. ""Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing"" 6123f09  Fix typo in 'stoppingCount' variable name
 Fixes #3500 9122cef  Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.
 ReflectiveOperationException isn't available on the old versions of Android that we support. As far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do. Prepares for #3497 e86764e  Upgrade animal sniffer version to 1.18
 Fixes #3497 3e3c1f9  Document default values of builder setters.
 46a7e55  Use saturatedToNanos() in CacheBuilder to avoid overflows.
 RELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows. 3b0729d 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-06-17 21:51:42,2019-06-20 01:30:26,6,20,7
Issue#3507 Update Javadoc of UnsignedBytes.java,"status=triaged, cla: yes",,cgdecker,"gokaco: UnsignedBytes min() and max() method treat its parameter as unsigned and returns the least and greatest value also too as unsigned respectively. It should be updated in the Javadoc. Test Case:- Input:- Run it by typing in the terminal:- Output:- 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  gokaco: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. Googlers: Go here for more info. I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: It looks like we do mention unsignedness in the Javadoc of other methods on the class, so this seems reasonable. I'll try to get this submitted internally soon (with a couple small modifications).  ",2019-06-19 11:49:34,2019-10-31 20:40:18,1,1,3
Issue#3510 Moe Sync,"cla: no, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing description tags to guava-parent poms.
 We were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. ""Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing"" 4d0d51a  Fix typo in 'stoppingCount' variable name
 Fixes #3500 c7bf11a  Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.
 ReflectiveOperationException isn't available on the old versions of Android that we support. As far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do. Prepares for #3497 546d084  Upgrade animal sniffer version to 1.18
 Fixes #3497 96a8801  Document default values of builder setters.
 6c5c574  Use saturatedToNanos() in CacheBuilder to avoid overflows.
 RELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows. 8622cd8  Tweaks to the list of Guava features.
 6793309 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-06-20 22:03:10,2019-06-25 20:28:22,7,21,7
Issue#3513 Update .travis.yml,"type=other, cla: no, P3",,,"ghatwala: updating power support. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: Hi @ghatwala. What issue will this change help to resolve?  ghatwala: Hey @netdpb  , we are just trying to check if this package can run regressions on power too .  netdpb: In order for us to consider it, you have to sign the CLA. Please follow the instructions above.  cpovirk: Mass-closing PRs without an accepted CLA. You're welcome to reopen if you get the check to pass. Alternatively, feel free to open a plain issue to describe the change you'd like to see made.  ",2019-06-26 13:23:32,2020-10-05 16:09:44,1,1,4
Issue#3515 Moe Sync,"cla: no, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing description tags to guava-parent poms.
 We were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. ""Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing"" a0a7f8c  Fix typo in 'stoppingCount' variable name
 Fixes #3500 e8e771a  Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.
 ReflectiveOperationException isn't available on the old versions of Android that we support. As far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do. Prepares for #3497 93f55d3  Upgrade animal sniffer version to 1.18
 Fixes #3497 a6be15b  Document default values of builder setters.
 f1fa6fa  Use saturatedToNanos() in CacheBuilder to avoid overflows.
 RELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows. f70d866  Tweaks to the list of Guava features.
 02621ad  Add more @nullables to variadic parameter lists.
 RELNOTES=Add more @nullables to variadic parameter lists. ebe07de  Halve memory consumption when creating a Bloom filter.
 AtomicLongArray(long[]) clones its input, which is a waste when we're passing
in a new array. RELNOTES=Halve VmPeak when creating a Bloom filter. f35a0c3  Use LongMath.saturatedAdd/Subtract in CacheStats.
 Fixes #3503 RELNOTES=avoid overflows/underflows in CacheStats 0a0f357 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-06-27 14:21:26,2019-06-28 10:33:59,10,30,9
Issue#3516 Moe Sync,"cla: no, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing description tags to guava-parent poms.
 We were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. ""Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing"" 3ed8d5a  Fix typo in 'stoppingCount' variable name
 Fixes #3500 8b5ac44  Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.
 ReflectiveOperationException isn't available on the old versions of Android that we support. As far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do. Prepares for #3497 58b5d82  Upgrade animal sniffer version to 1.18
 Fixes #3497 2ce707f  Document default values of builder setters.
 4aa8139  Use saturatedToNanos() in CacheBuilder to avoid overflows.
 RELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows. 4c8d1a9  Tweaks to the list of Guava features.
 8245e94  Add more @nullables to variadic parameter lists.
 RELNOTES=Add more @nullables to variadic parameter lists. 6478f31  Halve memory consumption when creating a Bloom filter.
 AtomicLongArray(long[]) clones its input, which is a waste when we're passing
in a new array. RELNOTES=Halve VmPeak when creating a Bloom filter. 3e65237  Use LongMath.saturatedAdd/Subtract in CacheStats.
 Fixes #3503 RELNOTES=avoid overflows/underflows in CacheStats de78928 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-06-28 11:53:18,2019-06-28 15:26:59,10,30,9
Issue#3518 DO NOT SUBMIT: trying to fix travis,"cla: no, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing description tags to guava-parent poms.
 We were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. ""Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing"" 3ed8d5a  Fix typo in 'stoppingCount' variable name
 Fixes #3500 8b5ac44  Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.
 ReflectiveOperationException isn't available on the old versions of Android that we support. As far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do. Prepares for #3497 58b5d82  Upgrade animal sniffer version to 1.18
 Fixes #3497 2ce707f  Document default values of builder setters.
 4aa8139  Use saturatedToNanos() in CacheBuilder to avoid overflows.
 RELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows. 4c8d1a9  Tweaks to the list of Guava features.
 8245e94  Add more @nullables to variadic parameter lists.
 RELNOTES=Add more @nullables to variadic parameter lists. 6478f31  Halve memory consumption when creating a Bloom filter.
 AtomicLongArray(long[]) clones its input, which is a waste when we're passing
in a new array. RELNOTES=Halve VmPeak when creating a Bloom filter. 3e65237  Use LongMath.saturatedAdd/Subtract in CacheStats.
 Fixes #3503 RELNOTES=avoid overflows/underflows in CacheStats de78928 
 d5c258e 



              The text was updated successfully, but these errors were encountered:
              googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-06-28 13:22:32,2019-06-28 15:27:03,11,31,9
Issue#3519 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing description tags to guava-parent poms.
 We were previously apparently inheriting them from sonatype-oss-parent, until we removed that. Releases don't work without a description. ""Invalid POM: /com/google/guava/guava-parent/28.0-android/guava-parent-28.0-android.pom: Project description missing"" c417618  Fix typo in 'stoppingCount' variable name
 Fixes #3500 c168ba2  Split catch() blocks so that javac doesn't generate a reference to their common supertype, ReflectiveOperationException.
 ReflectiveOperationException isn't available on the old versions of Android that we support. As far as we know, there is no actual problem with these references because no methods are called on them. However, the new version of Animal Sniffer we're updating to will flag them anyway, and I think that avoiding them is the safe thing to do. Prepares for #3497 15c9a93  Upgrade animal sniffer version to 1.18
 Fixes #3497 afdecf7  Document default values of builder setters.
 d5dca36  Use saturatedToNanos() in CacheBuilder to avoid overflows.
 RELNOTES=Use saturatedToNanos() in CacheBuilder to avoid overflows. 7d04f72  Tweaks to the list of Guava features.
 4dbc7c1  Add more @nullables to variadic parameter lists.
 RELNOTES=Add more @nullables to variadic parameter lists. fbae3f4  Halve memory consumption when creating a Bloom filter.
 AtomicLongArray(long[]) clones its input, which is a waste when we're passing
in a new array. RELNOTES=Halve VmPeak when creating a Bloom filter. f499820  Use LongMath.saturatedAdd/Subtract in CacheStats.
 Fixes #3503 RELNOTES=avoid overflows/underflows in CacheStats 9f3d048  Fix the travis build
 ba4111c  googlebot: So there's good news and bad news. üëç The good news is that everyone that needs to sign a CLA (the pull request submitter and all commit authors) have done so.  Everything is all good there. üòï The bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter.  We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that here in the pull request. Note to project maintainer: This is a terminal state, meaning the cla/google commit status will not change from this state. It's up to you to confirm consent of all the commit author(s), set the cla label to yes (if enabled on your project), and then merge this pull request when appropriate. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ben-manes: @kluever I think you missed an overflow check in SimpleStatsCounter#snapshot().  ",2019-06-28 15:26:43,2019-06-30 14:58:50,11,31,10
Issue#3523 Fix typo in ImmutableList.java,cla: yes,,,"crazytan: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2019-06-29 22:15:10,2019-06-29 22:37:01,2,2,2
Issue#3525 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix typo in ImmutableList.java.
 922214b  Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it's been adopted by WebAppSec.
 RELNOTES=Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it's been adopted by WebAppSec. 2ae2f73  Add a test for LongAdder overflow behavior.
 See #3503 558321c  Fix some rawtypes in com.google.common.cache.
 310de86  Saturate LongAdder.sum() results to Long.MAX_VALUE during an overflow.
 Fixes #3503 RELNOTES=Fix potential overflow/IAE during cache stats calculations. b28a260  Add RangeMap#merge, analogous to Map#merge.
 8dc46a7  Automated rollback of 8dc46a7
 *** Reason for rollback *** Breaking a number of projects *** Original change description *** Add RangeMap#merge, analogous to Map#merge. 44d0870 



              The text was updated successfully, but these errors were encountered:
              ",2019-07-08 21:45:41,2019-07-09 04:11:30,7,12,5
Issue#3526 optimize buffer-memory allocation,cla: yes,,,"berndhopp: This patch is to avoid unnecessary allocation of memory to create transfer-buffers to e.g. move data from an InputStream to an OutputStream by introducing a package-local class TransferBuffer to the com.google.io package. The code does not change the public API in any way. TransferBuffers provide to package-local static methods to obtain a TransferBuffer for byte- or char-arrays, TransferBuffer.getCharArrayTransferBuffer() and TransferBuffer.getByteArrayTransferBuffer(). These are being used to avoid memory-allocation in a couple of places in the com.google.io-package, The microbenchmarks show that avoiding buffer allocation yields a significant performance boost references ByteStreamsBenchmark w/ ThreadLocal
ByteStreamsBenchmark w/out ThreadLocal
ByteSourceBenchmark w ThreadLocal
ByteSourceBenchmark w/out ThreadLocal there had been a similar PR from me before, but I think it is worth reconsidering the new code, which is a re-write of the original idea. 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-07-09 09:24:12,2019-07-09 09:39:45,2,8,2
Issue#3527 Transfer buffer reuse optimization,"type=enhancement, package=io, type=performance, cla: yes, P3",cgdecker,cgdecker,"berndhopp: The objective of this PR is to avoid unnecessary allocation of memory to create transfer-buffers to e.g. move data from an InputStream to an OutputStream by introducing a package-local class TransferBuffer to the com.google.io package. There had been a similar PR from me before, this is a complete rewrite based on the original idea. This is a purely internal optimization that does not change any public API. The microbenchmarks show that avoiding buffer allocation yields a significant performance boost To have a deeper look at the memory- and GC-profile, I created another JMH-benchmark here. CopyToBenchmark#testCopy() runs 10000 ByteStreams#copyto(inputStream, outputStream)-methods sequentially in a single thread. The first image is the profile on the master-branch, the second on the transfer_buffer_optimization-branch. Memory consumption and gc-activity are both multiple times lower on with transfer-buffer reuse. 
image 1: profile of CopyToBenchmark#testCopy on master-branch 
image 2: profile of CopyToBenchmark#testCopy on transfer_buffer_optimization-branch 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and have the pull request author add another comment and the bot will run again. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  berndhopp: I pushed some small typo- and formatting fixes in TransferBuffer.java in commits I squashed into the original commit, so the git history looks cleaner  cgdecker: This general idea has come up before, and while it looks good on paper (and in terms of the runtime numbers you've provided) I have a number of concerns with it: Basically, while this certainly looks like a win in terms of JVM runtime numbers, it makes tradeoffs that have unclear costs. The current implementation is at least clear in that it doesn't hold onto extra memory period. A related idea I've had is creating some class with instance methods for I/O methods like these, which wraps something the user has full control over like a buffer pool. But it's not something I've had a lot of time to think about and is obviously more difficult to use unless you're using dependency injection. Anyway, I'll try to give this some more thought.  berndhopp: @cgdecker any news here?  berndhopp: @cgdecker  any news here?  ",2019-07-09 09:40:10,,3,8,5
Issue#3529 Add unit tests for com.google.common.hash.LittleEndianByteArray,"package=hash, type=other, cla: no, P4",,,"EricHetti: I've analysed your codebase and noticed that com.google.common.hash.LittleEndianByteArray is not fully tested.
I've written some tests for the methods in this class with the help of Diffblue Cover. Hopefully, these tests will help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other classes that you consider important in a subsequent PR. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  EricHetti: Hi, @ronshapiro  We have a corporate CLA signed. However, when we try to sign it again it fails. I have a copy of the CLA but there is no email address to send it to. Any advice? :)  cpovirk: It looks like the email address associated with your Git commits is ""35978114+Braavos96@users.noreply.github.com."" Probably that's not associated with the corporate CLA? Can you rewrite your commit to use a corporate email address, and we can see if that helps?  ",2019-07-10 15:30:20,2019-12-19 19:03:10,1,1,3
Issue#3531 Moe Sync,"cla: yes, internal-sync",,,"ronshapiro: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Clarify that SortedSetMultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order.
 09bf107  Remove unneeded @SuppressWarnings from @benchmark methods.
 RELNOTES=none 3c3f7c9  Rename a method to avoid J2ObjC collisions
 Prevent J2ObjC from treating getAddSuppressed as a getter by renaming it generateAddSuppressed. This silences a -Wobjc-property-implementation warning; soon, such warnings will become errors. See the referenced bug for full context. cc5a55e 



              The text was updated successfully, but these errors were encountered:
              jbduncan: @ronshapiro The comment above looks like a very strange attempt at spam. Vote to remove it? :) (If you agree, I'll remove this comment too to prevent confusion.)  ",2019-07-16 16:53:25,2019-07-16 17:22:28,3,10,6
Issue#3533 Moe Sync,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add RangeMap#merge, analogous to Map#merge.
 Rollback of 8000dc9 cebc198  ",2019-07-23 21:14:49,2019-07-24 12:49:21,1,4,2
Issue#3534 Upgrade maven jar plugin from 3.0.2 to 3.2.0 - Reproducible Builds,"type=other, cla: yes, P3",,,"WilliamCollishaw: Upgrade maven jar plugin from 3.0.2 to the latest 3.2.0
Maven source and jar plugins both introduced build reproducibility (Maven source plugin upgrade in #3681) in 3.2.0 Versions bypassed:  WilliamCollishaw: Edit, bumped to 3.2.0 which introduces reproducible builds  WilliamCollishaw: Closed in #3686  ",2019-07-24 06:58:59,2019-12-01 23:16:22,4,2,3
Issue#3537 Moe Sync,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Link to guava-announce.
 f088027 



              The text was updated successfully, but these errors were encountered:
              ",2019-07-25 14:39:24,2019-07-25 14:44:39,1,1,3
Issue#3538 optimized code,cla: no,,,"yangfancoming: I make a litte changes ,  please take a look .  thx!  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-07-26 06:41:53,2019-07-29 01:44:49,1,1,2
Issue#3540 Guava/consistent hash validate buckets,cla: yes,,,"ambantis: This addresses issue #3539. I'm not sure whether this is undocumented (expected) behavior or a bug. But if it is a bug that should be fixed, we should document and alert users to the actual behavior pending a bug fix.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ambantis: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). memo Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here (e.g. I signed it!) and we'll verify it. information_source Googlers: Go here for more info. I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-07-27 19:28:07,2019-07-28 00:08:27,2,2,2
Issue#3543 Added an api to accept block of code and to return result and time taken to execute. ,"type=addition, package=base, cla: yes, P3",rahilsh,,"FuncGuy: Hi,
@kluever @kevinb9n @ogregoire
I've added an API to accept block of code and return result and time taken to execute. #3535  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  FuncGuy: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  kluever: I think we (also) probably want an API that only returns the elapsed Duration, where the result of the method invocation can be ignored or is void.  ogregoire: I don't like how the exceptions are handled. We do not know if there was an exception or not. There is currently no difference between an exception thrown by the measured code block and an exception being returned by the same code block. I don't know what the people would prefer: let the exception pass through and get no result of a timed stopwatch, or on the contrary measure the code block and get the caught exception in a specific returned value. So I'd say this would require more API: Anyways, this should probably be better refined.  FuncGuy: @kluever @ogregoire
I've addressed the review comments by @ogregoire if any further change is needed please mention it.  netdpb: Looks relevant to #3528.  rahilsh: why an empty method, () -> update() can be replaced with () -> {}  ",2019-07-30 18:45:31,,5,2,6
Issue#3545 Moe Sync,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove inaccurate comment.
 dabcfd4  Change the Splitter::limit arg to maxItems, for IDE usage.
 The old name of limit was uninformative when presented in e.g. IDE autocompletions. maxItems will help distinguish it from the alternative meaning of max number of splits to make. cb7a0f3  Adjust testModule.gwt.xml due to an internal restructure of how truth targets are built.
 ace42bc 



              The text was updated successfully, but these errors were encountered:
              ",2019-07-31 13:31:53,2019-08-07 17:28:29,3,5,5
Issue#3549 Add blockCancellation method to FluentFuture,"type=addition, package=concurrent, cla: yes, P3",,cpovirk,"njhill: Maybe there is some reason that this wasn't originally included but it seems like a natural addition and would be handy for me at least. 



              The text was updated successfully, but these errors were encountered:
              njhill: @cpovirk any interest in this? All of the unary ListenableFuture transformations in Futures have FluentFuture analogs apart from this one...  ",2019-08-02 18:48:17,,1,1,4
Issue#3551 Moe Sync,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove inaccurate comment.
 2cc9ccd  Change the Splitter::limit arg to maxItems, for IDE usage.
 The old name of limit was uninformative when presented in e.g. IDE autocompletions. maxItems will help distinguish it from the alternative meaning of max number of splits to make. 013d0f1  gwt.xml change from internal change.
 a13896b  Add MediaType for ""image/heif"" and ""image/jp2""
 RELNOTES=Add MediaType for ""image/heif"" and ""image/jp2"" 4c70d7f  Change a use of Iterable.forEach, which isn't available under Desugar.
 6508a37 



              The text was updated successfully, but these errors were encountered:
              ",2019-08-05 16:07:17,2019-08-05 16:45:48,5,8,5
Issue#3556 Add shuffle method to Ints,cla: no,,,"Periecle: New method for Ints due to #3555  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Periecle: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-08-10 14:03:21,2019-08-10 14:19:16,1,1,2
Issue#3557 Add shuffle method to Ints due to #3555,cla: yes,ljacqu,,"Periecle: 
No description provided.
  cgdecker: I'm closing this because there's already an issue requesting this but, as with most things in Guava, an implementation is not what we need to put this in Guava but rather a strong rationale for adding it (which typically also requires us to find sufficient evidence of the need for it within our codebase). Arguing that it should exist is best done in an issue; providing code before we've decided it's an addition we want to make doesn't really get us anywhere.  ",2019-08-10 14:18:46,2019-10-02 19:29:35,2,1,4
Issue#3558 Simplify code,cla: no,,,"NB216ers: Unnecessary 'null' check . isActuallyE(element)  method checks 'null' already. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  NB216ers: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-08-10 19:56:07,2019-08-10 20:19:14,1,1,2
Issue#3559 Simplify the code,"type=enhancement, package=collect, cla: yes, P4",,kluever,"NB216ers: Unnecessary 'null' check . isActuallyE(element) method checks 'null' already. 



              The text was updated successfully, but these errors were encountered:
              kluever: Thanks - fixed internally. Will be mirrored out shortly.  ",2019-08-10 20:22:19,2019-10-04 16:39:36,1,1,3
Issue#3560 Moe Sync,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix an issue where the InputStream returned by BaseEncoding.decodingStream(Reader) could fail to throw DecodingException while decoding an invalid string.
 This was caused by the default behavior of InputStream.read(byte[], int, int), which swallows any IOException thrown by any call to the single-byte read() method other than the first. To fix it, just override that method with an implementation that does not swallow any exceptions. Fixes #3542 4e6478d  Add more clarification on what ""access"" means in expireAfterAccess().
Previous comment doesn't mention ""containsKey()""
 Copied from https://github.com/google/guava/wiki/CachesExplained#asmap RELNOTES=comment change f2bd774  Document that HashBiMap.containsValue() tends to run in faster-than-linear time (overriding the default documentation from AbstractMap.containsValue()).
 Fixes #1973 7d57c23  Add note about {@code ByteSource.wrap}'s use of the given byte array.
 Fixes #2603 9276a79  Fix https://github.com//issues/3156 by implementing a proper `CollectSpliterators.flatMapTo{Int,Long,Double}`.
 Also, modify the existing CollectSpliterators.flatMap to accept null from its function by treating it as an empty Stream, like Stream.flatMap does. Add tests for this behavior. To test that the new methods also accept null through both their {Int,Long,Double}Consumer APIs and their Consumer APIs, add of{Int,Long,Double} methods to SpliteratorTester. They test the given Spliterator.of{Int,Long,Double} through both APIs. 0763099  Temporarily update public_suffix to include web.app
 Without this, developers are not able to set up Google OAuth clients with URLs in Firebase Hosting web.app domain. 41b8aea  ",2019-08-15 18:36:52,2019-08-16 17:24:22,6,19,7
Issue#3561 Improve ImmutableList#of Javadoc,cla: yes,,,"wilmol:  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  wilmol: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: Thanks! We're going to merge this internally, and it should be synced out tomorrow.  ",2019-08-17 00:43:22,2019-10-22 15:47:51,1,2,3
Issue#3565 Remove usages of deprecated CharMatcher functions,cla: yes,,,"karthikbhat13: Methods like charMatcher.digit() or javaLetterDigit() which would match digit and digit or letters in string is being deprecated by guava. Such methods are replace by inRange methods. For example, instead of digit(), it would be inRange('0', '9'). This PR closes #3544.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  karthikbhat13: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  tan31989: @googlebot I fixed it.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-08-19 07:07:06,2019-11-07 01:26:46,3,2,3
Issue#3571 Fix https://github.com/google/guava/issues/3570,cla: yes,lowasser,,"tomasisonfire: Fix #3570 by resetting expandTableThreshold and maxRunBeforeFallback after resizing the hashTable. Unit test included: testReuseBuilderReducingHashTableSizeWithPowerOfTwoTotalElements  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  tomasisonfire: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  lowasser: We don't typically include final as you do here, considering it redundant -- it does happen to be final, but that has no real importance to the correctness of the test.  ",2019-08-20 22:02:59,2019-08-21 18:48:27,1,2,3
Issue#3572 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add toString() to ForwardingFluentFuture, to match ForwardingFuture
 RELNOTES=N/A cedfa4a 



              The text was updated successfully, but these errors were encountered:
              ",2019-08-21 15:08:22,2019-08-21 15:35:08,1,2,2
Issue#3573 MOE sync,cla: yes,,,"cpovirk: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: 1 author is a Googler; the other sent this as a PR (#3571).  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-08-21 18:26:59,2019-08-21 18:48:24,2,6,4
Issue#3575 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Adds constant for the Upgrade-Insecure-Requests header.
 https://w3c.github.io/webappsec-upgrade-insecure-requests/#preference RELNOTES=Adds constant for the Upgrade-Insecure-Requests header. 7e5aa66 



              The text was updated successfully, but these errors were encountered:
              ogregoire: Is there any reason why the javadoc for the User-Agent field has been removed while adding the new field?  cpovirk: Thanks, looks like a mistake. Will fix.  ",2019-08-23 17:53:18,2019-08-23 18:23:35,1,2,4
Issue#3577 simply code RP,cla: yes,,,"Mixpa: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Mixpa: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Thanks. We mostly avoid lambdas because we have a Java 7 backport, and we want to minimize diffs between the mainline and the backport. I'll get the while change merged.  Mixpa: @cpovirk Ok, I have received your messag  ",2019-08-25 14:21:11,2019-08-26 18:36:54,4,1,3
Issue#3578 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Restore Javadoc unintentionally lost in CL 264984423.
 #3575 (comment) 0a9ddbc  ",2019-08-26 14:13:10,2019-08-26 14:15:17,1,2,2
Issue#3579 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix ""bug"" link that was actually a CL.
 4c5e8a2  Simplify while+break into do-while.
 Fixes #3577 39aadb3  Release resources of whenAllSucceed/whenAllComplete once input futures are complete.
 RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete a840d5b  Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.
 When the time comes, we'll flip the default value, and users who didn't see our earlier warnings can use a system property to restore support until they can stop serializing our types. [] 967010a  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Permission granted in #3579  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-08-26 18:04:03,2019-08-26 18:36:54,4,69,4
Issue#3580 Simplify some code,cla: yes,,,"OLPMO: Remove some redundant 'if' statement.Besides, I use .toArray(new MyClass[0])  replace .toArray(new MyClass[myList.size()]) for improving the  efficiency  of the code.
https://stackoverflow.com/questions/174093/toarraynew-myclass0-or-toarraynew-myclassmylist-size 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  OLPMO: @googlebot I signed it!  OLPMO: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ljacqu: -1 on the LocalCache changes, just as commented in PR #3492 this fixes what is presumably reported by an IDE at the expense of readability for no real reason.  OLPMO: @ljacqu oh,sorry. I prefer the version that I commit because I would do the same thing in my daily coding.I can also understand that different projects have different coding styles. Do you mean that all the changes of 'if' statement is unnecessary? If you think so, I would revert them into the master version!  OLPMO: @ljacqu  I think that 'sum == 0' needs to be preserved because 'sum == 0' itself has the meaning of isEmpty. Positive thinking is more conducive to people's understanding than negative thinking.If you do not agree with that. I can also revert other 'if' statement to the master version.
Look forward to your reply.  ljacqu: Sorry if there was any misunderstanding, I‚Äòm not in any way affiliated/involved with Guava ‚Äì I just posted a comment as an individual passing by :)  OLPMO: @ljacqu  That‚Äôs all right.I am very glad that you can reply to this pr.Thanks for your suggestion  ",2019-08-27 08:45:37,2019-10-02 16:48:51,2,4,3
Issue#3582 extract method from duplicate code,"type=enhancement, package=collect, status=triaged, cla: yes, P4",lowasser,,"Rookiexu: Extract method from duplicate code of the same class  cgdecker: There are a number of other similar cases in this class. In principal it would be nice to remove the duplication, but the naming such methods would be somewhat awkward (I don't think the name you've used here really describes what it's doing, for example) and even then there's other parallel almost-duplication that we'd theoretically also want to eliminate in an ideal case. So really I feel like if we were going to do something like this it would require someone making deeper changes, but given that this is low-level code that has been working for quite a while, I don't think it's going to be a high priority for us.  lowasser: It looks like instead of pulling out a method, you might as well just pull this out of the if?  Rookiexu: Thank you for your advice!  Rookiexu: @lowasser I modified my code based on your suggestions.Thanks  ",2019-08-29 09:22:04,,4,1,4
Issue#3583 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Release the input futures as soon as we submit the combiner task. But really, redo how we release resources in general.
 This is a followup to CL 265489523, which ""only"" released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn't if the combiner returned a Future that was still pending). That CL was good enough for practical purposes, but I wanted to better understand how we release resources. This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*], merging logic from releaseResources(), releaseResourcesAfterFailure(), and AsyncCallableInterruptibleTask.setValue(...). As part of that, it merges AggregateFuture and AggregateFutureState/RunningState into a single object. [*] OK, except seenExceptions, which gets its own handling. As a bonus, I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically, it clears it when all inputs are done, rather than when the combiner task has finished running. It turns out that blindly nulling out fields is too aggressive, so we need to be careful in 2 cases: CombinedFuture.releaseResources() can't null out task until the future is done or the task is done running. That's because it may need to interrupt the task. To handle this, I don't null out task in releaseResources() unless isDone(). To ensure that task still gets nulled out as soon as it's done running, I null it out directly in afterRanInterruptibly(). (OK, this is another exception to my claim that releaseResources() handles nulling out ""all"" fields....) Even if the output future is done, processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this, I store them in the listener and pass them through to processCompleted() (when necessary). The changes to prod code are net negative in line count, at least ignoring the added comments. I've also added a couple tests, only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward, despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications, like not bothering to check collectsValues before calling collectOneValue(...).) (Aside: This CL's releaseResources() is like our proposed afterCommit() API but different. First, releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second, CombinedFuture may rely on the fact that it's called twice in some cases: It's called once when all inputs complete, but it doesn't null out task, and then it can be called again if the output is cancelled, at which point it does null out task. But that probably doesn't matter too much because the task was probably handed to an executor in the meantime, so CombinedFuture is unlikely to hold the final reference to it. Anyway, for more discussion of afterCommit(), see #2886) [] 41a8adb  ",2019-08-29 15:41:33,2019-08-29 16:06:25,1,12,3
Issue#3586 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Let ListenableFuture implement thenable via a default interface method in J2CL
 RELNOTES=Let ListenableFuture implement thenable via a default interface method in J2CL f6bb300  Let ListenableFuture implement thenable via a default interface method in J2CL
 f457059  Update Public Suffix data.
 The copy is updated whenever Chrome's copy is updated, which is
typically every 6 weeks. Star the following to watch Chrome's updates: https://bugs.chromium.org/p/chromium/issues/detail?id=610495 When that bug is not updated, the copy is updated 3 weeks before the
Estimated Week of Stable: https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates a793784 



              The text was updated successfully, but these errors were encountered:
              ",2019-08-30 14:30:33,2019-08-30 15:51:45,3,2,3
Issue#3588 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Modify comment about safeOctets.length to be consistent with code.
 f7012fc  ",2019-09-01 20:19:20,2019-09-01 21:08:10,1,2,3
Issue#3589 Allow for names that have labels starting with underscore,cla: no,,,"mwullink: This fix allows for names that have labels starting with underscore, this is useful for parsing names that have non-final labels that start with an underscore. multiple protocols use this naming scheme, such a DKIM, which uses _domainkey labels.
see: https://tools.ietf.org/html/rfc6376  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  mwullink: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  mwullink: @googlebot I signed it!  ",2019-09-02 06:53:29,2019-09-02 07:12:10,5,1,2
Issue#3590 Allow for domain name labels to start with an underscore,"type=enhancement, package=net, cla: yes, P3","elharo, cpovirk",,"mwullink: Add support for domain name labels that start with an underscore.
some protocols such as DKIM use labels starting with an underscore (_domainkeys label) all labels that are not the last labels must be allowed to start with an underscore.
see: https://tools.ietf.org/html/rfc6376  elharo: This needs a test.  ",2019-09-02 07:18:37,,1,1,4
"Issue#3591 Remove @Beta: Immutable{BiMap,List,Map,Set}.builderWithExpectedSize","package=collect, cla: yes, P3, type=debeta",,,"michaelxinsun: Previously, I modified Dagger so that its generated code is using
builderWithExpectedSize for immutable collections whenever it's
available, i.e., Guava 23.1 or later:
google/dagger#1094 Since builderWithExpectedSize is a @beta API, if a Bazel client
project depends on Dagger, and if the depended Dagger is using
Guava 23.1 or later, Dagger generates code that uses this Guava
@beta API, which fails ErrorProne, thus failing Bazel build:
google/dagger#1569 The same issue could also happen if a Maven client project has a
maven-compiler-plugin that also uses ErrorProne. If the Guava team feel confident about those
builderWithExpectedSize static factory methods, maybe it's time
to remove @Beta for them altogether. Happy to discuss.  Thank you! Reference:
https://github.com/google/guava/wiki/PhilosophyExplained#beta-apis  michaelxinsun: Hello @ronshapiro !  How's going?  Could you take a look at this PR, please?  Thank you!  cpovirk: Hi, again, Michael! I'll put this on our list of issues to consider when we start our new planning process in the coming month.  ",2019-09-02 17:58:20,,1,4,4
Issue#3592 Include invokable in buildParamList error message,"type=enhancement, cla: yes, P3",patilharshal16,,"rajveerappan: When NullPointerTester is unable to create a sample
instance of a type, provide context for the error message
by including the invokable that requires the type.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it!) and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  rajveerappan: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  rajveerappan: Can we get this merged? üôèüèΩ  rajveerappan: @raghsriniv can we get this merged? üôè  ",2019-09-02 20:27:59,,1,1,4
Issue#3597 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Explicitly document that whenAllComplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).
 98971ae  ",2019-09-06 12:25:32,2019-09-06 14:43:56,1,2,3
Issue#3600 Update the comment for toOptional method,cla: no,,,"dacheng: Change the description to more clearly state that the method will throw NPE if the only element if null. The original description made me a bit confused. That is said, it is just my feeling, and I am not an expert of English,  please feel free to reject if the original description makes more sense. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Without a signed CLA, we aren't allowed to look at the patch. I'll close for now, but if you can sign the CLA (and you want to), then follow the instructions above, and let us know.  ",2019-09-11 05:13:18,2019-10-02 14:32:23,1,1,3
Issue#3601 Update the comment for toOptional method,"package=collect, type=api-docs, cla: yes, P3",,,"dachengy: Change the description to more clearly state that the method will throw NPE if the only element if null. The original description made me a bit confused. That is said, it is just my feeling, and I am not an expert of English,  please feel free to reject if the original description makes more sense. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  dachengy: @googlebot I signed it! I am a googler.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: While I don't think the change proposed here is bad, I think the existing wording is more precise and as such I don't think there's a lot of value in making this change.  ",2019-09-11 05:21:00,2019-10-02 19:01:58,1,1,3
Issue#3605 Moe Sync,"cla: yes, internal-sync","cpovirk, jbduncan",,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Combine ImmediateSuccessfulFuture into ImmediateFuture.
 ImmediateFuture used to have other implementations, but we switched those to extend TrustedFuture instead. d780cd5  Rollback previous commit.
 0812745  Roll forward previous rollback, but without making the type final.
 4c984c6  Fix (and in one case, suppress) low-hanging rawtypes warnings.
 It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact, I had to revert one similar change because it broke a GWT build. I'm hoping that that means that the others are safe. cabc402  Increase various tests' timeouts.
 25842ed  jbduncan: @cpovirk I'm unclear on why this test was removed, and I wondered if you could enlighten me? ü§î  cpovirk: Hmm, was supposed to have moved to another file. Oh, I see what happened. I'll fix it. Thanks.  jbduncan: Yw. :)  ",2019-09-13 16:56:09,2019-09-13 17:34:29,5,36,5
Issue#3607 simplify code,"type=enhancement, package=base, cla: yes, P3",netdpb,netdpb,"playasim: Simplified some code for numerical comparison.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  playasim: @googlebot I fixed it.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: I'm not sure these changes are simpler to understand than what's there. Math.min and Math.max are better in my opinion when neither argument is a constant. Every time I look at Math.min or Math.max calls for pinning a range to a constant, I have to think a bit about what it means. And two of these changes mean that we're using simple comparison for one end of a range and min or max for the other. Can you help me to understand why, in your opinion, these changes are helpful to readers? Thanks!  playasim: I'm not sure these changes are simpler to understand than what's there. Math.min and Math.max are better in my opinion when neither argument is a constant. Every time I look at Math.min or Math.max calls for pinning a range to a constant, I have to think a bit about what it means. And two of these changes mean that we're using simple comparison for one end of a range and min or max for the other. Can you help me to understand why, in your opinion, these changes are helpful to readers? Thanks! As you said, when two arguments are not constant, Math.max or Math.min is easy to understand, so the modifications to the toSafeNanos method make sense; for the other two methods, I think using Math.max method is also very readable, because it is easy to see that our intention is to get the number that is greater than 0 or -1.  netdpb: I'm still not really seeing how what you have is significantly simpler to read than what's there. But I made some suggestions to use some methods in primitives that might make for a stronger PR.  netdpb: Could this whole method use Doubles.constrainToRange()? That would be a more simplifying change.  playasim: Really clean and strong change, i will replace both with constrainToRange()  netdpb: Similarly, what about using Longs.constrainToRange() here?  netdpb: OK, this looks fine. I'll copy the change internally, and it'll get mirrored out shortly.  ",2019-09-14 17:27:30,2019-11-07 22:45:42,3,3,3
Issue#3609 Update to version v28.1,cla: no,,,"mernst: 
No description provided.
  mernst: Sorry, pull request against wrong repository.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-09-16 03:52:34,2019-09-16 03:53:20,282,180,10
Issue#3614 Update README.md,cla: yes,,,"weiwensangsang: I use guava through maven in this way: It will be clearer to describe it separately.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  weiwensangsang: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-09-20 13:29:09,2019-09-20 17:04:30,1,1,2
Issue#3615 Update Readme.md,"type=documentation, cla: yes, P3",liach,cgdecker,"weiwensangsang: First, I think the Readme tells me that the maven and gradle are the two ways to use Guava,  I am a little confuse about what ""xml"" means. I think it means ""pom.xml"". But ""maven"" is clearer.
Next, I think it would be clearer to describe the two situations separately. I introduce this project to my students and invite them to use Guava in their future work. However, in the early days of their learning, changing google's code was more difficult than copying google's code. I hope to lower the learning threshold of this project. This is also the purpose I have been working on.  jbduncan: As someone not part of the Guava team, this looks good to me! @weiwensangsang Just to warn you that it takes a long time for the Guava team to look at issues and review PRs, so expect to wait a month or so before you get a response.  weiwensangsang: As someone not part of the Guava team, this looks good to me! @weiwensangsang Just to warn you that it takes a long time for the Guava team to look at issues and review PRs, so expect to wait a month or so before you get a response. so sad to hear that.  liach:  ",2019-09-20 17:55:30,,4,1,7
Issue#3617 fix duplicate words typos in comments in javadoc,"type=api-docs, cla: yes, P3",jonahgreenthal,,"turbanoff: 
No description provided.
  jonahgreenthal: This isn't an error. It's saying ""check that X has not been in vain"", where X is ""that trouble [that the code goes to]"".  jonahgreenthal: Not an error, for a similar reason to FinalizableReferenceQueueClassLoaderUnloadingTest:58.  jonahgreenthal: Not an error, for a similar reason to FinalizableReferenceQueueClassLoaderUnloadingTest:58.  jonahgreenthal: Not an error.  jonahgreenthal: Not an error.  jonahgreenthal: Not an error (though the proposed correction is fine too).  ",2019-09-22 22:29:46,,1,26,4
Issue#3618 Moe Sync,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Export new AtomicLongMapBasherTest to open-source repo.
 #3605 (comment) 704c089  Add @LazyInit and @RetainedWith annotations to the lazily calculated ""entries"" field of ImmutableSetMultimap.
 This field is lazily evaluated by entries() without holding a lock, but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance. 996369d  Let ListenableFuture implement thenable via a default interface method in J2CL.
 This is a second attempt after problems in e0bac74 were fixed. 44909d9  Add test for behavior described in #1900
 7329a66  Undo test CL 9a50815.
 It produces a tiny diff between the common.base and common.collect copies of AbstractIterator. c82f791  Add Splitter.splitToStream().
 6c98412  Add comment explaining TABLE and MULTIPLIER in CharMatcher.Whitespace
 Fixes #1661 5430b14  Rollback of adding Splitter.splitToStream().
 *** Reason for rollback *** My guess is that this change somehow upsets an allowed list of
one-definition violations. 3f49efe  Rollback of change to let ListenableFuture implement thenable via a default interface method in J2CL.
 38c9a02  Clean up leftovers from MapMaker.makeComputingMap:
 0b93365 



              The text was updated successfully, but these errors were encountered:
              Stephan202: I see Splitter.splitToStream() was added and removed again. Are there plans to open-source it in the future? üôÇ  Stephan202: I see Splitter.splitToStream() was added and removed again. Are there plans to open-source it in the future? üôÇ It is being reintroduced in #3623. Nice :)  ",2019-09-23 18:23:17,2019-09-23 20:19:51,10,14,6
Issue#3621 Moe Sync,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Test iteration over a collection containing null.
 f9675a0 



              The text was updated successfully, but these errors were encountered:
              ",2019-09-25 13:55:40,2019-09-25 14:17:14,1,2,3
Issue#3622 Some code can be simplified,"type=other, cla: yes, P3","liach, MrHeer",,"Scott-YuYan: 1.Anonymous can be replaced with lambda.
2.for loop replaceable with foreach.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Scott-YuYan: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: We don't use lambdas in parts of Guava that also appear in Guava-Android, in order to minimize the diff between the two flavors. But we might accept the other changes, although we don't have a process that makes it simple to merge PRs.  Scott-YuYan:  liach: Just revert the change in AbstractBaseGraph. The rest is very fine  Scott-YuYan:  liach: uh no you did the wrong thing, you just reverted the changes google will accept  Scott-YuYan:  Scott-YuYan:  amalloy: Shoot, I tried to make @Scott-YuYan the commit author but I guess I didn't assign it correctly.  ",2019-09-26 02:07:21,2021-04-19 20:50:40,7,2,6
Issue#3623 Moe Sync,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  s/a/an/
 e2564c3  Add Splitter.splitToStream().
 61affd0  ",2019-09-26 16:34:59,2019-09-26 17:58:07,2,5,4
Issue#3627 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add Futures.submit().
 RELNOTES=util.concurrent: Added Futures.submit() 479c41d  ",2019-09-30 14:46:37,2019-09-30 17:29:31,1,5,3
Issue#3628 Update errorprone to 2.3.3,cla: yes,,,"elharo: 
No description provided.
  ",2019-09-30 18:23:48,2019-10-01 01:06:06,1,1,2
Issue#3629 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Update errorprone to 2.3.3
 Fixes #3628 c24688d  ",2019-09-30 20:44:58,2019-10-01 01:06:06,1,2,3
Issue#3630 MOE sync,cla: yes,,,"cpovirk: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-01 13:34:13,2019-10-01 13:52:24,1,5,2
Issue#3631 Changed the string concat to append for the testGrowBuffer(),cla: yes,liach,,"Sanskar95: Will help in performance issues as appned is much faster in a loop.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Sanskar95: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  liach: that toString call for i seems extraneous  cpovirk: This is definitely a performance improvement but probably isn't worth the cost to readability, at least in a test.  ",2019-10-02 08:46:03,2019-10-02 15:36:42,1,1,4
Issue#3633 Code improvement `if` statement instead of a for `statement` to a single item,cla: yes,,,"ze12augusto: Code improvement, using if statement instead of a for statement to a single item. I also found some classes with empty methods that are not being used by the project, is this correct? If these methods can be removed, I'd like to open a pr for this. ex: AllEqualOrdering_CustomFieldSerializer.deserialize(SerializationStreamReader reader, AllEqualOrdering instance) 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ze12augusto: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Thanks. The CustomFieldSerializer methods are used through reflection by GWT during its GWT-RPC serialization. (We're actually removing support for that at the beginning of next year, but we'll take care of it then.)  ",2019-10-02 13:52:51,2019-10-02 21:34:36,2,1,3
Issue#3634 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add missing @SInCE 20.0.
 52ba7eb  Add constant for the Cross-Origin-Opener-Policy header.
 [] RELNOTES=Adds constant for the Cross-Origin-Opener-Policy header. aa77f3c 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-02 15:38:07,2019-10-02 15:59:46,2,2,3
Issue#3635 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Check the array indexes in Quantiles.ScaleAndIndexes is non empty.
 Fixes #3210
Fixes #3211 823a432  Simplify some code.
 Fixes #3580 e2362de  Document the JDK 9+ alternative to `Iterators#forEnumeration`
 Fixes #3382 e432be5  Add a MIME type MPEG-DASH (mpd files)
 Fixes #2677 RELNOTES=net: Added the MediaType constant for MPEG-DASH. 579ccf6  Fix the logic that decides whether to use currentRequestThreadFactory() under App Engine.
 While there, also support thread renaming under App Engine. Fixes #3598
Relevant to #3606
(also, the CL in which I experimented with #3569 before backing it out) 7bd4b23 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: All non-Googler contributions are taken from PRs.  ",2019-10-02 16:25:06,2019-10-02 16:48:52,5,21,5
Issue#3636 Moe Sync,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add testlib readme.
 Fixes #3453 3b0f1e5  Change Quantiles' compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().
 Fixes #2989 RELNOTES=math: Quantiles compute() methods which return a Map now return a map with entries in the same order in which the indexes were provided. 6a2d070 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-10-02 17:05:57,2019-10-02 17:48:45,2,5,4
Issue#3637 Moe Sync,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Bump version, which went out of date since the previous CL was created.
 90f4a1c  Use if statement instead of for statement for a single item.
 Fixes #3633 020621e  Upgrade maven source plugin from 2.1.2 to 3.1.0
 Fixes #3466 e87b880  Document the JDK 9+ alternative to `MoreObjects#firstNonNull`
 Fixes #3383 145da12  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-10-02 21:15:50,2019-10-02 21:34:36,4,7,5
Issue#3638 Add isBlank method to Strings class,cla: yes,,,"slgriff: Add isBlank method to Strings class 



              The text was updated successfully, but these errors were encountered:
              lowasser: See #352 for extensive discussion of this method.  slgriff: Thank you @lowasser  ",2019-10-02 23:55:17,2019-10-03 00:03:55,1,3,3
Issue#3639 Using optional.ofNullable instead of comparing with 0 and null,cla: yes,,,"Sanskar95: It shows the possibility of null as a valid response, which is often assumed that it wont be returned.  cpovirk: We'd prefer to avoid boxing the primitive, as the current code does.  ",2019-10-03 10:00:10,2019-10-03 14:22:27,1,1,3
Issue#3640 Moe Sync,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Change tryParse methods to explicitly document that they throw NPE if the input is null.
 This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception ""if parsing fails"". Fixes #1259 995c07e 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-03 14:43:03,2019-10-03 15:15:57,1,8,3
Issue#3643 Skip file.createNewFile in Files.touch if file exists.,cla: yes,,,"vVv-AA: When calling Files.touch(foo) on a file that already exists,
java.io.File#createNewFile() will should not be called. Fixes #3612  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  vVv-AA: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: It loos like the code no longer calls setLastModified if the file exists. Do I have that right? The contract of the method includes updating the last-modified time if the file already exists.  cpovirk: I think this is what the failed tests are showing. Before you change this, though, I think I am going to close #3612 altogether. Sorry that we didn't do that initially.  ",2019-10-04 16:42:25,2019-10-04 21:23:54,1,2,3
Issue#3644 Moe Sync,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Remove duplicate null check from EnumMultiset.
 Fixes #3559 079d173  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-10-04 20:03:16,2019-10-04 20:22:48,1,2,2
Issue#3647 Add Lists.splitBy,cla: no,,,"pascalgn: Fixes #3136 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: Hi there! We can't look at this PR until you sign the CLA, per googlebot's  comments. However, I think it might be better to wait for more discussion on the other issue (#3136) before advancing with the code (see https://github.com/google/guava/wiki/HowToContribute#new-features)  pascalgn: @googlebot I signed it!  pascalgn: @nglorioso Ah, sorry about this! I thought I could just sign the CLA before the PR will be merged, but you're right of course! Also sorry about opening this, I read the HowToContribute when I created the issue, but in the meantime forgot about it and thought having some code helps explaining the feature better!  nick-someone: No worries, don't feel sorry for opening it, we appreciate the enthusiasm! I think there's still some discussion we're going to have about whether this feature is worth adding above and beyond things like Multimaps.index(...). I just wouldn't want you to have to spend a lot of time polishing this up with tests, documentation, etc. etc. while the original discussion hasn't gotten to a point where we'd be ready to accept it.  ",2019-10-08 19:47:46,2019-10-14 13:34:41,1,2,3
Issue#3648 Moe Sync,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Address TSAN errors:
 Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse, which inherits AbstractBiMap's keySet and values fields, which are themselves @LazyInit), so they are safe to read racily. Mark some graph ""cache"" fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...)), the graph stores the entry in a field. That way, if the user then queries it again (such as to look up the value associated with a key during iteration), the graph doesn't have to perform a potentially mildly expensive lookup. But this caching isn't implemented in a thread-safe way. It ought to be safe to initialize a graph in one thread, safely publish it, and then read it concurrently from other threads. But because of the racy reads of the cached entry fields, I don't think this is guaranteed to be safe. RELNOTES=graph: Fixed data race. 07eba15 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-09 13:57:12,2019-10-09 14:40:39,1,14,3
Issue#3649 Make animal sniffer annotations optional,cla: yes,Stephan202,,"elharo: Per https://www.mojohaus.org/animal-sniffer/animal-sniffer-annotations/ this should not be inherited by dependents @cpovirk  cpovirk: I think the case for this is a little better than the case for AutoValue's annotations, but I still have my doubts. I think the overall consensus that annotation-only packages should be optional or provided is wrong, as discussed in the AutoValue thread. There are two main cases: So I think that including annotations is still the right thing to do by default. The typical guidance I've seen to make them provided or optional doesn't even consider these issues, so I don't think we should put much stock in it. I assume that the goal here is to avoid version conflicts. Is this a case in which the Linkage Checker can detect that it's harmless to have different but identical versions of the class file present? edit: an additional concern:  elharo: The purpose of animal sniffer is for compile time checking of the project with animal sniffer. That's it. These annotations don't have any use post-compile.  elharo: I also think it's important that a fundamental library such as Guava minimize its dependency tree, ideally to the JDK, full stop. However between animal sniffer, error prone, and others Guava has slowly been accumulating a lot of additional dependencies that are transitively appearing in other projects. Every dependency is a liability.  cpovirk: They have class retention, though, so they'll be in the output. Maybe they shouldn't be, but arbitrary tools don't know that :( Maybe file a bug against Animal Sniffer?  elharo: Good idea. Done: mojohaus/animal-sniffer#73 We'll see what the animal sniffer devs say, but I'm guessing the plugin is analyzing the .class files rather than the .java files, which would explain why they want class retention with an optional dependency. The linkage checker operates similarly. We read .class files, not .java files.  cpovirk: Ah, you're probably right. I found the following in some docs (the same ones as you linked above): Animal sniffer also allows you to specify your own custom annotation if needed. Check the configuration of the relevant task for more information. So maybe we can provide our own.  cpovirk: http://www.mojohaus.org/animal-sniffer/animal-sniffer-maven-plugin/check-mojo.html#annotations  cpovirk: I think that the impact of annotation-only packages is fairly small as liabilities go. Or at the very least, if it's safe to omit the packages entirely, then it's likely to be safe to have the wrong version present. Still, I think it would be fine to migrate our one usage of @IgnoreJRERequirement to a custom, package-private implementation, configuring Animal Sniffer to recognize that, even if that feels like primarily a symbolic victory to me.  elharo: Should that approach (moving to a package private custom implementation) start in google3 or here?  cpovirk: google3 is marginally easier for us, but I'm fine with whatever you prefer.  elharo: It seems the pom.xml only lives here so probably easier to work from github.  cpovirk: A search like f:guava/pom.xml should turn it up in google3, but again, here is fine if that's easier.  elharo: Closing this in favor of #3652  ",2019-10-09 14:32:28,2019-10-10 15:06:47,2,2,4
Issue#3650 Moe Sync,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Require tokens to be non-empty.
 Followup to CL 272190935. Fixes #3626 (again :)) b080067  Log warnings for users who send Guava types over GWT-RPC.
 I've left this change out of the Android branch. For starters, it's not necessary there, since we don't support GWT. But normally we'd include it anyway to minimize diffs. However, doing so increases the number of classes retained after running Proguard (thanks, I assume, to the Logger field). There are other ways of getting around this, but for a temporary feature, the diffs seem tolerable. RELNOTES=Warning to users of GWT-RPC: The first Guava release of 2020 will remove support for GWT-serializing Guava types. To test ahead of time with GWT-RPC support for Guava types disabled, set the guava.gwt.emergency_reenable_rpc system property to false. 750db49  Steam -> Stream in the names of certain locals in ByteStream.
 0ee31e2  [OpenSearch] Add MediaType for ""application/opensearchdescription+xml""
 RELNOTES=Add MediaType for ""application/opensearchdescription+xml"" 6be97d8  Revert previous CL:
 ============
Log warnings for users who send Guava types over GWT-RPC. I've left this change out of the Android branch. For starters, it's not necessary there, since we don't support GWT. But normally we'd include it anyway to minimize diffs. However, doing so increases the number of classes retained after running Proguard (thanks, I assume, to the Logger field). There are other ways of getting around this, but for a temporary feature, the diffs seem tolerable. 82838c5 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-10 13:27:51,2019-10-10 13:48:25,5,7,3
Issue#3652 switch to an internal annotation for ignoring JRE requirements,cla: yes,,cpovirk,"elharo: @cpovirk This completely removes the dependency on animal-sniffer annotations 



              The text was updated successfully, but these errors were encountered:
              cpovirk: (Thanks!)  ",2019-10-10 15:01:07,2019-10-11 13:53:35,1,4,3
Issue#3653 update failureaccess version to match docs with code,cla: yes,,,"elharo: @cpovirk fix #3651 Other uses of 1.0.0 are in @since tags 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-10 15:06:10,2019-10-14 19:43:51,1,1,2
Issue#3654 Moe Sync,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  switch to an internal annotation for ignoring JRE
requirements
 Fixes #3652 RELNOTES=Removed dependency on animal-sniffer-annotations. 3324ce6  Rename package-private Duration APIs:
  saturatedToNanos() -> toNanosSaturated()
  saturatedToMillis() -> toMillisSaturated()
 #goodtime f3a053e  Suppress more GoodTime errors.
 9e885c8  ",2019-10-11 12:44:21,2019-10-11 13:53:35,3,23,4
Issue#3656 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Log warnings for users who send Guava types over GWT-RPC.
 (Roll forward CL 273803350, which was rolled back in CL 273825377. This time with updates to one-definition whitelist.) [] 09a11ae  update failureaccess version to match docs with code
 Fixes #3653 dc01afd  ",2019-10-14 15:11:05,2019-10-14 19:43:51,2,4,4
Issue#3657 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add Stream support to Stats and StatsAccumulator.
 This adds: (In passing, this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting, which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality, and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that, in some cases, the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.) RELNOTES=Add Stream support to Stats and StatsAccumulator. a59e12a  ",2019-10-16 13:51:22,2019-10-16 14:11:56,1,10,2
Issue#3658 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Resolve some rawtypes warnings in Converter
 4e37244 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-17 14:01:12,2019-10-17 14:38:01,1,2,3
Issue#3660 Remove @beta: from FluentIterable.from(E[]),cla: no,,,"xiantang: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  xiantang: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  xiantang: @googlebot I fixed it.  ",2019-10-18 11:41:07,2019-10-18 11:59:47,1,1,2
Issue#3661 Remove @beta: from FluentIterable.from(E[]),"package=collect, cla: yes, P3, type=debeta",,,"xiantang: 
No description provided.
  ",2019-10-18 12:04:25,,1,1,3
Issue#3663 fix #3662: ByteStreams.fixUpTo avoids unnecessary large allocations,"package=io, type=performance, cla: yes",cgdecker,cgdecker,"carterkozak: The fallback read buffer is allocated only when fallback reads
are used. The buffer size is bounded by the remaining bytes
to skip, allowing small skip requests which do require a fallback
read to avoid an 8k buffer allocation.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  carterkozak: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  carterkozak: It may be worth considering a singleton skip-buffer instead of allocation in this case. Using that model, it's possible to write a stream to snoop on other skip calls sharing the JVM which may be reading sensitive data, so I opted for an approach more similar to the original implementation.  cgdecker: Yes, that's exactly why we aren't using a singleton buffer for this.  cgdecker: This has been submitted internally and will be synced out soon.  ",2019-10-18 15:13:35,2019-10-20 16:25:42,1,1,4
Issue#3664 Moe Sync,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix ByteStreams.skipUpTo to avoid making unnecessary allocations.
 cb0ac2b  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  kluever: CLA signed @ #3663 (comment)  ",2019-10-20 16:08:09,2019-10-20 16:25:42,1,2,3
Issue#3666 Moe Sync,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix ImmutableList#of Javadoc
 Fixes #3561 a14d317  Attempt to fix inheriting Javadoc from the JDK again.
 It's currently missing:
https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger.html#equals-java.lang.Object- But I haven't managed to reproduce the problem locally. I'm trying this on the theory that java.home might be pointing to the JDK (the top-level directory in which src.zip lives) rather than the JRE (a subdirectory). Note that JDK11 has src.zip in a lib/ subdirectory. I tried adding it to a Java 11 build of Guava, but things blew up because the JDK contains module declarations, which naturally are incompatible with our -source 8. Possibly the right fix there is to avoid -source 8 in favor of the approach I used for jimfs in CL 272937179 -- except that maybe I already tried that and it wasn't sufficient? I'm happy to punt on that for now, especially since I just tried removing -source 8 and got a bunch of ""too many module declarations found"" errors :) 4c83832 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Verifying CLA because the commit comes from PR #3561.  ",2019-10-22 15:25:50,2019-10-22 15:47:51,2,4,4
Issue#3668 Moe Sync,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Add ElementOrder.stable().
 e5f03e5  Use int[] for entries and byte[]/short[]/int[] for hashtable
 The entries array containing the hash and next index was reduced from a long[]
to int[]. This is achieved by storing only the bits of the hash not covered by
the hashtable mask; the bits covered by the hashtable mask are implied-by and
can be inferred-from the hashtable bucket index. By ensuring that next pointers
are always less than or equal to the hashtable mask, everything needed can be
packed into an int[]. Inferring the missing hash bits from the hashtable bucket
index is only required for rehashing (the hashtable bucket chains must be
walked) and is the source of the slowdown for unsized instances. The hashtable is created as a byte[]/short[]/int[] based on size, stored as an
Object, and cast to the correct type using instanceof checks. Android performance impact varies but stays within +/-15% (average: 3% better).
JVM performance impact generally stays within +/-15% but unsized instances are
up to 42% worse (average: 5% worse). CompactHashSet Android memory usage:
byte[] sizes (1-255): 14-48% better (average: 43% better)
short[] sizes (256-65535): 24-40% better (average: 38% better)
int[] sizes (65536+): 0-25% better (average: 22% better) CompactHashMap Android memory usage:
byte[] sizes (1-255): 10-40% better (average: 34% better)
short[] sizes (255-65535): 19-33% better (average: 31% better)
int[] sizes (65536+): 0-20% better (average: 18% better) Effects on CompactHashSetProGuard:
12817 bytes => 14189 bytes (+11%)
3 classes => 3 classes (0%)
39 methods => 44 methods (+13%) Effects on CompactHashMapProGuard:
19133 bytes => 21883 bytes (+14%)
11 classes => 11 classes (0%)
75 methods => 83 methods (+11%) d1ebe51  Fix Javadoc errors (and sometimes warnings).
 These are mostly (perhaps entirely) problems new with Java 11's javadoc (or at least with Java 9+). cc2f4e6  Make inheriting Javadoc from the JDK work under JDK11.
 131e1b6  Prepare to move gwt-user to test scope after we remove GWT-RPC support.
 When we do that, we'll no longer be able to compile ForceGuavaCompilationEntryPoint as part of the normal javac compile or build its Javadoc (because of the ""missing"" dependency).
(ForceGuavaCompilationEntryPoint lives under the main (i.e., non-test) sources because we want to ensure that our prod code compiles without any dependencies added by our tests.) So exclude it from the javac compile, and turn off building Javadoc altogether. (Javadoc already isn't useful for guava-gwt, since it covers only ForceGuavaCompilationEntryPoint and the internal serialization classes. Once the serialization classes go away and ForceGuavaCompilationEntryPoint is hidden, we would get an error from Javadoc because it wouldn't find any sources.) Removing ForceGuavaCompilationEntryPoint from the javac compile is fine: I've verified that the GWT compiler still runs and identifies any GWT compilation errors. And I've diffed the resulting GWT jars. While here, I moved some GWT-specific configuration into the guava-gwt pom.xml. Relevant to google/truth#637 bb737f0  ",2019-10-24 17:58:31,2019-10-24 18:57:49,5,65,5
Issue#3671 Upgrade checker-qual to v2.11.1,"cla: yes, P3",,,"adriangonz: The checker-qual version that guava is using (v2.8.1) is a few releases behind. It would be good to upgrade to the latest version v2.11.1. There doesn't seem to be any breaking changes on the changelog and tests are passing after the change. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  adriangonz: @googlebot I signed it!  cgdecker: Hey @adriangonz, our CLA system isn't showing a CLA signature for you. Based on your email address, it looks like your company is covered by a corporate CLA, so you may need to be added to the group of authorized contributors as described in the message from googlebot. If you don't know who the point of contact at your company who can add you to that list is, I can help find that out.  adriangonz: Thanks for that clarification @cgdecker! We are currently processing this so that I can get added to the company's CLA whitelist.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Got this submitted internally and merged out in #3769. Thanks!  ",2019-10-25 12:14:00,2020-01-14 16:33:39,1,1,3
Issue#3672 Add more unit tests for Booleans.BooleanComparator.compare(),"cla: no, P3",,,"apirom9: Add more unit tests for null input to Booleans.BooleanComparator.compare() method 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Mass-closing PRs without an accepted CLA. You're welcome to reopen if you get the check to pass. Alternatively, feel free to open a plain issue to describe the change you'd like to see made.  ",2019-10-25 12:48:36,2020-10-05 16:09:37,1,1,4
Issue#3673 Update 'adding Guava to your build using Gradle' snippet,cla: yes,,,"jjohannes: Hello from Gradle üëã I noticed that the 'adding Guava to your build using Gradle' section in the README could use an update. So here it is. The notation with brackets - () - and double quotes - "" - is valid in both Gradle's Groovy and Kotlin DSL. The keyword (the 'configuration') determines the scopes in which  the dependency is visible. ""compile"" is already discouraged since some time and officially deprecated with Gradle 6. ""implementation"" and ""api"" are both possible, but the initial recommendation for using a
library should be ""implementation"". https://docs.gradle.org/6.0-rc-1/userguide/java_library_plugin.html#sec:java_library_recognizing_dependencies  cpovirk: Thanks! It sounds like we should definitely be moving off compile at this point. In the past, though, we've heard people (@tbroyer, @JakeWharton) suggest that api makes a safer default than implementation: (The Auto discussion touches on especially controversial issues around annotations, which might be a distraction from the more common case -- though Guava does include annotations, too!) Even if we do give api as a ""default"" recommendation, I can certainly see mentioning implementation, ideally by saying something like: If you can make certain guarantees [link], then you can change api to implementation to let Gradle skip work in some cases. ... OK, and now I actually went and read the docs you linked to :) (Thanks!) I see how implementation has its advantages beyond build speed. I'll revise what I said above to something more like ""It's complicated"" :) I'm now not sure it makes sense to give either recommendation as a ""default."" I would be tempted to put: ...where some-configuration is either implementation or api, as discussed in the Gradle docs. Thoughts on that?  jjohannes: Thanks for the quick response @cpovirk. I wasn't aware that there is such a history in discussing this little snippet. :) And of course it depends a lot on whom you ask what the more sensible default is. From our side, we prefer recommending ""implementation"" because the user will have to make the explicit decision to expose it, if they are developing a library/module used by others. But I can also understand the ""some users just want it to work as before/as in Maven"" argument. The downside of the ""some-configuration"" would be that it looses it's nice ""copy&paste"" character. Also in theory it makes sense as there are even more configurations you can use. How about adding both? The comments are vastly simplifying the effect, but give a rough guidance for users who absolutely have no idea.  cpovirk: I am encouraged enough by tbroyer's thumbs-up to move on to tweaking wording :) Or, for Android: But maybe that separates the Android and non-Android cases too widely? Plus, we'd probably want to do the same for Maven, which is more verbose, so we'd end up with 4 code blocks, some of them large :\ That would mean only 2 code blocks (Gradle and Maven), and maybe we can get away with keeping the Maven one as it is? I don't know, or: Maybe I like that one? (Whatever we do, we should link to the nice Gradle docs.)  jjohannes: I also like the last suggestion. With the newlines in between it's more readable than what I suggested. I think it's good to keep having one block for Maven and one for Gradle. Then it's easier to spot that each is about one tool. Below the listing we can add a sentences like: For more information on when to use api and when to use implementation, consult the Gradle documentation on  API and implementation separation  cpovirk: Sounds good to me. Want to update the PR to that, and I can import it?  jjohannes: Done! Thanks @cpovirk!  ",2019-10-25 15:27:37,2019-10-28 14:49:43,1,1,3
Issue#3674 Moe Sync,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Rollback
 *** Reason for rollback *** Didn't work: https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger.html#equals-java.lang.Object- *** Original change description *** Attempt to fix inheriting Javadoc from the JDK again. It's currently missing:
https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/primitives/UnsignedInteger.html#equals-java.lang.Object- But I haven't managed to reproduce the problem locally. I'm trying this on the theory that java.home might be pointing to the JDK (the top-level directory in which src.zip lives) rather than the JRE (a subdirectory). Note that JDK11 has src.zip in a lib/ subdirectory. I tried adding it to a Ja... 5b6537b  Update 'adding Guava to your build using Gradle' snippet
 The notation with brackets - () - and double quotes - "" - is valid
in both Gradle's Groovy and Kotlin DSL. The ""compile"" configuration is already discouraged since some time and
officially deprecated with Gradle 6. Fixes #3673 f4866c6  Format README.md.
 c850b57 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Manually setting cla: yes because the commit in question comes directly from the author's PR #3673.  ",2019-10-28 14:28:47,2019-10-28 14:49:44,3,3,4
Issue#3675 MOE Sync 2019-10-29,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Move the SetFuture check into AbstractFuture.toString() and out of pendingToString(), so that even if the latter is overriden we can include the SetFuture detail.
 This is useful for futures that initially do some of their own work, but then delegate to setFuture(), as FutureCombiner.callAsync() does. 68bdc31 



              The text was updated successfully, but these errors were encountered:
              ",2019-10-29 14:00:53,2019-10-29 14:34:32,1,13,3
Issue#3676 Precautions for null pointer exception,"package=base, type=other, status=working-as-intended, cla: yes",,,"Sangaibisi: 
No description provided.
  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Sangaibisi: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ogregoire: I believe that the NullPointerException is intended: the package is annotated with @ParametersAreNonNullByDefaut so I actually would expect a NullPointerException instead of the IllegalArgumentException that would be thrown instead.  netdpb: The package com.google.common.base.internal isn't annotated with @ParametersAreNonNullByDefault, but if anything we'd prefer to throw NullPointerException in that case anyway. This method is called (reflectively) only in FinalizableReferenceQueue, and with a class literal for that argument. Thank you for this PR, but I don't think it's necessary.  ",2019-10-30 10:42:26,2019-10-30 13:22:50,1,1,4
Issue#3677 MOE Sync 2019-10-31,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Fix toString exception handling change from 957c371.
 This is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic. 82b7589  Handle StackOverflowError from both pendingToString and appendUserObject.
 Adds a bunch of tests to validate error handling in toString code RELNOTES=Catch StackOverflowError in AbstractFuture.toString to prevent long chains of futures from failing toString calls. 29981d4  Update Documentation
 Fixes #3507 8a0d6bb 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: Adding CLA label because 8a0d6bb came from @gokaco's PR #3507.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-10-31 16:21:04,2019-10-31 20:40:18,3,6,4
Issue#3681 Upgrade maven source plugin from 3.1.0 to 3.2.0 - Reproducible Builds,"type=other, cla: yes, P2",,kluever,"WilliamCollishaw: Upgrade maven source plugin from 3.1.0 to 3.2.0
Maven source and jar plugins both introduced build reproducibility (Maven jar plugin upgrade in #3534) in 3.2.0  WilliamCollishaw: Closed in #3686  ",2019-11-06 04:47:12,2019-12-01 23:16:35,1,2,4
Issue#3683 Publish Gradle Module Metadata with Variants,"type=other, package=general, cla: yes, P3","cpovirk, cgdecker",cpovirk,"jjohannes: Hello again from Gradle üëã The following is a suggestion open for discussion. I provide this as a PR, instead of an issue only, as a proof of concept to aid the discussion. With the release of Gradle 6, Gradle fully supports a new metadata format called Gradle Module Metadata (GMM) - docs and spec. Such a metadata (.module) file can be published in addition to a .pom file and Gradle 6 will use it to obtain additional information about a library, its artifacts and transitive dependencies which can not be represented in the pom format. The GMM format has been under development at Gradle since about two years. With the release of Gradle 6, we are now at a point where it is ready to be adopted in larger scale. That's why we have been looking at popular JVM libraries, like Guava, to evaluate if Gradle users depending on a library would profit if the library would publish GMM. There are a couple of things Guava struggles with to express in their poms. Many of which have already been discussed at length here in other issues. I set up a repository with samples demonstrating these use cases. In detail, GMM offers modeling concepts, and with that solutions, for the following: Use case with description: guava-jdk-variants At the core of Gradle 6 dependency management and GMM is the notion that a component can have multiple, and arbitrary many, variants. A concept Gradle has been adopting since 3.x internally and which is heavily used already by all Gradle JVM plugins to distinguish between runtime and compile time variants and to a larger extend, for example, by the Android build system or by Kotlin Native. Guava publishes two prominent variants - android and jre. It is solved in probably the most elegant way possible with POM by encoding the variant name in the version number. Still this often causes issues as built tools do not know that the versions also present variants. Each variant in GMM is identified by attributes. These attributes are used by Gradle to select the best fitting variant. Gradle defines a number of default attributes for JVM libraries. One of them is org.gradle.jvm.version. In the presented solution, we set the attribute to 6 for the android variants and to 8 for the jre variants. Gradle, knowing about the attribute, can now use that information. If you do in your build: Gradle will automatically select android, if you set it to version 8 or higher, Gradle will select jre. If you set it to a lower version, Gradle will fail.
It does not matter if you depend on Guava directly or if it is brought in transitively. The central idea behind the variant-aware mechanism is that dependencies are defined between modules, but the variant selection is done when the dependencies are resolved based on the current context. For example, Gradle can say ""give me everything I need to compile this library for Java 6"" or ""give me everything I need to run this application with Java 9"". Note: The presented solution keeps the way how Guava is publishing two ""versions"" at once. Only for Gradle now both versions are identical (both provide all variants). So in Gradle it would not matter if com.google.guava:guava:29.0-jre or com.google.guava:guava:29.0-android is in your dependency graph, as both provide the same variants. For Maven users, nothing changes as the poms are no different. Use case with description: guava-compile-only-dependencies This addresses what is being discussed in #2824. With the solution presented here, you would get the following classpathes: It can be discussed if that is what is desired, but the essential bit is that you can have things on the compile classpath but not on the runtime classpath (not possible with poms currently). Use case 1: guava-listenablefuture-conflict
Use case 2: guava-vs-google-collections Another concept introduced with variants is capabilities. A capability is essentially an identifier for a ""feature"" that is implemented by a component. This allows you to express that: To be more concrete, each component has a default capability corresponding to its GAV coordinates: Now we can say that guava also has the com.google.collections:google-collections and com.google.guava:listenablefuture capabilities. Gradle will then not allow Guava together with these modules on the classpath and offers simple options to resolve the conflict. The 9999.0-empty-to-avoid-conflict-with-guava workaround is then no longer needed to avoid undesired old versions of com.google.guava:listenablefuture on the classpath.
Note: since the pom is not changed, the workaround will stay in place for Maven. Usually, we would recommend using Gradle 6 as your build system if your library wants to publish individual variants or other GMM specifics, as it is not easy to manually set this up in a Maven build. However, the Guava build is already setup to do it - by combining two Maven builds. So everything is already in place, the only thing is that certain metadata information cannot be expressed/published in the poms.
As you can see in this PR, I added the .module file to the repo. (In Gradle, these files are generated during publishing as are the poms.) Since it mostly contains the additional information and Guava does not have many dependencies (and also does not want to add more), the file is of reasonable size to be maintained manually along the poms. Since the naming of the module file is following Maven conventions, it can be treated and published as an additional artifact by Maven - as you can see in this PR.
If you consider adopting this solution, I am happy to provide some kind of integration test (maybe based on the samples linked above) that validates that the module file is valid and that the information does not contradict the information in the pom files. Sorry for this rather long text here. My goal is to illustrating the use cases and provide enough detail for a basic understanding of why we think many Gradle users would profit from having Guava publish Gradle Module Metadata. If you are interested in more details, here are a few links to sections in the Gradle user manual: We also recently did a Webinar on publishing that covers GMM:
https://gradle.com/blog/dependency-management-with-gradle-part-3-publishing-and-release-strategies/ (you can directly jump to 'Section 5 - Metadata' in the video) And others have started to publish module files to central, so that is working :)
https://repo1.maven.org/maven2/org/junit/jupiter/junit-jupiter-api/5.6.0-M1/junit-jupiter-api-5.6.0-M1.module I am happy to answer any questions on the topic and help working out a solution if there is interest in this on your side.  kevinb9n: Thanks very much for this.  jjohannes: We have published a blog post on the topic of how libraries can profit from Gradle Module Metadata and used Guava as an example: https://blog.gradle.org/guava It basically covers what I have written in the PR description in better words. :) While working on the post, I also wrote a Gradle plugin that adds the additional metadata to the existing Guava versions. So whoever is interested in trying this out today can use the plugin in a Gradle build: https://plugins.gradle.org/plugin/de.jjohannes.missing-metadata-guava (‚ö†Ô∏è If you publish a library, you should not use the plugin as all your consumers would have to apply it as well. That's why it would be great if we get this PR in for future Guava releases, because then the plugin is no longer needed) @cgdecker As I got back to this topic, I thought about how we could add test coverage to this PR. I added an ""integration test"" that resolves the locally installed Guava SNAPSHOT version with Gradle and tests all different variations of classpathes. It tests against Gradle 5 (using POM metadata) and Gradle 6 (using GMM). This way, we make sure that both metadata files are in sync and that we only have the expected differences in the resolution result.
Since you don't have this kind tests (as far as I know), I added a script to run it: util/gradle_integration_tests.sh. It runs outside the Maven builds, as it requires both variants (JRE and Android) to be built first. Independent of the changes in this PR, such a test makes it easier for you to see the impact changes in dependencies have on Gradle users in general. This script can maybe be called as an additional step in the CI setup. Not sure if this is the best way to go. I am happy to rework this.  cpovirk: Thanks again for this, and sorry that we have let it sit so long. I have a couple small questions, but we should probably err on the side of merging this soon, and we can always make changes later.  cpovirk: It sounds like we may need to update this manually (or tweak set_version to update it with sed or something) to test against a version that we're about to release? (And similarly at the top of the file.) That should be fine. I just want to check my understanding (and invite you to let me know if there are other things we should do that I've overlooked).  jjohannes: You are right. I missed this. I fixed it by extracting the version directly from the pom.xml file.  cpovirk: Similarly: Do we need to specify the version number here? I see that it's omitted for checker-qual above.  jjohannes: The reason why the version is required here is that the version of checker-compat-qual is not managed in the <dependencyManagement> block below. It's only defined directly in android/pom.xml. I think the better solution is to add it to the  block as well. I made that change: 70eaaf7.
Let me know if that is fine. Note: The version is then defined in two places, here and in android/pom.xml. I am not sure why there are versions in android/pom.xml at all. The android pom.xml also uses this pom as parent. Maybe all the versions can be removed from android/pom.xml?  jjohannes: Thanks for taking the time to get back to this @cpovirk. I rebased this PR to latest master and addressed both of your comments. Please have a look. From my perspective this can be merged as it is. The result of Gradle resolving a dependency to Guava is now pinned down in the integration test. That also tests the behaviour when resolving without Gradle Metadata. Which is a good addition to Guava's test coverage in general to make sure that changes to dependencies in pom files do not have unexpected side effects. What remains to be done is to (automatically) execute the integration test by calling util/gradle_integration_tests.sh. I am not sure where to put this best. (Should it become part of the travis configuration?) This can be done as a follow up.  cpovirk: Thank you again, this time for picking this up so quickly after our silence. (Rewinding: I am going to ponder your earlier question about whether to move our annotation dependencies to compile-only scope. You can leave things as you have them, and I will tweak it if we want to be more conservative.) What remains to be done is to (automatically) execute the integration test by calling util/gradle_integration_tests.sh. I am not sure where to put this best. (Should it become part of the travis configuration?) This can be done as a follow up. I would assume Travis as well. A follow-up sounds perfectly fine.  cpovirk: In your most recent round of comments, you said: I am not sure why there are versions in android/pom.xml at all. The android pom.xml also uses this pom as parent. Maybe all the versions can be removed from android/pom.xml? I don't think that's the case: I see no <parent> element in android/pom.xml. There is certainly a decent argument that we should have a common parent for both flavors; that's just not how we have it set up at present. Regardless, I like the idea of having the version of checker-compat-qual defined in both flavors' pom.xml files, since that lets the Gradle files refer to it consistently. But: Given that the Android flavor has its own parent POM, should the line here refer to HEAD-android-SNAPSHOT?  jjohannes: I don't think that's the case: I see no  element in android/pom.xml. Uh, my bad. Yes the POM does not have the parent. And while it could be possible it does make sense that there is no common parent as each flavor is a separate maven build. I don't know why I did this, but this parentVersion property is actually not needed at all and the version of the parent simply has to match the version of the variant. Then the checker-compat-qual version is also there. So forget most of what I said earlier. I fixed this. Thanks for clarifying and asking the right questions.  cpovirk: Ah, thanks, I was still not seeing the implications of this :) All the more reason for the Gradle metadata to simplify things for users!  jjohannes: I went ahead and added the integration test as a step to travis to make sure it is working before we merge. Looks good as far a I can tell. At least it did run on this PR and passed. Please feel free to merge. And do further changes later if required (I am happy to help, just ping me). As a note regarding (Rewinding: I am going to ponder your earlier question about whether to move our annotation dependencies to compile-only scope. You can leave things as you have them, and I will tweak it if we want to be more conservative.) You are most likely aware: this is this long-standing feature request in Maven that was never picked up.  cpovirk: Sorry, I have one more question, which I should have asked long ago. You said in your original message that Gradle will automatically choose guava-android if you set: But... do Android users do this? It sounds like targetCompatibility corresponds to the javac -target argument, and I think that Android compiles normally set that to 8 (or maybe higher now?) so that they can use lambdas, etc. (which get desugared to work even without support in the Android runtime). But we still want those compiles to get the -android flavor of Guava. (That's both because most Android users don't want to assume that they can use Java 8 APIs and because our -android flavor contains some slightly different implementations that are optimized for Android considerations.) Would we need to do something different in order to detect Android compiles (presumably by detecting something set by the Android Gradle Plugin)? [edit: I'm not clear on whether the following links are asking about something similar: https://discuss.gradle.org/t/how-to-detect-if-a-plugin-was-not-applied/28995,  https://stackoverflow.com/q/46204642/28465]  cpovirk: (Maybe Android Gradle plugin should declare an attribute? I could try talking to that team if you think it would be helpful. Historically, we haven't been in touch with them a lot, but I'd like to think they'd be interested in this.)  jjohannes: What a pity that we missed the 30 release with this. I am in the process of rebasing this PR. The Android variant now also depends on ""checker-qual:3.12.0"". Which publishes Gradle Metadata now. It states that its minimum Java version is 8. So my test for Java 7 fails. It actually won't resolve in Gradle anymore with Java 7 (independent of this PR). You can hack your way out of this in Gradle with dependency resolution rules though. Just FYI. I assume this is not a big deal since Java 7 support will be dropped altogether with the next major, right?  cpovirk: Right. We'll be supporting only Java 8 and Android at that point. And thanks again.  jjohannes: It now works as expected with Gradle 7 + AGP 7.0.0. Good to go from my side.  cpovirk: (Yesterday did not work out as hoped, but I still expect to get this in in time for the next Guava release.)  ",2019-11-06 11:08:49,,26,16,6
Issue#3684 MOE Sync 2019-11-06,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add @SuppressWarnings(""DoNotMock"") to mocked com.google.common types
 @DoNotMock will be added to these types. This change suppresses warnings for current cases where these types are mocked. 13ed6d3  Add GraphBuilder.incidentEdgeOrder().
 2c1db61  Remove usages of deprecated CharMatcher functions
 Fixes #3565 213ec90  Have ImmutableGraph.Builder set incidentEdgeOrder to stable().
 c43a2bf  Migrate org.mockito.Matchers#any* to org.mockito.ArgumentMatchers
 The former is deprecated and replaced by the latter in Mockito 2. However, there is a
functional difference: ArgumentMatchers will reject null and check the type
if the matcher specified a type (e.g. any(Class) or anyInt()). any() will
remain to accept anything. All remaining any(Class) references are migrated to nulllable(Class) to maintain the functionality of Mockito 1.
All remaining anyString() references are migrated to nullable(String.class) to maintain the functionality of Mockito 1. 3e96e06  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-11-06 20:14:05,2019-11-07 01:26:46,5,24,6
Issue#3686 MOE Sync 2019-11-07,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Upgrade maven source plugin from 3.1.0 to 3.2.0
Upgrade maven jar plugin from 3.0.2 to the latest 3.2.0
Maven source and jar plugins both introduced build reproducibility in 3.2.0
 See #3534
See #3681 5f14dfb 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-11-07 15:45:59,2019-11-07 16:12:32,1,2,3
Issue#3689 Update broken links,cla: yes,,kluever,"mikesterlingw:  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  mikesterlingw: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  kluever: Thanks, we'll get this submitted and merged out shortly!  ",2019-11-07 18:34:02,2019-11-07 22:46:28,1,1,3
Issue#3690 MOE Sync 2019-11-07,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Simplify some range constraints.
 Fixes #3607. 88ef869  Add javadoc in attempt to help readers differentiate Futures.allAsList() vs Futures.successfulAsList().
 980e6e6  Fix broken links in AtomicDouble.
 See #3689 6c501c4 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-11-07 22:20:29,2019-11-07 22:45:42,3,10,5
Issue#3691 Add Duration and Supplier<Duration> overloads for Supplier#memoizeWithExpiration,"type=addition, package=base, cla: yes, P3",,,"mfboulos: Directly addresses #3688 I don't want to step on any toes since I saw that long, TimeUnit overloads are in the cards for several classes, but I also see the use in a Duration supplier, so I went and wrote this up real quick so we can at least have it in the works. One thing I noticed while writing this is that com.google.common.util.concurrent.Internal#toNanosSaturated is package-scoped internal, but the only method in there is applicable to all legacy API's that require a long, TimeUnit, and there are several scattered in base, cache, and collect under com.google.common. It might be worth considering gauging the need for it to public-scoped, if at some point the human race figures out how to prolong life indefinitely. Also first contribution here, hope all looks good :) 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  mfboulos: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  jbduncan: Hi @mfboulos, welcome to Guava. :) I think it's worth mentioning that it's unlikely this PR will be merged, because the Guava team prefer to do API reviews internally (which is apparently the hard part) and then write the code themselves to match whatever API they've agreed on. See the contribution guidelines for more information.  jbduncan: That being said, I'm sure that this code would be a great start for @chriskilding's needs, who opened #3688, if you're happy for them to take the code as-is. :)  kluever: It might be worth considering gauging the need for it to public-scoped FWIW, we have a copy of this in our (still internal) com.google.common.time package, which we hope to get around to releasing at some point.  mfboulos: Understandable! My intuition was to put this PR in there just to have the code handy for you guys, but I understand there's more discussion behind it since it's essentially an extension to the existing API.  ",2019-11-08 05:12:29,,1,1,4
Issue#3692 Add README-kor.md for Korean,cla: no,,,"JuHyun419: Check the README-kor.md File
üëç 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  kluever: I appreciate you submitting this PR, but unfortunately I don't think we want to start maintaining README files for every language out there, and also have to worry about them getting out of sync and having correct translations. Hopefully Google translate is able to handle our README file reasonably well.  JuHyun419:  ",2019-11-08 11:05:04,2019-11-08 15:19:54,5,1,3
Issue#3694 Removed some deprecated methods in FilesTest and replaced with suggested. ,cla: yes,,,"playasim: I removed some deprecated methods in FilesTest.java and replaced them with suggested 



              The text was updated successfully, but these errors were encountered:
              kluever: These tests are intended to test the deprecated APIs and they should stay as-is.  ",2019-11-09 17:25:40,2019-11-10 22:05:23,2,1,3
Issue#3695 MOE Sync 2019-11-11,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Roll forward CL 269313299.
 *** Original change description *** Let ListenableFuture implement thenable via a default interface method in J2CL 639d873  ",2019-11-11 16:09:01,2019-11-11 16:48:18,1,4,2
Issue#3698 MOE Sync 2019-11-13,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Migrate from arrays to ImmutableSets in InetAddressesTest.
 b827d92  ",2019-11-13 15:42:18,2019-11-13 16:02:19,1,2,3
Issue#3699 MOE Sync 2019-11-13,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Clean up some unnecessary initializations.
 df0d13f 



              The text was updated successfully, but these errors were encountered:
              ",2019-11-13 17:04:45,2019-11-13 18:47:33,1,2,3
Issue#3702 MOE Sync 2019-11-14,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Move the big integer conversion code into InetAddresses
 RELNOTES=Add toBigInteger and fromIpv4BigInteger/fromIpv6BigInteger to InetAddresses for manipulating InetAddresses as BigIntegers 1a13905  Add support for scope IDs to InetAddresses.isInetAddress().
 Fixes #2587 2d45ed1 



              The text was updated successfully, but these errors were encountered:
              ",2019-11-14 16:08:32,2019-11-14 16:57:32,2,4,3
Issue#3703 MOE Sync 2019-11-14,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Move the big integer conversion code into InetAddresses
 RELNOTES=Add toBigInteger and fromIpv4BigInteger/fromIpv6BigInteger to InetAddresses for manipulating InetAddresses as BigIntegers a544e97  Add support for scope IDs to InetAddresses.isInetAddress().
 Fixes #2587 1d37807  Format with Locale.ROOT.
 This guarantees that the message matches across locales, including hi-IN, which we test with under Maven:
https://travis-ci.org/google/guava/jobs/611945191
 
guava/pom.xml
 
         Line 212
      in
      cc6cff2
  b29efa5  ",2019-11-14 17:38:34,2019-11-14 18:08:23,3,4,3
Issue#3704 MOE Sync 2019-11-14,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Use Truth assertions instead of JUnit assertions in InetAddressesTest.
 Make assertions stronger if possible (check object equality instead of reference equality). 79e2c4e  Correct documentation of getCoercedIPv4Address.
 848d95b  ",2019-11-14 20:14:52,2019-11-14 21:08:19,2,4,3
Issue#3706 checker-qual 2.10.0,cla: yes,,,"sullis: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2019-11-15 22:47:52,2019-11-18 16:13:57,1,1,2
Issue#3709 WIP +eventbus Add EventDispatchTask to help retrieve the original event.,cla: no,,,"hepin1989: I need this to retrieve the original event 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  hepin1989: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: Hi there! We're unlikely to add features to EventBus anymore. I note that the subscribers receive the event directly, so you may be able to log or deal with the event without having the executor that runs the event subscriber callback be aware of the event being called-back.  hepin1989: @nglorioso Are you sure? If I am using an AsyncEvent bus, and the executor is using abort policy, then how can the subscriber know?  hepin1989: @nglorioso Ping  ",2019-11-18 08:35:41,2019-11-18 19:23:34,1,1,3
Issue#3710 MOE Sync 2019-11-18,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  checker-qual 2.10.0
 Fixes #3706 8f2ec63 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: Per cla:yes on pull request #3706, marking this as CLA accepted.  ",2019-11-18 15:48:01,2019-11-18 16:13:57,1,1,3
Issue#3711 MOE Sync 2019-11-19,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Update Public Suffix data.
 The [] copy is updated whenever Chrome's copy is updated, which is
typically every 6 weeks. Star the following to watch Chrome's updates: https://bugs.chromium.org/p/chromium/issues/detail?id=610495 When that bug is not updated, the [] copy is updated 3 weeks before the
Estimated Week of Stable: https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates For this update, [] d6c3cd9  Update to Truth 1.0
 e6225a6 



              The text was updated successfully, but these errors were encountered:
              ",2019-11-19 15:31:18,2019-11-19 16:07:47,2,6,4
Issue#3712 Rejuvenate log levels,cla: no,,,"yimingtang07: We appreciate your previous feedback and it's very helpful! Here's a reissue of #3435 with a new version of our tool. The tool made many fewer transformations. Again, we'd appreciate any feedback and are willing to make further changes if you wish to incorporate our PR into your project. We have several analysis settings. We can vary these settings and rerun if you desire. The settings we are using in this pull request are: Treat CONFIG/WARNING/SEVERE levels as a category and not a traditional level, i.e., our tool ignores these log levels.
Never lower the logging level of logging statements within catch blocks.
Never lower the logging level of logging statements within if statements.
Never lower the logging level of logging statements containing certain (important) keywords.
Never raise the logging level of logging statements without particular keywords in their messages.
Avoid log wrapping by disregarding logging statements contained in if statements mentioning log levels.
The greatest number of commits from HEAD evaluated: 1000.
The head at the time of analysis was: 71de406  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  yimingtang07: Sorry, it seems that my email address is wrong. I am going to close this one and open a new one.  ",2019-11-19 18:14:05,2019-11-19 18:41:37,1,2,2
Issue#3713 Rejuvenate log levels,"type=other, status=will-not-fix, cla: yes","khatchad, netdpb",,"yimingtang07: We appreciate your previous feedback and it's very helpful! Here's a reissue of #3435 with a new version of our tool. The tool made many fewer transformations. Again, we'd appreciate any feedback and are willing to make further changes if you wish to incorporate our PR into your project. We have several analysis settings. We can vary these settings and rerun if you desire. The settings we are using in this pull request are: Treat CONFIG/WARNING/SEVERE levels as a category and not a traditional level, i.e., our tool ignores these log levels.
Never lower the logging level of logging statements within catch blocks.
Never lower the logging level of logging statements within if statements.
Never lower the logging level of logging statements containing certain (important) keywords.
Never raise the logging level of logging statements without particular keywords in their messages.
Avoid log wrapping by disregarding logging statements contained in if statements mentioning log levels.
The greatest number of commits from HEAD evaluated: 1000.
The head at the time of analysis was: 71de406  netdpb: This method is logging roughly the same information as the method it's overriding, but your tool suggested ""finer"" here and ""finest"" in the overridden method. How come? More generally, is there a way to describe this PR meaningfully, rather than just as the result of running a tool? For instance, what benefit will Guava developers or Guava users get from this particular change? As before, I'm curious whether this tool is designed to be appropriate for stable shared libraries (and even more, for testing libraries like these) ‚Äî or is it more appropriate for application code?  khatchad: @netdpb, thank you for your response. Please see inline below: This method is logging roughly the same information as the method it's overriding, Yes, we tweaked the approach based on some feedback we received from various PRs. but your tool suggested ""finer"" here and ""finest"" in the overridden method. How come? The tool deemed the surrounding code of these statements to be not as ""interesting"" as other statements as they may have not be edited recently. However, this PR includes a setting that only adjusts INFO and below. We will issue another one that does the full range of levels as well. More generally, is there a way to describe this PR meaningfully, rather than just as the result of running a tool? For instance, what benefit will Guava developers or Guava users get from this particular change? Yes. We believe that there is a certain class of logging statements that are correlated with a project's features. Over time, certain features become more ""interesting"" than others, e.g., ones that are being enhanced or require bug fixes, and vice-versa. As such, we would like to bring logging statements associated with more active features to the forefront of developers' attention and likewise push statements not associated with active features to the background. In this specific case, the tool decreased the level of logging statements in test setup code. This could allow statements pertaining to actual test cases (non-boiler plate) to be displayed more prominently. As before, I'm curious whether this tool is designed to be appropriate for stable shared libraries (and even more, for testing libraries like these) ‚Äî or is it more appropriate for application code?#3435 (comment) Yes, we did consider your comment from before (thank you again). We think that this approach still works for library/framework code as it evolves (i.e., developers may want to see logging statements more specific to their own tests rather than test setup). All that being said, @saledouble is currently running the tool with different settings as mentioned before. We'll post that momentarily. Thank you again for your consideration!  khatchad: Alternate PR: #3716. It has all of these transformations as well as some new ones that are related to exceptions.  netdpb: but your tool suggested ""finer"" here and ""finest"" in the overridden method. How come? The tool deemed the surrounding code of these statements to be not as ""interesting"" as other statements as they may have not be edited recently. However, this PR includes a setting that only adjusts INFO and below. We will issue another one that does the full range of levels as well. My comment was about the fact that your tool changed ""fine"" to ""finer"" in one case and ""finest"" in what looks like an identical case, and in fact one case is in a method that overrides the other. How does that help the reader of this code or the person running the test?  khatchad: Sorry, I misread your original question. The DOI model is supposed to propagate interest across hierarchies. That is, if M is ""interesting"" and M' overrides M, then M' is also ""interesting"" as vice-versa. But, the degree of ""interestingness"" may not be consistent, i.e., M' is ""interesting"" but not necessarily to the degree of M. In fact, I bet the overriding method createTestSuite() in this case was the more interesting one and that internestness propagated to overridden method. We'll take a look to be sure. In general, it seems we have a kind of behavioral subtyping problem here. There should be consistency with the recommendations of overriding methods. I've filed ponder-lab/Rejuvenate-Logging-Levels#250. Thank you for your feedback.  khatchad: This is what I've found. My hypothesis about the overriding DOI propagation seems plausible but we haven't recorded whether DOI is increased due to a direct code manipulation in the git history or through relationship propagation. We'l need to do some further investigation, but I do think that the issue I filled is relevant either way:  yimingtang07: The CSV files (updated):
CSV_files.tar.gz  netdpb: I'm still not convinced that the tool is providing value for this core library in particular. I don't believe that change recency is a great data point for logging level in these kinds of libraries, especially testing libraries. I do appreciate your default approach of focusing on true debug logs (i.e., lower than INFO level), and I think it's an interesting area for further research. I still think the approach has much more value in application code than in core library code.  khatchad: You're correct. Parts of the library that are important to library developers may not match the interest level of application developers using the library. This seems to touch on a broader issue of log ""composition,"" i.e., the log intentions of application developers may not coincide with the application's dependencies in general.  khatchad: I think that this problem will be more apparent in library components that are exposed to application developers.  netdpb: Thanks for showing us this tool and its results. I'm going to close this PR (and the other one), as I don't think it's generating useful changes for our library. Best of luck on developing your tools in the future.  khatchad: Thanks for your feedback @netdpb!  ",2019-11-19 18:47:56,2019-12-09 16:41:18,1,2,4
Issue#3715 MOE Sync 2019-11-20,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  subject verb agreement
 2367571 



              The text was updated successfully, but these errors were encountered:
              ",2019-11-20 14:53:23,2019-11-20 15:29:04,1,1,3
Issue#3716 Rejuvenate log levels using setting 2,"type=other, status=will-not-fix, cla: yes",netdpb,,"yimingtang07: Thank you for your feedback in our previous PR (#3713)! That PR has a setting that only transforms log levels below INFO. I rerun our tool with the new settings as mentioned below to make this PR. This PR has two additional transformations that we think they are reasonable. The settings we are using in this pull request are: Treat CONFIG levels as a category and not a traditional level, i.e., our tool ignores these log levels.
Never lower the logging level of logging statements within catch blocks.
Never lower the logging level of logging statements within if statements.
Never lower the logging level of logging statements containing certain (important) keywords.
Never raise the logging level of logging statements without particular keywords in their messages.
Avoid log wrapping by disregarding logging statements contained in if statements mentioning log levels.
The greatest number of commits from HEAD evaluated: 1000.
The head at the time of analysis was: 71de406 These are CSV files generated by our tool.
CSV_files_c_1000.tar.gz (updated)  netdpb: This log level is inappropriate for this method. This method is attempting several ways to return an arbitrary instance, and while it's odd for a no-arg constructor to throw, it's not unacceptable on an arbitrary class.  netdpb: I could see a warning here, but this is a case where the user has explicitly asked this class to suppress exceptions.  netdpb: My comment from PR #3713 still applies.  netdpb: See my comments on PR #3713. They still apply.  netdpb: Thanks for showing us this tool and its results. I'm going to close this PR (and the other one), as I don't think it's generating useful changes for our library. Best of luck on developing your tools in the future.  ",2019-11-20 17:42:38,2019-12-09 16:41:26,1,4,3
Issue#3723 MOE Sync 2019-11-27,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Use internal fast path for getting failure without allocating a wrapper ExecutionException
 Also fix GWT AbstractFuture so that it respects the trusted interface. (More motivation for #2934) RELNOTES=N/A 736b092  Support incidentEdgeOrder for directed Graphs
 fd2255e  Add @JsOptional annotations to the 2nd parameter of the 'then' method, since the second parameter is actually optional. This satisfies JsCompiler type checking.
 73be65b 



              The text was updated successfully, but these errors were encountered:
              ",2019-11-27 16:15:07,2019-11-27 21:19:33,3,13,3
Issue#3724 Do not allow warmupPeriod set as zero,"type=enhancement, package=concurrent, status=triaged, cla: yes, P3",cpovirk,,"liufuyang: In order to solve issues like #2730
We encountered this ""crazy"" issue in production that when setting warmupPeriod=0, the ratelimiter changed the rate from 1 per second to millions (if not billions) per second. Or simply see this issue by running following code as a test: When setting warmupPeriod=0 will trigger some downstream slope calculation with some value divide 0:  https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/SmoothRateLimiter.java#L229
 



              The text was updated successfully, but these errors were encountered:
              liufuyang: @cpovirk Perhaps you can give a review of this?  liufuyang: @cgdecker Perhaps you can take a look as well? :)  liufuyang: @ronshapiro @kluever Pinging you two here as I saw you changed this ratelimiter recently üòÑ  ",2019-11-28 16:29:24,,1,4,3
Issue#3725  Re-expose constructor and method that were made private at Guava 22.0,"type=addition, package=collect, status=will-not-fix, cla: yes, P4",,,"sbabcoc: This set of revisions restores the constructor and method of the
SimpleTimeLimiter class that were introduced in Guava 19.0 and made
private in Guava 22.0. This enables clients of the UrlChecker class of
Selenium 2 to upgrade to the latest Guava release to fix a security
defect. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  sbabcoc: You can see the affected class here: UrlChecker Lines 64 thru 105:  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  sbabcoc: @googlebot I signed it!  cgdecker: The constructor/methods in question were @Beta APIs that were deprecated in Guava 22 and removed in 23, in accordance to our @Beta policy. No library should have been using @Beta APIs, and while it's unfortunate that some libraries have over the years, we're not planning to re-add APIs we removed because of that.  sbabcoc: @cgdecker I understand that the decision of the Selenium implementers to use a @Beta interface was ill-advised, but development on Selenium 2 shut down before switching to the final form of TimeLimiter. Selenium 3 doesn't use this @Beta interface, but folks like me who still need to support Java 7 can't upgrade to Selenium 3. The constructor/method are still present in the SimpleTimeLimiter class... they're just private, and the corresponding variant of callWithTimeout has been removed from the TimeLimiter interface.
Because the Selenium 2 browser drivers rely on SimpleTimeLimiter, I currently can't upgrade Guava to any release newer than 19.0. This leaves me vulnerable to the unbounded memory allocation issue that was resolved in later Guava releases. Is there any chance you'd make an exception to your deprecation/removal policy for @Beta interfaces in this case?  sbabcoc: @cgdecker Any chance for this to be reconsidered?  ",2019-11-30 04:17:28,2019-12-09 18:09:16,5,3,3
Issue#3726 MOE Sync 2019-12-01,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make incidentEdges() return edges in insertion order
 df2c552  AbstractNetwork: fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.
 RELNOTES=Fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.  Originally reported as GitHub issue #3721. 8e0f821  Refactor AbstractGraphTest to allow for tests with ImmutableGraph.
 Reason: ImmutableGraph implementations are undertested compared to MutableGraph implementations. The current tests didn't catch a bug I deliberately introduced in [] Also, it would be nice to be able to share the incident edge order tests. Note about design: I started out by making an AbstractGraphTest subclass for mutable graphs. However, that would lead to a duplication of all 7 subclasses and most of their tests. The issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowSelfLoops=true/false and incidentEdgeOrder=unordered/stable. The proposed solution is somewhat unconventional, but at least allows us to share much more code between the tests. a6d0db5  Merge AbstractXGraphTest and ConfigurableSimpleXGraphTest, thus removing one layer from the AbstractGraphTest tree.
 Reason: Nobody in [] is using these abstract test classes (even though they are designed for general purpose graphs). However, even though they aren't used, these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of ImmutableGraph tests and stable incident edge order tests. ce50502  Make the AbstractGraphTest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.
 f5ac328  Merge StandardMutableDirectedGraphTest and its variant with stable order.
 This is in preparation for adding an Immutable version that also needs tests for the stable order. a0ebd7b  Add StandardImmutableDirectedGraphTest
 0335354  Annotate benign race in AbstractTable so as to avoid TSAN issues.
 a4c3bcd  jbduncan: Great work on improving the graph tests @nymanjens! Looking forward to seeing it merged in. üëè  nymanjens: Great work on improving the graph tests @nymanjens! Looking forward to seeing it merged in. Thanks!  ",2019-12-01 23:27:13,2019-12-02 14:22:32,8,58,6
Issue#3727 Update to errorprone 2.3.4,"status=obsolete, cla: yes",,,"dhatanian: Errorprone 2.3.3 was missing classes such as DoNotMock . This didn't affect Guava, but it led to dependency conflicts for people using both Guava and Lombok. Version 2.3.4 adss DoNotMock back, which solves this issue.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  dhatanian: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Thanks for the PR! It looks like we already have a commit in that makes this change; it should be synced out soon.  cgdecker: (4eea0f7)  ",2019-12-03 11:08:51,2019-12-09 17:08:37,1,1,3
Issue#3729 fix CaseFormat,cla: no,,,"zhixiangyuan: The extra space requested here is for the new separator, so you need to use the passed separator.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-12-05 05:26:47,2019-12-05 05:32:02,1,1,3
Issue#3730 fix CaseFormat,"type=defect, status=fixed, package=base, cla: yes, P3",,,"zhixiangyuan: The extra space requested here is for the new separator, so you need to use the passed separator. 



              The text was updated successfully, but these errors were encountered:
              googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  zhixiangyuan: @googlebot I fixed it.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Thanks for the PR; it's been submitted internally and should be synced out soon.  ",2019-12-05 05:32:30,2019-12-09 19:56:39,1,1,4
Issue#3732 MOE Sync 2019-12-06,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Use ""IPv4"" instead of ""Ipv4"" for consistency.
 This CL goes against the style guide, but we should be consistent within the file. We could instead rename the existing, lightly used methods to match the style guide, but I don't think this will be the best use of someone's time. 4a627d3  Add @SuppressWarnings(""GoodTime"") to GWT supersource for LocalCache operating in primitive millis.
 95e7e1a  The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo(), rather than proxy methods
 1fc1f11  Make equally named putEdge() method adjacent
 9a1f2e2  Support stable incident edge order for directed Immutable[Value]Graphs.
 2608ca4 



              The text was updated successfully, but these errors were encountered:
              ",2019-12-06 17:30:24,2019-12-06 17:59:58,5,23,5
Issue#3734 MOE Sync 2019-12-09,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add @DoNotMock to several com.google.common types
 Relnotes: dbd9747  Add @DoNotMock to ListenableFuture
 Remove @DoNotMock from AbstractFuture, as it is now covered by @DoNotMock on ListenableFuture RELNOTES=N/A ad9d3ea  Fix small error with how CaseFormat calculates the StringBuilder size when converting one format to another.
 Fixes #3730 0dc6801 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Setting cla: yes because changes come from PRs sent by commit authors.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-12-09 18:43:20,2019-12-09 19:56:39,3,71,4
Issue#3735 Documentation: format the Javadoc of ByteStreams.read with @throw tags.,"type=api-docs, package=io, cla: yes, P4",,kluever,"pengyunie: Formated the descriptions of possible exceptions of ByteStreams.read into @throw tags. 



              The text was updated successfully, but these errors were encountered:
              kevinb9n: We will document the IOOBE.  As for NPE, though, it is implied for every Guava parameter not marked @Nullable, and we think it's too much noise to document every case.  pengyunie: Sounds good to me, thanks!  ",2019-12-10 17:18:19,2019-12-17 16:05:34,1,1,4
Issue#3739 MOE Sync 2019-12-16,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Remove @DoNotMock from HashFunction.
 Users need some kind of way to, e.g., easily produce collisions in cases in which collisions should be rare.
Maybe we can provide a better way to do this, but for now, let's at least not forbid using mocking frameworks. c9ae0d3 



              The text was updated successfully, but these errors were encountered:
              ",2019-12-16 15:10:19,2019-12-16 15:36:39,1,2,3
Issue#3740 MOE Sync 2019-12-17,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Format the Javadoc of ByteStreams.read() with @throw tags.
 Fixes #3735 907ec2e  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-12-17 15:44:50,2019-12-17 16:05:34,1,2,3
Issue#3741 MOE Sync 2019-12-18,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Actually map Thenable helper interface to JS IThenable. The name is different to avoid a clash with elemental2 IThenable.
 8207e99  Use Error Prone's @GuardedBy enforcement to make sure that mutable state is appropriately synchronized.
 f6d2395 



              The text was updated successfully, but these errors were encountered:
              ",2019-12-18 16:39:09,2019-12-18 18:24:48,2,4,3
Issue#3743 MOE Sync 2019-12-20,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Expand Android access to Compact*Hash*
 Also rename newCompactHashMapWithExpectedSize(int) to newCompactHashMap(int) to
match newCompactHashSet(int). b2723ea 



              The text was updated successfully, but these errors were encountered:
              ",2019-12-20 14:51:29,2019-12-20 15:07:47,1,1,3
Issue#3745 Refactor Lambda can be replaced method reference,cla: yes,,,"wangzhaoning: 
No description provided.
  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  wangzhaoning: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-12-23 13:18:24,2019-12-23 18:49:46,1,1,2
Issue#3746 MOE Sync 2019-12-23,"cla: yes, internal-sync","szarnekow, cpovirk",,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make Compact(Linked)HashMap fall back to a java.util.(Linked)HashMap if hash flooding is detected, just as the immutable collections do.
 40d75c9  szarnekow: This formatting seems to be slightly off, here.  cpovirk: This is from some automated stripping of an internal-only line. Maybe someday we'll update our export process to clean things like this up.  szarnekow: Should this be a HashMap according to the comment in line 114 and the override in CompactLinkedHashMap?  cpovirk: Thanks. The other one should be LinkedHashMap, too. I'll fix it.  cpovirk: Will redo this with a fix for the problems with our tests under Maven's test runner.  ",2019-12-23 13:51:31,2019-12-23 15:42:21,1,12,5
Issue#3747 MOE Sync 2019-12-23,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected, just as the immutable collections do.
 5dffec1  Fix Maven test failures from CL 286604248:
- Make ""abstract"" class abstract. (And make its constructor package-private while we're at it.)
- Add a dummy test method (similar to what FilteredCollectionsTest already has).
 These should fix: https://travis-ci.org/google/guava/jobs/628734577 (Also, address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786) 8ccd518  Add @SuppressWarnings for new violations of the GuardedBy checker.
 9873642 



              The text was updated successfully, but these errors were encountered:
              ",2019-12-23 16:35:24,2019-12-23 16:59:40,3,20,4
Issue#3748 MOE Sync 2019-12-23,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  refactor: Lambda can be replaced method reference
 Fixes #3745 1d8ab4f  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2019-12-23 18:18:39,2019-12-23 18:49:46,1,1,3
Issue#3749 Adding travis_wait to mvn install,cla: yes,,,"FanJups: Why ?
Building such big APIs as guava   can take a lot of time.  It's possible to get a time out.
Here, I got a time out due to generating javadoc. Then, I decided to add travis_wait and it works pretty well. Official docs : https://docs.travis-ci.com/user/common-build-problems/#build-times-out-because-no-output-was-received 



              The text was updated successfully, but these errors were encountered:
              cpovirk: We have travis_wait on the script line below. As far as I know, we haven't seen similar problems with install. If that changes, we should make this change, but until then, let's keep it simple.  ",2019-12-23 19:49:38,2019-12-23 20:09:56,3,1,3
Issue#3752 MOE Sync 2019-12-24,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Correct @nullable and use Ints.constrainToRange()
 5d9fc39  ",2019-12-24 15:38:28,2019-12-26 03:26:08,1,4,3
Issue#3753 MOE Sync 2019-12-26,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix external GWT breakage from CL 272446666.
 a950b04  ",2019-12-26 15:28:47,2019-12-26 15:47:29,1,1,3
Issue#3755 MOE Sync 2019-12-26,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Stop classifying AbstractHashFloodingTest as a test to be run directly.
 When it's classified as a test to be run directly, our custom infrastructure generates AbstractHashFloodingTest_gwt, and Maven tries to run it, failing with:
No tests found in com.google.common.collect.AbstractHashFloodingTest_gwt Ideally, our infrastructure would recognize that an abstract class could never be run directly, at which point we wouldn't need to manually classify tests like this. But I don't remember seeing this problem in a long time, so we probably won't bother. 55e4929  ",2019-12-26 19:29:49,2019-12-26 19:51:21,1,1,2
Issue#3756 documenting IllegalArgumentException for too-large Cartesian Product in Sets.cartesianProduct,cla: yes,,,"mitchellirvin: #3742 mentions that there's no documentation for an IllegalArgumentException being thrown. It turns out there's a test case here that covers this case, but it's not mentioned in the JavaDoc:  
guava/guava-tests/test/com/google/common/collect/SetsTest.java
 
         Line 774
      in
      d9b73b2
  The original exception is thrown here in the CartesianList constructor:  
guava/guava/src/com/google/common/collect/CartesianList.java
 
         Line 59
      in
      d9b73b2
  I've just added a throws line in both of the JavaDocs for Sets.cartesianProduct()  ",2019-12-26 20:07:28,2019-12-26 20:47:29,1,1,2
Issue#3757 MOE Sync 2019-12-27,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Assign the result of contains() and containsAll() to a variable.
 This satisfies the CheckReturnValue checker.
[] d99aad2  ",2019-12-27 15:28:08,2019-12-27 15:51:30,1,4,3
Issue#3758 MOE Sync 2020-01-02,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix instances of {#foo} in Javadoc.
 31b05b7 



              The text was updated successfully, but these errors were encountered:
              ",2020-01-02 14:40:24,2020-01-02 16:07:31,1,4,3
Issue#3759 Allow user-provided Ticker in RateLimiter,"type=addition, package=concurrent, cla: yes, P4",,,"findepi: Fixes #3037. Fixes #1774 As mentioned in #3037 (comment), this is needed to remove Thread.sleep from unit tests of classes that internally use RateLimiter (eg https://github.com/prestosql/presto/blob/cb62e11aa72116c13bcac50ddcfb8e0f01bbb02a/presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestThrottledAsyncQueue.java#L105). 



              The text was updated successfully, but these errors were encountered:
              findepi: I'd use advice how to deal with  
guava/guava/src/com/google/common/util/concurrent/RateLimiter.java
 
         Line 482
      in
      d08dd75
   findepi: @netdpb can you suggest me the correct way to deal with #3759 (comment)?  netdpb: I'm not sure. That's what makes this task nontrivial.  findepi: @netdpb @kluever
Got it. At the same time, it's also a good thing to have.
(not being able to unit test code because it uses Guava is so lame) I propose that we introduce a SleepingTicker interface, with two methods. We don't need to provide a fake implementation (just as FakeTicker is not part of Guava API).  findepi: I am closing this PR. However, if you decide you want to review my contribution (along what i proposed or otherwise), let me know.  ",2020-01-03 08:21:29,2020-02-21 21:08:33,1,2,4
Issue#3761 Fix off-by-one error in AsciiDigits.asciiDigits initialization,"type=defect, package=primitives, cla: yes, P2",,,"perceptron8: AsciiDigits.digit('[') should return -1 instead of 36. I changed both loops to consistently use strict inequalities. Now it's clear that there are 10 + 26 = 36 digits / iterations in total. Fortunately this bug doesn't affect anything other than Longs.tryParse where it is - by accident - harmless. https://github.com/google/guava/blob/v28.2/guava/src/com/google/common/primitives/Longs.java#L405
https://github.com/google/guava/blob/v28.2/guava/src/com/google/common/primitives/Longs.java#L414 Note that Longs.tryParse('[', 36) and Longs.tryParse('0[', 36) currently return null because of digit >= radix condition, not digit < 0 as it should be. 



              The text was updated successfully, but these errors were encountered:
              perceptron8: I said about '[' = 'A' + 26 = 'Z' + 1, but I forgot to mention '{' = 'a' + 26 = 'z' + 1. Just for the record.  ",2020-01-05 15:31:39,2020-01-09 15:25:27,2,2,3
Issue#3763 MOE Sync 2020-01-06,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Update to JUnit 4.13
 1526201  Note another case in which our implementation of TypeVariable throws UnsupportedOperationException.
 55fdde6  Suppress ignored return values from Collection#contains*.
 I think this is all of them! b574bfa 



              The text was updated successfully, but these errors were encountered:
              ",2020-01-06 17:31:55,2020-01-06 19:21:49,3,9,5
Issue#3764 MOE Sync 2020-01-07,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Ensure that we generate a non-empty Javadoc jar for guava-gwt.
 Without it, we get an error during Sonatype deployment:
Missing: no javadoc jar found in folder '/com/google/guava/guava-gwt/28.2-jre' I hacked around this on the GitHub release branch for 28.2 by reenabling Javadoc:
a1b3c06 But as you may recall from CL 276327335, we're soon going to have no classes to generate Javadoc for (after we remove GWT-RPC support). So even with Javadoc generation enabled, we'd end up with no jar. To ensure that we get a jar, I've introduced a package-private dummy class (and then excluded it from the other steps in which source files are used). 80210f2  ValueGraph: Support incidentEdgeOrder=stable
 f05442b  ImmutableValueGraph: Support incidentEdgeOrder=stable
 RELNOTES=N/A 12b0521  Graph: Support stable incidentEdgeOrder for undirected graphs
 e541ab5  Add StandardImmutableUndirectedGraphTest
 5fddc48  Suppress GuardedBy violation in LocalCache.
 This looks like it's just for testing, which I think makes it /probably OK/, but feel free to suggest otherwise. db04af0 



              The text was updated successfully, but these errors were encountered:
              ",2020-01-07 16:57:49,2020-01-07 19:38:22,6,24,5
Issue#3765 MOE Sync 2020-01-08,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.
 aee5468  Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest
 0aba85d  Fix off-by-one error in AsciiDigits.asciiDigits initialization.
 Fixes #3761. 2b27d9f  Disable GWT-RPC by default in the open-source release.
 RELNOTES=Guava types can no longer be sent over GWT-RPC. To temporarily reenable support, set the guava.gwt.emergency_reenable_rpc system property to true. ff0cd94 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: Adding CLA:yes label because 2b27d9f comes from @perceptron8's PR #3761.  ",2020-01-08 17:55:45,2020-01-09 15:25:27,4,14,5
Issue#3766 MOE Sync 2020-01-09,"cla: no, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.
 845bc95  Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest
 5cc9a39  Fix off-by-one error in AsciiDigits.asciiDigits initialization.
 Fixes #3761. 7704a93  Disable GWT-RPC by default in the open-source release.
 RELNOTES=Guava types can no longer be sent over GWT-RPC. To temporarily reenable support, set the guava.gwt.emergency_reenable_rpc system property to true. 5062252  Add incidentEdgeOrder() to the [Value]Graph interface
 RELNOTES=graph: Add incidentEdgeOrder() to the [Value]Graph interfaces 3446a34  Make incidentEdgeOrder() public for [Value]Graph
 RELNOTES=graph: Allow setting a stable incident edge order by calling the newly added method [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()). fab6309  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: Oops. Didn't merge yesterday's PR. Let me do that and try again.  ",2020-01-09 15:22:40,2020-01-09 15:24:42,6,52,5
Issue#3767 MOE Sync 2020-01-09,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add incidentEdgeOrder() to the [Value]Graph interface
 RELNOTES=graph: Add incidentEdgeOrder() to the [Value]Graph interfaces ae2710e  Make incidentEdgeOrder() public for [Value]Graph
 RELNOTES=graph: Allow setting a stable incident edge order by calling the newly added method [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()). 0ceaed0  ",2020-01-09 16:47:08,2020-01-09 20:24:44,2,44,3
Issue#3769 MOE Sync 2020-01-14,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Upgrade checker-qual to v2.11.1.
 Fixes #3671 f85d76f 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Setting cla: yes because this commit comes from a PR the CL author submitted and signed the CLA for.  ",2020-01-14 14:57:59,2020-01-14 16:33:40,1,1,3
Issue#3772 MOE Sync 2020-01-16,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Update Public Suffix data.
 fea136b  Rewrite the Stopwatch docs to explain elapsed vs wall time
 81b9816 



              The text was updated successfully, but these errors were encountered:
              ",2020-01-16 18:06:54,2020-01-16 20:01:34,2,4,4
Issue#3773 MOE Sync 2020-01-17,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Update Resource.getResource to allow ignoring return value for existence checks.
 Specifically this impacts getResource(contextClass, resourceName) as this is already present on getResource(resourceName) RELNOTES=Update Resource.getResource(*) to allow ignoring return value for existence checks. 383c278  ",2020-01-17 19:49:38,2020-01-18 19:36:42,1,2,2
"Issue#3774 Write type annotations on types, not on declarations",cla: yes,,cpovirk,"mernst: 
No description provided.
  ",2020-01-19 05:13:05,2020-01-21 16:54:32,1,12,3
Issue#3777 Add implementation for Suppliers#memoizeWithRefresh,"type=addition, package=cache, cla: yes, P3",,,"StephenFlavin: In response to #872 (comment) I'd like to submit this PR for discussion. I began looking into this when trying to find a way to make my apps existing LoadingCache<K, V> populate itself with all of the possible keys and values it could from my database table, in my use case the input data is dynamic and contains keys which may or may not have a value in the database however, the database table is quite small and could easily be completely stored in memory and refreshed at a set interval, this will reduce the number of calls my app needs to make to the database exponentially(>10k requests per minute to 1 request per 15 minutes).
While searching I came across this issue #775 which is exactly the same problem I am trying to solve but I fear there was some confusion in the reasons why and the use case. I would prefer if there was an implementation of LoadingCache that had these semantics but for now I thought a smaller change would be to add an extra implementation to memoized suppliers. I am aware that the tests here are less than idea, I just followed the convention from the tests of the expiring memoizer which uses Thread.sleep. There is a good chance I've missed something which exists that does exactly what I require so if you know if it please tell me üòÑ 



              The text was updated successfully, but these errors were encountered:
              ",2020-01-22 09:01:21,,1,2,3
Issue#3778 Add more context to the guava.dev landing page,cla: yes,cgdecker,,"CydeWeys: This change makes it clear how widely used Guava actually is; it's not just another throw-away library, it's essential to Java development with Google and many other companies. This change is‚ÄÇ 



              The text was updated successfully, but these errors were encountered:
              CydeWeys: Ping?  ",2020-01-22 16:34:57,2020-02-12 16:10:16,1,1,3
Issue#3780 Remove some settings that we don't appear to need.,cla: yes,,,"cpovirk: The one I really care about removing is safe: true.
It seems to have been required at one point but not anymore.
And safe: true appears to prevent plugins from working.
This is a problem when I try to use jekyll-redirect-from for b/144155774. The rest are just to hopefully avoid future problems.
Or maybe cause them :)
But I'm encouraged that they're mostly absent from our other projects, like Truth. Also, while here, update our exclude section to look more like what we've done for our other projects.
Compare to google/truth@3f22311  ",2020-01-22 21:59:33,2020-01-22 22:17:42,1,1,2
Issue#3782 Add shortcuts to Javadoc.,cla: yes,,,"cpovirk: e.g., https://guava.dev/ImmutableList
https://guava.dev/ImmutableList.copyOf
https://guava.dev/immutablelist 



              The text was updated successfully, but these errors were encountered:
              ",2020-01-23 21:02:56,2020-01-23 22:34:09,1,8488,2
"Issue#3785 Issue #2617 add lastIndexOf(byte[] array, byte[] target)","type=addition, package=primitives, cla: yes, P3","szarnekow, Maaartinus, xindoo",,"fdesu: Hi, I hope this issue still makes sense. I wanted to attempt to add the lastIndexOf method to the Primitive's utility classes to fix #2617. To try it out I've started with simple implementation of Bytes#lastIndexOf to gather initial feedback. I want to implement lastIndexOf for other classes in the same manner. Do you think it is ok or I need to consider any other approach/put some annotations/etc. ?  xindoo: it's clearer  fdesu: @xindoo thanks for taking a look.
Do you think it is really easier to read? For me double for is kind of easier/clearer.  xindoo: labeled statement is easy to make me confusing, and I think it‚Äôs same to some of the others  fdesu: @xindoo yep, but problem with the label might be solved with simple break statement instead of continue to a label, right? I've sticked to the way how other methods were implemented, so I wanted to be consistent in regards with the labels.  Maaartinus: @fdesu No, breaking out would hit return i;. You could do but I don't claim it's nicer.  fdesu: I'm quite flexible in this regard and don't have strong preferences, but e.g. in java.lang.String.lastIndexOf(char[],int,int,char[],int,int) they do and it's pretty clear, so I think marks are fine when they are properly named. What do you @Maaartinus @xindoo think?  Maaartinus: IMHO the last occurrence of an empty string starts at array.length. AFAIK that's how String.lastIndexOf works and also what you get when you leave this test out.  fdesu: Yep, you're right, in this case array.target should be a return value  szarnekow: I think you meant array.length, didn't you?  fdesu: @szarnekow shouldn't have published the comment in hurry, yes, array.length  fdesu: I've rebased this branch against latest master  ",2020-01-28 16:14:26,,1,2,6
Issue#3786 MOE Sync 2020-01-28,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Link directly to guava.dev for Javadoc.
 70f7d83 



              The text was updated successfully, but these errors were encountered:
              ",2020-01-28 21:18:26,2020-01-28 21:42:41,1,1,2
Issue#3788 Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval,"type=defect, package=concurrent, cla: yes, P2",,cpovirk,"ElliottBrossard: Context: #3784  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ElliottBrossard: I submitted the corporate CLA on behalf of Snowflake, but I need our authorized signer (our VP) to click through the agreement still. Once that happens, I'll trigger the cla/google check again.  ElliottBrossard: Hmm is there a way to see the test outputs for Travis CI? The log indicates that the new test fails, but I don't see that /home/travis/build/google/guava/guava-tests/target/surefire-reports is made available anywhere...  cpovirk: On the job log page, you can scroll way to the bottom and click the $ util/print_surefire_reports.sh line and -- I see that it's not working :( I will have a look. Sorry about that.  cpovirk: Odd. It works for me locally (also maven-surefire-plugin:2.7.2, though only Maven 3.5). I wonder what's different about Travis. If you're lucky, the problem will reproduce for you locally:
mvn clean install ""-Dtest.include=**/AbstractFutureInnocuousThreadTest.java"" (You can probably skip the clean part, but I am always nervous about doing so.)  cpovirk: OK, I patched in your PR, so I have updates on 2 fronts: First, the failure is this: I am able to reproduce it locally -- but not when using the test.include flag from my previous post. It's possible that this means that your test is affected by a previous test's incomplete cleanup or other poor hygiene (AbstractFutureFallbackAtomicHelperTest? AbstractFutureCancellationCauseTest?). Second, I'm not completely sure what's up with util/print_surefire_reports.sh. Locally, I get a ""successful"" run but with no results with your commit patched in. That's because I'm seeing .xml files for most tests but not seeing one for your test. Maybe that's related to the SecurityManager? I don't know why the situation would be different under Travis, under which there are apparently no .xml files....  cpovirk: Now I am more confused! In an attempt to narrow down which tests were causing the problem, I ran:
mvn clean install ""-Dtest.include=%regex[.*util.concurrent.*.class]"" That got this far: Those all appear to be successes. But then the run aborted, claiming: So I'm not sure what's up. Hopefully it will be clearer to you from the code.  ElliottBrossard: Thanks for taking a look! I wonder if resetting the SecurityManager to its original state at the end of the test would fix the problem...I'll give that a shot locally without the test filter and then see if it passes, then see if another Travis run will succeed.  ElliottBrossard: I really wish I could see the test output from Travis...I tried resetting the SecurityManager with System.setSecurityManager(null); at the end of the test, and both mvn clean install ""-Dtest.include=%regex[.*util.concurrent.*.class]"" and mvn clean install ""-Dtest.include=**/AbstractFutureInnocuousThreadTest.java"" pass for me now, but it looks like the tests through Travis are still failing based on the result above :( Is /home/travis/build/google/guava/guava-tests/target/surefire-reports kept around in any logs/outputs?  ElliottBrossard: Let's check on the CLA status at least, since we submitted the corporate one: @googlebot I signed it!  ElliottBrossard: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ElliottBrossard: Woohoo, the CLA check passes now. Separately, though, I found a way to avoid depending on ForkJoinPool within Arrow Flight, so it's fine if AbstractFuture tries to access properties, and I'm not blocked on this PR any more. I'm happy to try to see it to completion, but it's not urgent in any case.  cpovirk: Thanks! I grabbed your test and tweaked it to use a custom SecurityManager subclass instead of writing a policy file. That appears to be enough to get mvn clean install to pass. Do you have any comments on the result, #3795?  cpovirk: (You can ignore the second copy of the files (from the android directory). I probably should have omitted that copy from the PR.)  ElliottBrossard: Nice, LGTM! Thanks for figuring out a way to make it work. It sounds like this project doesn't merge changes from Github anyway, so we can close this PR if you want to proceed with submitting your version to google3 (and then I'm assuming the changes get exported to Github at some point).  cpovirk: Right, we'll make the equivalent change internally and then mirror it back out (with your name attached). That will automatically close this PR, so we can keep it open just in case I somehow forget about it :)  ",2020-01-29 17:54:43,2020-02-07 02:44:29,1,2,4
Issue#3793 MOE Sync 2020-02-04,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Annotate upperCase and lowerCase with @LazyInit.
 This eliminates a TSAN warning. f325f04  ",2020-02-04 16:09:41,2020-02-04 16:27:05,1,2,2
Issue#3794 Love le changement,cla: no,,,"Govjo: 
No description provided.
  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  eamonnmcmanus: Faut pas pousser M√©m√© dans les orties.  ",2020-02-06 13:43:16,2020-02-06 22:27:55,1,1,3
Issue#3795 DO NOT MERGE: Make AbstractFuture compatible with ForkJoinPool (taken over from #3788),"type=defect, package=concurrent, cla: yes, P2",,cpovirk,"cpovirk: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Will make this change internally.  ",2020-02-06 19:22:46,2020-02-06 20:10:22,1,4,2
Issue#3796 MOE Sync 2020-02-06,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval.
 Fixes #3788, #3784 RELNOTES=Made it safe to load the AbstractFuture class from a ForkJoinPool thread under a security manager. e589b5c 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  happyfunmachine: Shut down Computer - silence  ",2020-02-07 02:22:37,2020-02-07 02:44:29,1,3,4
Issue#3797 MOE Sync 2020-02-10,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add missing @nullable.
 afa2101 



              The text was updated successfully, but these errors were encountered:
              ",2020-02-11 03:58:47,2020-02-11 04:23:59,1,2,3
Issue#3799 MOE Sync 2020-02-12,"cla: yes, internal-sync",,,"kevinb9n: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Apply changes from https://github.com//pull/3778 (which edited guava.dev) to README.md.
 5286210 



              The text was updated successfully, but these errors were encountered:
              ",2020-02-12 20:53:28,2020-02-12 21:59:04,1,1,3
Issue#3800 Simplify redundant `Collection.addALl()` call,"package=testing, status=triaged, type=performance, cla: yes, P4",,cpovirk,"zhangt2333: Simplify redundant Collection.addALl() call and Optimize performance. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  zhangt2333: @googlebot  I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: A couple quick thoughts, since I sadly doubt that I'll be able to dedicate a lot of time to this: I somewhat like to create the collection on one line and add to it on another if I am then going to also remove from it (or add more to it), like here. The multi-line process is a hint that there's going to be more to the collection than just its initial contents. That is, we're not just making a defensive copy. However, this is a minor point, and others might not see it that way. Plus, we're usually modifying the collection immediately after creating, so there's not much danger of confusion. For cases in which we add objects and then add more objects, I'm not sure that we necessarily improve performance by presizing to the size of the first set of objects, like here. It might actually be better to accept the default size. The unfortunate thing is that this code does need some performance tuning and general cleaning. I just fear that it would be a big investment.  zhangt2333: Thanks for your code review. This PR was submitted for the following reasons : But I agree with your thoughts : I respect your decision, so what should I do?  cpovirk: Thanks. I'm going to skip DerivedCollectionGenerators.java, since I'm not sure if that will help or hurt performance. (I notice that that code could probably be simplified even further, but I left it alone.) I'm looking to merge the rest.  ",2020-02-15 06:23:15,2020-02-23 22:51:09,2,9,4
Issue#3801 MOE Sync 2020-02-17,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Rename 'ConfigurableX' to 'StandardX' for [Value]Graph, which better captures what these implementations represent.
 Note that this work was already started in the past with the abstract StandardGraph tests. 1be4110 



              The text was updated successfully, but these errors were encountered:
              ",2020-02-17 21:31:26,2020-02-17 21:58:45,1,24,3
Issue#3802 MOE Sync 2020-02-19,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make TopKSelector ctor throw IllegalArgumentException when buffer size is too big to be held in memory.
 Previously this would lead to java.lang.NegativeArraySizeException. e0418c067aea976e3e59e23e035d15177112597a  Annotate FluentIterable.from(FluentIterable) with @DoNotCall
 RELNOTES=Annotate FluentIterable.from(FluentIterable) with @DoNotCall e3264687f823752dea2d724d2734b4a18e5c92a3  Fixing a typo in some Guava javadocs.
 RELNOTES=Fixing a typo in javadoc. 5efab94ad9b77695012878c6b7c5a8815c7d2d36  ",2020-02-19 15:56:32,2020-02-19 17:37:12,3,10,4
Issue#3804 MOE Sync 2020-02-21,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Invalidate delegate iterators during clear() and make FPP tests more strict
 2cb0a59  ",2020-02-21 14:23:37,2020-02-21 14:41:52,1,6,3
Issue#3805 MOE Sync 2020-02-23,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Simplify redundant `Collection.addAll()` calls.
 Fixes #3800 ae564a1 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-02-23 22:32:25,2020-02-23 22:51:09,1,18,3
Issue#3806 Remove @Beta from Service and ServiceManager,"package=concurrent, cla: yes, P2, type=debeta",,cpovirk,"swankjesse: This leaves AbstractListeningExecutorService as @beta. Closes: #3418 



              The text was updated successfully, but these errors were encountered:
              ",2020-02-25 18:19:54,2020-04-10 15:45:52,1,6,4
Issue#3807 MOE Sync 2020-02-25,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.
 Note: This is a pure refactor, no coverage is changing. 1ae455b  ",2020-02-25 19:41:47,2020-02-25 20:31:29,1,18,3
Issue#3810 MOE Sync 2020-02-27,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected, just as the immutable collections do.
 a97eccf  Make lenientToString easier for nullness-analysis tools to understand.
 And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases? As far as tools know, String.valueOf is capable of throwing an Error or RuntimeException, even when it's called with a parameter whose values is null. Thus, tools conclude that the flow of the program might reach o.getClass().getName() when o is null. That would in turn produce NullPointerException. Tools might not even be wrong, since String.valueOf could produce a StackOverflowError if we were just about to run out of space. Of course, in that case we're going to have problems in the catch() block no matter what... :) To avoid this, we check for null in lenientToString itself. e9d2fcc  Make GWT compilation of tests no longer flaky.
 bb6e55f  Update Public Suffix data.
 1323cda  Rename 'ConfigurableX' to 'StandardX' for Network, which better captures what these implementations represent.
 Note that this work was already done for [Value]Graph. ef37cf4  jbduncan: @lowasser Oops, was this unused wildcard import intentional?  ",2020-02-27 17:26:26,2020-02-27 18:02:07,5,43,6
Issue#3811 MOE Sync 2020-02-27,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Remove remaining documentation references to configurable implementations
 9c3f315  Delete unused method
 71f625f  ",2020-02-27 18:19:49,2020-02-27 18:40:54,2,14,3
Issue#3814 MOE Sync 2020-03-02,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make nullWriter().append(...) (both overloads) accept a null CharSequence.
 The docs of Writer are misleading: """"""
An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation
out.write(csq.toString())
""""""
https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence%29 But that's not true, as the docs go on to say: """"""
csq - The character sequence to append. If csq is null, then the four characters ""null"" are appended to this writer.
"""""" Accepting null in the 2-arg method is arguably even weirder, but at least the docs call it out more prominently:
https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence,%20int,%20int%29 Credit to the Checker Framework for identifying this bug. a27746a 



              The text was updated successfully, but these errors were encountered:
              ",2020-03-02 19:00:08,2020-03-02 19:39:37,1,4,3
Issue#3815 MOE Sync 2020-03-04,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Store each result in a ""Present"" instance instead of an Optional.
 We can't store a plain V because we need to distinguish between Optional.absent() and null (at least in the Google-internal successfulAsMap -- and eventually in whenAllComplete(...).collectToList() (#1519), which is likely to omit failures instead of mapping them to null as successfulAsList does). We may have problems using Optional when we adopt new nullability annotations, since Optional might not be a valid instantiation when V is instantiated with a nullable type. e371bf1  Migrate from @MonotonicNonNull to @nullable.
 The features of @MonotonicNonNull don't buy us anything in our use case, since we check the fields for null on every access, anyway. And @MonotonicNonNull is likely not to be available in the set of nullness annotations we adopt. https://checkerframework.org/api/org/checkerframework/checker/nullness/qual/MonotonicNonNull.html d4d5d62  Rollback a8107fa pending internal break
 8a32d0b  Roll-forward of a8107fa
 Make nullWriter().append(...) (both overloads) accept a null CharSequence. The docs of Writer are misleading: """"""
An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation
out.write(csq.toString())
""""""
https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#app... 29992f2  ",2020-03-04 15:12:17,2020-03-04 17:59:34,4,81,3
Issue#3816 Add UTs for base64Url() decode in BaseEncoding,cla: yes,nick-someone,,dyrone: I use base64Url in code if Gerrit to make the base64 URL safe. But found that it doesn't cover some basic cases.  ,2020-03-06 10:28:56,2020-03-20 21:49:54,1,1,3
Issue#3818 MOE Sync 2020-03-09,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Document that our racy access is safe.
 2c93018  ",2020-03-09 16:08:03,2020-03-09 18:09:37,1,2,3
Issue#3819 MOE Sync 2020-03-10,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Simplify AbstractGraphTest by replacing allowsSelfLoops() and incidentEdgeOrder() by graph accessors.
 a8d9fcb  Simplify the AbstractNetworkTest tree (undirected branch): Delete StandardSimpleUndirectedNetworkTest
 This is similar to an earlier refector of the AbstractGraphTest tree. Note: This is a pure refactor: No tests were added or removed. 34ed9b2  Move all tests from StandardMutableUndirectedNetworkTest to AbstractStandardUndirectedNetworkTest
 This is similar to an earlier refector of the AbstractGraphTest tree. Note: This is a pure refactor: No tests were added or removed. 6dfb447  Make StandardMutableUndirectedNetworkTest parameterized so that it tests both with and without self loops.
 This is similar to an earlier refector of the AbstractGraphTest tree. ee65950  Simplify the AbstractNetworkTest tree (directed branch): Delete StandardSimpleDirectedNetworkTest
 This is similar to an earlier refector of the AbstractGraphTest tree. 45bb762  Move all tests from StandardMutableDirectedNetworkTest to AbstractStandardDirectedNetworkTest
 This is similar to an earlier refector of the AbstractGraphTest tree. Note: This is a pure refactor: No tests were added or removed. bd328cd  Make StandardMutableDirectedNetworkTest parameterized so that it tests both with and without self loops.
 This is similar to an earlier refector of the AbstractGraphTest tree. c5d8c5b  ",2020-03-10 17:18:37,2020-03-10 17:54:19,7,42,3
Issue#3820  JDK 8  uses MAXIMUM_CAPACITY = Ints.MAX_POWER_OF_TWO,cla: yes,,,"kkraja555: If initialCapacity is greater than Ints.MAX_POWER_OF_TWO  then JDK 8 uses  Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY.
So, Even if return Integer.MAX_VALUE as MAXIMUM_CAPACITY, JDK  gonna use  Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY Snippet from JDK 8 Source:
public HashMap(int initialCapacity, float loadFactor) {
if (initialCapacity < 0)
throw new IllegalArgumentException(""Illegal initial capacity: "" +
initialCapacity);
if (initialCapacity > MAXIMUM_CAPACITY)
initialCapacity = MAXIMUM_CAPACITY; 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  kkraja555: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-03-11 05:58:22,2020-03-11 06:15:41,1,1,2
Issue#3822 Change maximum capacity for Maps as per JDK 8,cla: yes,,,"kkraja555: If initialCapacity is greater than Ints.MAX_POWER_OF_TWO then JDK 8 uses Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY.
So, Even if we return Integer.MAX_VALUE as MAXIMUM_CAPACITY, JDK gonna use Ints.MAX_POWER_OF_TWO as MAXIMUM_CAPACITY Snippet from JDK 8 Source:
public HashMap(int initialCapacity, float loadFactor) {
if (initialCapacity < 0)
throw new IllegalArgumentException(""Illegal initial capacity: "" +
initialCapacity);
if (initialCapacity > MAXIMUM_CAPACITY)
initialCapacity = MAXIMUM_CAPACITY; // which is Ints.MAX_POWER_OF_TWO  cpovirk: As I understand it, this is not a behavior change. Additionally, if a HashMap implementation someday supports a larger internal capacity, we would want to take advantage of it.  kkraja555: Makes sense. Thanks  ",2020-03-13 16:17:02,2020-03-16 14:24:23,1,2,3
Issue#3823 MOE Sync 2020-03-16,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Replace Thread.currentThread().interrupted() with Thread.interrupted() or Thread.currentThread().interrupt(), whichever seems appropriate.
 Thread.interrupted: static method on Thread which returns whether the thread has been interrupted (and resets the interrupt bit) Thread.currentThread().interrupt(): interrupts the current thread 744b356  ",2020-03-16 16:04:28,2020-03-16 16:26:02,1,2,3
Issue#3824 MOE Sync 2020-03-16,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Implement some more toString() methods for debugging.
 I added these locally while debugging, but they seem potentially generally useful. d52651a 



              The text was updated successfully, but these errors were encountered:
              ",2020-03-16 16:46:33,2020-03-16 17:51:58,1,6,2
Issue#3825 MOE Sync 2020-03-16,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Store `values` in a local first instead of repeatedly reading it from a field.
 At worst, this is a no-op. At best, it may perform better. b6d4f65  ",2020-03-16 17:59:32,2020-03-16 18:16:14,1,2,2
Issue#3826 Fixed double slicing ByteSource #3501,cla: yes,,,"Buddy119: Fixes #3501 add maxLength < 0 to check whether the offset is greater than the source size. If so, return an empty source according to the API description.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Buddy119: I signed it!  Buddy119: I signed it!  Buddy119: @googlebot  signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  Buddy119: @googlebot I signed it!  Buddy119: @googlebot I fixed it.  Buddy119: @googlebot I fixed it.  Buddy119: @googlebot I fixed it.  Buddy119: @googlebot I fixed it.  Buddy119: Can someone help me to see why the CLA check is still failed. I checked the CLA signment and do not find any mistake.  Buddy119: @googlebot  I fixed it.  cpovirk: Your Git commit uses an email address @outlook.com. It looks like you signed the CLA with your GMail address. You can amend your commit (https://stackoverflow.com/a/3042512/28465) and force push it.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  Buddy119: @cpovirk Done. Thanks a lot for your reply  cpovirk: Thank you. Two comments:  Buddy119: @cpovirk
Hi, As I am new for  git and github, so I do not know how to amend this PR. So I submit a new PR and add test in the new PR. Please close this PR. The new PR is #3829. I am sorry for the inconvenience  cpovirk: Sounds good. Thanks!  ",2020-03-17 18:26:45,2020-03-19 14:55:43,2,2,3
Issue#3827 MOE Sync 2020-03-17,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add `Duration`-based default methods to `ListeningScheduledExecutorService`
 They just delegate to the existing methods from the interface, using the existing saturated conversion to nanoseconds. This matches existing Duration-based overloads of (long, TimeUnit) methods in the same package. RELNOTES=Added Duration-based default methods to ListeningScheduledExecutorService. c7984e7  ",2020-03-17 20:18:16,2020-03-17 20:46:00,1,2,3
Issue#3828 Fixed NoSuchElementException when using Lists.partition and remove #3790,cla: yes,,,"Buddy119: NoSuchElementException occurs because of Iterator in AbstractList call hasNext() as below But after execute remove operation on List, the result of calling size() will change. So I make size as a final int listSize. 



              The text was updated successfully, but these errors were encountered:
              Buddy119: I test my commit locally. But do not add test in commit. If needed, i will add test in the future.  cpovirk: From the discussion on #3790, it sounds like, if anything, we would want to make hasNext() throw a ConcurrentModificationException.  Buddy119: @cpovirk
Hi, I have reviewed the discussion. But I think the expected behavior should not throw an exception. According to the discussion, they are confused on why iter.hasNext() is true. Actually, it is because class Partition use Iterator from superclass AbstractList. And the hasNext() function in class AbstractList is not perfect. They have been optimized in subclass ArrayList.Plese review below This is hasNext in AbstractList class. It call size() function This is hasNext in ArrayList class. It use value size. And the documentation said it is An optimized version of AbstractList.Itr. I see this in JDK1.8 when use fuction size(), every time propram call hasNext(). The hasNext() will call size(), then the value size will be recalculated. Back to the code from #3570, when the propram execute removeall(), the recalculate size will be 0, but the cursor is 1. so the hasNext() return true. example code in #3570 So I introduce listsize to save the value to make sure it only be calculated once. I also tested below code. I use ArrayList as container and then do the same removeAll operation. No exception is throw. So, I think the behavior of partition should be same  Buddy119: Typo 3790 not 3570  cpovirk: Let's consolidate the discussion on the other thread. We can reopen this one (or a new PR) if there is agreement on what to do.  Buddy119: @cpovirk  ok, i will discuss my thoughts in #3790 with them. Anyway thanks  ",2020-03-18 12:58:00,2020-03-18 17:13:34,1,1,3
Issue#3829 Fixed double slicing ByteSource #3501,cla: yes,,,Buddy119: As previous PR has commit should not occur. So I submit a new PR and add a test.  ,2020-03-19 13:23:08,2020-03-19 16:56:44,2,2,2
Issue#3830 MOE Sync 2020-03-19,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fixed double slicing ByteSource (#3501).
 Fixes #3829 6fb7746 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  Buddy119: @googlebot I consent.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-03-19 16:30:09,2020-03-19 16:56:44,1,4,3
Issue#3831 MOE Sync 2020-03-20,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add some unit tests for base64Url() in BaseEncoding
 Fixes #3816 e1c08a8  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-03-20 21:31:48,2020-03-20 21:49:54,1,3,3
Issue#3832 first commit,cla: no,,,"flicker01: 
No description provided.
  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: I think this may have been unintentional.  ",2020-03-22 06:57:21,2020-03-23 13:49:01,1,1,3
Issue#3833 MOE Sync 2020-03-25,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make sure native.js files are included in the Guava GWT release.
 This is needed for J2CL compatibility. b1511bd  Add missing `@since` for 1-arg `ServiceManager.addListener`.
 https://guava.dev/releases/15.0/api/diffs/changes/com.google.common.util.concurrent.ServiceManager.html#com.google.common.util.concurrent.ServiceManager.addListener_added%28com.google.common.util.concurrent.ServiceManager.Listener%29 29d356e 



              The text was updated successfully, but these errors were encountered:
              ",2020-03-25 13:44:40,2020-03-25 14:03:04,2,3,4
Issue#3836 MOE Sync 2020-03-30,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Deprecate 1-arg overload of ServiceManager.addListener.
 It default to directExecutor(). directExecutor() is often useful, but it should be an explicit choice, as some usages are dangerous:
https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/util/concurrent/ListenableFuture.html#addListener-java.lang.Runnable-java.util.concurrent.Executor- #3418 RELNOTES=util.concurrent: Deprecated the 1-arg overload of ServiceManager.addListener. 200056a 



              The text was updated successfully, but these errors were encountered:
              ",2020-03-30 12:49:11,2020-03-30 13:06:14,1,2,3
Issue#3837 MOE Sync 2020-03-30,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add immediateVoidFuture() to Futures.java to create an immediately succeeding ListenableFuture.
 RELNOTES=util.concurrent: Added immediateVoidFuture. e90c8bb  ",2020-03-30 23:18:25,2020-03-31 13:12:59,1,5,3
Issue#3839 MOE Sync 2020-03-31,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.
 RELNOTES=com.google.common.collect.ImmutableSortedSet: Added ceiling and floor methods for GWT emulated ImmutableSortedSet 706830e 



              The text was updated successfully, but these errors were encountered:
              ",2020-03-31 14:52:22,2020-03-31 15:47:39,1,6,2
Issue#3840 MOE Sync 2020-03-31,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Making headSet(E, boolean), tailSet(E, boolean) public in GWT emulated ImmutableSortedSet.
 RELNOTES=com.google.common.collect.ImmutableSortedSet: Making headSet(E, boolean) and tailSet(E, boolean) methods public for GWT emulated ImmutableSortedSet. e6779e4 



              The text was updated successfully, but these errors were encountered:
              ",2020-03-31 16:01:01,2020-03-31 16:36:48,1,3,2
Issue#3841 MOE Sync 2020-04-02,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make `Duration` overloads of `awaitRunning` and `awaitTerminated` `final` in all `Abstract*Service` classes.
 The other overloads already are already final. These ones aren't only because we didn't think to do this when adding the new default methods. 929867a  Extend deadline to fix flakiness.
 It's possible that we don't really need to assert that the pool finishes shutting down at all. Maybe the other existing assertions are enough? But I haven't bothered to look into it. 1611de3  ",2020-04-02 14:38:10,2020-04-02 16:08:56,2,6,3
Issue#3842 MOE Sync 2020-04-02,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add j2cl specializers for Doubles.min/max, Floats.min/max, Ints.min/max, and Shorts.min/max.
 79c3784 



              The text was updated successfully, but these errors were encountered:
              nick-someone: The travis build is green, but didn't get pushed back to github  ",2020-04-02 20:10:23,2020-04-02 22:30:02,1,32,3
Issue#3843 Fix unnecessary method access level escalation,"cla: yes, P3",,,"aczaplinski: The overridden methods are protected in superclasses, and there is no need do make them public in subclasses. Why this change doesn't break anything? Because the objects containing the changed methods are passed as HashFunction implementations, which hides the methods anyway.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  aczaplinski: @googlebot I fixed it.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Thanks, this is being submitted internally and will be synced out soon.  ",2020-04-03 09:03:21,2020-04-09 17:01:23,1,4,3
Issue#3844 Issue 3610 - documented exception when last element of a value collection is removed,cla: yes,,,"apostrophe: 
No description provided.
  cgdecker: I'm not sure this is worth documenting, at least not in the main documentation of Multimap itself. It's standard for the Java collections framework that unless a collection documents otherwise (e.g. the concurrent collections), modifications to its contents during iteration may cause ConcurrentModificationException.  cpovirk: I feel a little bad for having suggested documenting this. I see how there's not a great place to do so :\  ",2020-04-03 12:27:14,2020-04-08 20:39:09,1,1,4
Issue#3845 Make singletons' constructors private,cla: yes,,,"aczaplinski: 
No description provided.
  cky: I'm not on the Guava team. However, I've looked at Guava code for a long time, and generally, Guava leans heavily on implicit trust for package-private code. In this instance, for example, the Guava team probably trusts that there won't be any internal code that would try to instantiate those classes directly. Besides, if the Guava team did want to make this change for some reason, the usual Effective Java pattern for singletons is to use a one-constant enum.  aczaplinski: The one-constant enum singleton implementation can't be applied in these cases - the classes extend some other classes, which enums in Java can't do.  cgdecker: While in general it's preferable to have a private constructor for singletons, this doesn't really buy us anything in this case.  ",2020-04-03 12:47:47,2020-04-08 21:09:42,1,2,4
Issue#3846 MOE Sync 2020-04-03,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Change return type of ServiceManager.servicesByState() to ImmutableSetMultimap.
 But also generate a bridge method with the old signature for binary compatibility. #3418 (which I keep forgetting to mention from commits...) [] RELNOTES=util.concurrent: Changed the return type of ServiceManager.servicesByState() to ImmutableSetMultimap (but also retained a method with the old signature for binary compatibility). c467744  ",2020-04-03 18:56:57,2020-04-03 21:04:18,1,4,3
Issue#3847 Make `Iterators.peekingIterator()` reuse `AbstractIterator.peek()`,"cla: yes, P3",vztot,,"cky: Currently, Iterators.peekingIterator() will treat AbstractIterator just like any other iterator, and will call next() to get the element, which it then stashes. This is wasteful, since AbstractIterator already provides a peek() method that is designed to be compatible with the PeekingIterator interface, so use it instead. AbstractIterator subclasses UnmodifiableIterator, so we can do likewise with the PeekingIterator forwarder. The resulting forwarder is much more lightweight than the default Iterators.peekingIterator() implementation.  ",2020-04-07 00:33:20,,1,2,4
Issue#3849 Issue #3669: testing for presence of src.zip file in openjdk11,"cla: no, P3",cpovirk,,"developerhb: Issue #3669: testing for presence of src.zip file in openjdk11 Changed the configuration of .travis.yml to list the files and directories of JDK. This PR is for testing the presence of src.zip file in openjdk11 during Travis CI check and not for any changes. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  developerhb: @cpovirk I tried this configuration script: ls -lr $JAVA_HOME The src.zip is located in the lib folder as mentioned in this link. https://bugs.launchpad.net/ubuntu/+source/openjdk-lts/+bug/1791219 Have a look at the results of Travis CI https://travis-ci.org/github/google/guava/jobs/672402408
Jump to line 3988 in the log to see contents of lib folder. So, neither the src.zip is absent nor its symbolic link is incorrect.  cgdecker: What is this PR in reference to? In any case, we can't look at the changes unless you sign the CLA.  developerhb: @cgdecker What is this PR in reference to? In any case, we can't look at the changes unless you sign the CLA. This PR refers to issue #3669. Sorry for not mentioning it in the PR title, description and commit message. I will update them. I will also sign the CLA.  ",2020-04-08 07:06:04,2020-05-13 06:41:22,1,1,3
Issue#3852 MOE Sync 2020-04-09,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Merge StandardSimpleDirectedSortedNetworkTest into StandardMutableDirectedNetworkTest.
 1f1a0a2  Move tests from Multinetwork-test classes to base classes in preparation for merging the Multinetwork-classes with the mutable classes.
 8563c87  Merge StandardDirectedMultiNetworkTest into StandardMutableDirectedNetworkTest.
 d50fcf8  Merge StandardUndirectedMultiNetworkTest into StandardMutableUndirectedNetworkTest
 bbce918  Add StandardImmutableDirectedNetworkTest.
 879cec9  Fix unnecessary method access level escalation.
 Fixes #3843 8ae7330 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: CLA: yes from #3843  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-04-09 16:44:45,2020-04-09 17:01:23,6,22,4
Issue#3853 MOE Sync 2020-04-09,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Try yet again to inherit docs from the JDK when building Javadoc for snapshots.
 I am optimistic: See #3669 (comment) 4b55cc2  cpovirk: Need to fix internally to match the extra commit I added externally. Will open a new PR.  ",2020-04-09 18:08:46,2020-04-09 19:00:09,2,1,2
Issue#3854 MOE Sync 2020-04-09,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Try yet again to inherit docs from the JDK when building Javadoc for snapshots.
 I am optimistic: See #3669 (comment) c76c0af  Use @code instead of @link to allow imports to be stripped
 fd4ed9d  Don't request openjdk-11-source.
 We don't need it yet, since we build Javadoc snapshots with OpenJDK 8.
Maybe we'll need it someday, but currently it doesn't exist :) https://travis-ci.org/github/google/guava/jobs/673105448
E: Unable to locate package openjdk-11-source Followup to CL 305716744. 6e89adb 



              The text was updated successfully, but these errors were encountered:
              ",2020-04-09 19:37:02,2020-04-09 19:58:20,3,7,3
Issue#3856 MOE Sync 2020-04-10,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Remove `@Beta` from `Service` and `ServiceManager`.
 This leaves AbstractListeningExecutorService as @Beta. Fixes #3806, #3418
Relevant to #2966 (I have tweaked Jesse's initial PR to leave AbstractExecutionThreadService.triggerShutdown and AbstractService.doCancelStart as @Beta, since we aren't sure we like the locking behavior of the former, and we've realized that Listener.stopping might be a reasonable substitute for both.) RELNOTES=util.concurrent: Removed @Beta from Service and related classes. 33574d7  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-04-10 15:26:18,2020-04-10 15:45:52,1,12,3
Issue#3857 Updated readme.MD with some grammar corrections,"status=triaged, package=general, type=documentation, cla: yes, P2",,netdpb,"rohitpotdukhe: Added ',' below the heading 'Adding Guava to your build'.
Added ',' in front of 'i.e' at the first 'Important Warnings'.
Removed an unnecessary ',' in the first 'Important Warnings'.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  rohitpotdukhe: I signed a CLA  original-codematrix: @rohitpotdukhe check the exact message the bot wrote Once you've signed (or fixed any issues), please reply here with (at)googlebot I signed it! and we'll verify it. The quote fixed it now for you.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  rohitpotdukhe: @googlebot I signed it!  rohitpotdukhe: @rohitpotdukhe check the exact message the bot wrote Once you've signed (or fixed any issues), please reply here with (at)googlebot I signed it! and we'll verify it. The quote fixed it now for you. oh my bad, thank you for pointing that out for me.  ",2020-04-10 16:47:47,2020-04-22 14:45:07,1,1,5
Issue#3860 Filter out java.lang.Object from checked types and fallback to getMethods() if getDeclaredMethods() causes SecurityException.,"status=triaged, type=performance, package=eventbus, cla: yes, P4",DevenWen,,"vrozov: fixes #3858 and #3859  ljacqu: Just as a viewer passing by‚Äî Conceptually: if you fall back to getMethods it's a little excessive to call it for every supertype since you get all parent methods immediately. Might be worth checking first whether you can call getDeclaredMethods and if not to use clazz.getMethods as your sole source of methods. Stylistically: I find the two streams within each other to be really awkward. The previous version with regular loops was much more clear IMHO. Streams work out nicely when you have a small filter-and-transform thing going on but nesting them makes it difficult to remember where one is located.
I also find it awkward that the Set identifiers is just used for a uniqueness check (filter on L205) vs. how the map was used to determine the results in the end. Also just for reference the filter call on L192 that always returns true could be turned into a peek.  vrozov: Any plan to pull this into a release?  vrozov: @netdpb the PR is open for almost a year, are there any plan to merge it?  ",2020-04-10 20:33:35,,2,1,6
Issue#3863 MOE Sync 2020-04-15,"cla: yes, internal-sync",,,"kevinb9n: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix typo.
 edec878  Remove duplicate assumption.
 37b04ee  Exclude Vim swap files from the jar we build.
 Fixes #3861 9bcde05 



              The text was updated successfully, but these errors were encountered:
              ",2020-04-15 16:21:15,2020-04-15 17:05:25,3,6,4
Issue#3869 MOE Sync 2020-04-20,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  This change suppresses DefaultPackage check for any java class which uses the default java package, in preparation for enabling a compiler error that will prevent new instances of the bug.
 The Google Java Style Guide ¬ß8.2.1 requires Java files to have a (non-default) package declaration.  Missing package declarations can cause odd problems that are difficult to debug, such as a class not being included in a test suite or confusion around package-private visibility. RELNOTES=suppresses warning for using default package 6eec9ca  ",2020-04-20 16:53:40,2020-04-20 18:51:34,1,1,3
Issue#3870 Issue #3742 Changing the axesSizeProduct entries to Integer.MAX_VALUE instead of throwing exception,cla: no,,,"HelenaGregg: #3742 said that they would like to be able to create a Sets::cartesianProduct object that would have more than 2^31-1 elements in the resulting set. Currently, it throws an IllegalArgumentException when this happens. @Meijuh said that since ""java.util.Set::size() specifies that if the size would be more than Integer.MAX_VALUE it would simply be Integer.MAX_VALUE"" this should be fixed.
So the code change is that instead of throwing an exception, the remaining lower parts of the axesSizeProduct integer array are set to Integer.MAX_VALUE so the size function (which returns axesSizeProduct[0]) will now return Integer.MAX_VALUE.  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  HelenaGregg: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  HelenaGregg: I was having issues with CLA so opened a new request.  ",2020-04-21 23:18:58,2020-04-22 01:06:18,3,1,2
Issue#3871 Issue #3742 Changing the axesSizeProduct entries to Integer.MAX_VALUE instead of throwing exception,"type=enhancement, package=collect, cla: yes, P3",,,"HelenaGregg: #3742 said that they would like to be able to create a Sets::cartesianProduct object that would have more than 2^31-1 elements in the resulting set. Currently, it throws an IllegalArgumentException when this happens. @Meijuh said that since ""java.util.Set::size() specifies that if the size would be more than Integer.MAX_VALUE it would simply be Integer.MAX_VALUE"" this should be fixed.
So the code change is that instead of throwing an exception, the remaining lower parts of the axesSizeProduct integer array are set to Integer.MAX_VALUE so the size function (which returns axesSizeProduct[0]) will now return Integer.MAX_VALUE.  lowasser: Several other methods are defined in terms of axesSizeProduct and make assumptions about how it works, so please add tests for them; I suspect that several of them are broken in the current version.
In particular, iterator and contains.  (Further thinking about this brought up #3873 and #3874 .) In particular:  ",2020-04-22 01:05:41,,6,3,4
Issue#3872 MOE Sync 2020-04-22,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Update readme with some grammar corrections.
 Closes #3857 c6707a7  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: c6707a7 comes from @rohitpotdukhe's #3857, so I'm confirming consent.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-04-22 14:26:27,2020-04-22 14:45:08,1,1,3
Issue#3875 MOE Sync 2020-04-23,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Hide InternetDomainName.region() from GWT/j2cl.
 The method is not used from GWT/j2cl. c5ee3ef  Update Public Suffix data.
 The Guava copy is typically updated whenever Chrome's copy is updated, which
is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the
dates. 2cd759c  ",2020-04-23 15:47:53,2020-04-23 17:07:12,2,4,4
Issue#3876 MOE Sync 2020-04-24,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix GitHub #3873 by reimplementing Cartesian{Set,List}.contains.
 RELNOTES=Fixed #3873. 2750670 



              The text was updated successfully, but these errors were encountered:
              ",2020-04-24 14:06:43,2020-04-24 14:58:34,1,4,3
Issue#3877 Simplify some code,cla: no,,,"richard1230: I found some code can be simplified, when using IDEA for inspection. so I submit a PR here  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  richard1230: @googlebot I signed it!  cpovirk: Closing for now because the PR check is still failing. Do feel free to reopen if you're able to get it working.  ",2020-04-26 15:41:28,2020-05-01 21:37:09,2,6,3
Issue#3878 Issue #3874: Improve cartesianProduct.lastIndexOf ,"type=enhancement, package=collect, cla: yes, P2",lowasser,cpovirk,Koellewe: Implemented lastIndexOf() in CertesianList and added appropriate tests.  ,2020-04-27 13:01:28,2020-05-13 14:20:39,2,2,4
Issue#3880 Implement tryLockUninterruptibly,"type=addition, package=concurrent, cla: yes, P2",,,"arhimondr: Based on awaitUninterruptibly(Condition, ..)  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  original-codematrix: @arhimondr Before this can/will be merged you need to sign the cla. Check the message from the googlebot.  arhimondr: @original-codematrix I'm on it. Hopefully I'm going to be able to sign soon.  arhimondr: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  arhimondr: @original-codematrix done  ",2020-04-27 21:09:46,2020-05-06 23:35:55,1,2,4
Issue#3883 Move comment to a more appropriate location,cla: yes,,,"szarnekow: Signed-off-by: Sebastian Zarnekow sebastian.zarnekow@gmail.com 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  szarnekow: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Thanks! A quick question in case you happen to have immediate thoughts on it. If not, no problem. Is it suspicious that the putCoalescing implementation for subRangeMap has the very kind of range.isEmpty() check that this comment seems to warn against?
 
guava/guava/src/com/google/common/collect/TreeRangeMap.java
 
         Line 511
      in
      bc7248b
   szarnekow: Good catch. Test and fix is in #3886  ",2020-04-28 08:32:38,2020-04-28 15:40:29,1,1,3
Issue#3884 Smarter implementation of CartesianList#lastIndexOf,cla: yes,,,the-thing: As per #3874 suggestion implemented a smarter version of com.google.common.collect.CartesianList#lastIndexOf.  the-thing: I just realised there is already one pull request opened #3878  ,2020-04-28 08:55:09,2020-04-28 09:01:38,1,2,2
Issue#3885 MOE Sync 2020-04-28,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Move comment to a more appropriate location
 The comment was added along with putCoalescing in CL 143507326. Fixes #3883 8a704a8 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-04-28 15:40:04,2020-04-28 15:40:29,1,2,3
Issue#3886 Fixed TreeRangeMap.SubRangeMap.putCoalescing,cla: yes,,,szarnekow: The short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated. Signed-off-by: Sebastian Zarnekow sebastian.zarnekow@gmail.com  cpovirk: Thanks!  ,2020-04-28 16:03:30,2020-04-28 20:35:32,1,2,3
Issue#3887 MOE Sync 2020-04-28,"cla: no, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fixed TreeRangeMap.SubRangeMap.putCoalescing
 The short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated. Fixes #3886 6e0e978  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-04-28 20:18:16,2020-04-28 20:35:32,1,4,3
Issue#3891 Fix equals when comparing two PowerSet instances with different order,cla: yes,MrHeer,,"RyanSkonnord: Fixes #3890  nick-someone: Thanks for the improvement! That certainly does look like a bug, and I appreciate the reproducing test. I'll mirror this change internally, and you should see it added back out later today or tomorrow.  RyanSkonnord: Cool; thank you! üòÅ I'm very glad to have helped.  ",2020-05-03 01:35:05,2020-05-04 20:39:03,2,2,4
Issue#3892 MOE Sync 2020-05-04,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix PowerSet.equals() when comparing to another PowerSet whose items are the same, but in a different iteration order.
 RELNOTES:
Fix issue where PowerSet.equals(PowerSet) would erroneously return
false if the PowerSet's underlying Sets were equal, but in a different
iteration order. Fixes #3891, #3890 befd5ce 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: CLA:yes from #3891's acceptance  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-05-04 16:19:26,2020-05-04 20:39:03,1,5,3
Issue#3893 MOE Sync 2020-05-06,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Adds constants for `Cross-Origin-Embedder-Policy(-Report-Only)?` headers ([W3](https://wicg.github.io/cross-origin-embedder-policy/#COEP)).
 RELNOTES=Adds constants for Cross-Origin-Embedder-Policy(-Report-Only)? headers. a061f7e  Implement tryLockUninterruptibly
 Fixes #3880 c927836 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: CLA-yes from #3880  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-05-06 22:23:51,2020-05-06 23:35:55,2,6,3
Issue#3897 issue#3781 add ImmutableMap collector for Stream of Map.Entry,"type=addition, package=collect, cla: yes, platform=java8, P3",,,"xiantang: Hi, I hope this issue still makes sense. I wanted to attempt to add the toImmutableMap() method to the ImmutableMap to fix #3781.  ",2020-05-09 12:55:39,,2,2,3
Issue#3898 MOE Sync 2020-05-12,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Ensure QueueWorker does not outlive SequentialExecutor on iOS.
 When SequentialExecutor is used on iOS as J2ObjC-transpiled code, we need to
make sure that SequentialExecutor.QueueWorker does not outlive its outer
class. Previously, because the inner class was annotated with @WeakOuter, it
could happen, and, when this happened, the inner class would then invoke
methods on a dangling pointer and crash the process in turn. The issue is now
fixed by annotating the worker field in the outer class with @RetainedWith. Although @RetainedWith was initially designed for bimaps, the annotation
addresses exactly the lifecycle problem here. 180157a 



              The text was updated successfully, but these errors were encountered:
              ",2020-05-12 13:26:49,2020-05-12 13:48:41,1,2,3
Issue#3899 MOE Sync 2020-05-13,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  In ImmutableIntArray, use Arrays.copyOf when expanding the internal array.
 909bdb2  Implemented lastIndexOf in CartesianList
 Fixes #3878 13da6dd  googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-05-13 14:17:09,2020-05-13 14:20:39,2,7,3
"Issue#3901 More rounding methods: {long, BigInteger, BigDecimal} ->double ",cla: no,,,"dhruvdeveloper: Added some nonstandard rounding methods in the new BigDecimalMath. Issue from @lowasser, issue number: #3895 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  dhruvdeveloper: @googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  dhruvdeveloper: It was a local issue when signing CLA.  ",2020-05-14 06:22:53,2020-05-14 06:34:53,1,1,2
"Issue#3902 More rounding methods: {long, BigInteger, BigDecimal} -> double","type=addition, package=math, cla: yes, P3",,lowasser,"dhruvdeveloper: Created new class BigDecimalMath for More rounding methods: {long, BigInteger, BigDecimal} -> double.
Issue: #3895  lowasser: We're going to be doing this with an API surface analogous to the other rounding methods in Guava, all of which accept a java.math.RoundingMode parameter.  This work has already started in d01a196.  ",2020-05-14 07:03:48,2020-06-05 22:25:37,1,1,4
Issue#3904 MOE Sync 2020-05-14,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Suppress IdentityHashMapBoxing check
 This would soon become an ERROR in blaze. 0b46c0b  Adding the Sec-CH-UA header. Ignore ClangTidy. It has to do with the constant naming scheme for httputils.h.
 Spec for header: https://wicg.github.io/ua-client-hints/ bd128b4 



              The text was updated successfully, but these errors were encountered:
              ",2020-05-14 14:07:55,2020-05-14 14:52:53,2,6,3
Issue#3905 MOE Sync 2020-05-17,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Adding the rest of the client-hints headers (besides Arch which I don't think we need).
 Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints RELNOTES=N/A fab81c3  ",2020-05-17 04:04:30,2020-05-17 04:22:48,1,2,2
Issue#3908 #1315 Add awaitTerminationUninterruptibly(..) for ExecutorService - M‚Ä¶,"type=addition, package=concurrent, cla: yes, P2",,cpovirk,"NisargC: @cpovirk
Kindly review the changes and suggest edits. Thanks,
Nisarg 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  NisargC:  NisargC: @googlebot I signed it!  NisargC:  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-05-21 23:08:26,2020-07-22 16:22:32,1,2,3
Issue#3912 Fix #3911 Efficient UnmodifiableMultimap forEach,"package=collect, type=performance, cla: yes, platform=java8, P3",,cpovirk,"carterkozak: forEach can pass calls directly to the delegate protected
collection because it is a read-only operation.  ",2020-05-27 23:01:32,2020-06-09 01:09:33,1,1,4
Issue#3915 MOE Sync 2020-06-01,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Document that Ranges are immutable.
 Fixes #1813 9485ee0  ",2020-06-01 15:10:22,2020-06-01 15:45:47,1,2,3
Issue#3917 MOE Sync 2020-06-02,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Added support for the ""font"" Top-Level Media Type (https://tools.ietf.org/html/rfc8081)
 RELNOTES=net: Added support for ""font"" Top-Level Media Type 45003f5  guava: disavow VisibleForTesting
 Johannes and I invented this class in the early days of Blaze,
and in hindsight it was clearly a mistake; it encourages self-deception.
This change adds a comment discouraging its further use. 8bb1bf1  ",2020-06-02 17:16:21,2020-06-02 18:04:16,2,7,4
Issue#3919 MOE Sync 2020-06-04,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Remove @DoNotCall from FluentIterable.from(FluentIterable).
 4ec122f  Update Public Suffix data.
 This copy is typically updated whenever Chrome's copy is updated, which
is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the
dates. 0d5c668  ",2020-06-04 14:32:32,2020-06-04 14:48:02,2,6,4
Issue#3920 Reuse ThreadFactory in MoreExecutors,"package=concurrent, type=performance, status=will-not-fix, cla: yes",,,"dennyac: Currently we create a new ThreadFactory instance whenever we call MoreExecutors.newThread() Just changing it to reuse the same instance. The only usage of platformThreadFactory() is in MoreExecutors.newThread() and they set the name of the thread in that method.  netdpb: The instance returned by Executors.defaultThreadFactory() can be functionally different after System.setSecurityManager() is called, and in any case the thread names are different for different returned objects. While maybe rare, these are not insignificant bits of configuration. What's the value of making this change, compared to that not well known but nonzero cost? I don't think anyone's worried about performance aspects of creating thread factories.  dennyac: @netdpb - The threadName is always overwritten in MoreExecutors.newThread() which is the only place it is used. The SecurityManager is only used to getThreadGroup() which by default, returns Thread.currentThread().getThreadGroup() which is what is used in Executors.defaultThreadFactory() But, if someone sets the SecurityGroup and overrides getThreadGroup(), then functionality will change for threads created after that. Not sure how common that is.  netdpb: platformThreadFactory() is public. It's not only used from newThread(). This would change its behavior for all users.  dennyac: Woah, I totally missed that! Feel free to close this PR.  ",2020-06-04 18:13:46,2020-06-08 14:21:52,1,1,3
Issue#3921 MOE Sync 2020-06-05,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Implement BigIntegerMath.roundToDouble, which rounds to the nearest representable double value.
 Partially implements #3895 RELNOTES=math: Added BigIntegerMath.roundToDouble. d01a196 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-05 14:51:52,2020-06-05 14:53:56,1,6,3
Issue#3922 MOE Sync 2020-06-08,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Efficient UnmodifiableMultimap forEach
 forEach can pass calls directly to the delegate protected
collection because it is a read-only operation. Fixes #3911
Fixes #3912 98a6164  Add Comparators.min/max
 RELNOTES=collect: Added two-element min and max methods to Comparators. fc7433e  Discourage Ordering.min(E, E) and max(E, E) in favor of Comparators.min(E, E, Comparator) and max(E, E, Comparator).
 RELNOTES=Discourage the use of Ordering.min(E, E) and max(E, E). 8bf31e1 



              The text was updated successfully, but these errors were encountered:
              googlebot: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: A Googler has manually verified that the CLAs look good. (Googler, please make sure the reason for overriding the CLA status is clearly documented in these comments.) ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-06-09 00:42:31,2020-06-09 01:09:33,3,8,4
Issue#3924 MOE Sync 2020-06-09,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Suppress IdentityHashMapBoxing check
 6d6dcf2 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-10 00:57:58,2020-06-10 01:17:04,1,2,3
Issue#3925 MOE Sync 2020-06-10,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Break retain-cycle in Converter.java, when used in J2ObjC target.
 4e820ef 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-10 14:55:21,2020-06-10 15:17:46,1,2,2
Issue#3930 MOE Sync 2020-06-12,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Cleanup ByteStreamsTest.java to fix a couple of IntelliJ warnings/suggestions.
 #codehealh acc2296  Inline `ByteStreamsTest#assertEquals(byte[], byte[])`
 #codehealth 62ee8a0 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-12 17:13:59,2020-06-12 17:42:00,2,2,3
Issue#3931 MOE Sync 2020-06-12,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Upgraded ByteStreams#copy(InputStream, OutputStream) to use the faster FileChannel if possible.
See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.
 RELNOTES=io: Upgraded ByteStreams#copy(InputStream, OutputStream) to use the faster FileChannel if possible. 27bc3de 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-12 22:47:01,2020-06-13 01:03:39,1,6,3
Issue#3933 Replace anonymous with lambda expression,cla: no,,,"bhawna94: Replace anonymous with a lambda expression  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  bhawna94: @googlebot I signed it!  bhawna94: @googlebot I signed it!  bhawna94: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. Googlers: Go here for more info.
@googlebot I signed it!  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  bhawna94: @googlebot I fixed it.  bhawna94: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors. If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)? If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. Googlers: Go here for more info. @googlebot I fixed it.  bhawna94: Generated CLA, but facing some problem while signing. That's why closing the PR.  ",2020-06-15 11:03:23,2020-06-15 11:48:19,1,1,2
Issue#3934 Replace anonymous class with lambda expression,cla: yes,,,"bhawna94: 
No description provided.
  bhawna94: @netdpb @cpovirk
please review the PR and let me know your thoughts.  nick-someone: Hello! Thanks for looking to contribute. However, Guava has two builds (android/ and guava/), the first of which requires Java 7:  
guava/android/pom.xml
 
         Line 119
      in
      e839f94
  We tend to avoid changes that create unnecessary drift between the Java 7 and Java 8 versions, which this would fall under (see the Java 7 version here:  
guava/android/guava/src/com/google/common/base/Optional.java
 
         Line 295
      in
      e839f94
   ",2020-06-15 11:59:35,2020-06-16 16:46:53,3,2,3
Issue#3936 MOE Sync 2020-06-16,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Revert a1e9a0b
 Causing some internal failures 457767d 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-16 15:18:00,2020-06-16 15:32:52,1,6,3
Issue#3937 MOE Sync 2020-06-17,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add a Guava wiki entry about finding the min/max for various circumstances.
 3bb0d85  Avoid reentrancy in ExecutionSequencer.
 db53357  Revert db53357
 Broke a test 2ef8463 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-17 14:55:39,2020-06-17 15:32:19,3,2,3
Issue#3939 MOE Sync 2020-06-18,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add LongMath.roundToDouble.
 RELNOTES=Add LongMath.roundToDouble (#3895) 6f17659  Add a test for the bug introduced by CL 316779471.
 68962e5 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-18 14:21:52,2020-06-18 14:23:05,2,6,4
Issue#3940 Add tests to guarantee no need copyOf map,"type=enhancement, package=collect, cla: yes, P4",,,"samukce: I added tests to guarantee that unnecessary maps are not created given some possibles performance issues mentioned here #3467. Though I was not able to create a test scenario to simulate the issue. So, opening this PR to have at least some explicit tests narrowing this behavior. 



              The text was updated successfully, but these errors were encountered:
              googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-06-20 04:22:50,,1,2,3
Issue#3941 MOE Sync 2020-06-22,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Avoid reentrancy in ExecutionSequencer.
 37d4506 



              The text was updated successfully, but these errors were encountered:
              ",2020-06-22 13:21:37,2020-06-22 13:41:12,1,5,2
Issue#3942 MOE Sync 2020-06-23,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix memory leak in SingletonImmutableBiMap which would appear in transpiled J2ObjC code.
 The @RetainedWith annotation can not be used on both sides of the retain-cycle. The RegularImmutableBiMap does not have this problem, because it uses Inverse inner class. This CL applies similar trick in SingletonImmutableBiMap, although without additional inner class. RELNOTES=Update SingletonImmutableBiMap to avoid retain-cycle in transpiled Obj-C code. d7d07d5  ",2020-06-23 14:44:11,2020-06-23 15:04:16,1,2,2
Issue#3947 MOE Sync 2020-06-29,cla: yes,,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE
 3d88ea8  In ImmutableDoubleArray and ImmutableLongArray, use Arrays.copyOf when expanding the internal array.
 In ImmutableIntArray, where we already made this change, remove an inconsistent this.. 6a8cfb3  Implement BigDecimalMath.roundToDouble.
 RELNOTES=Add BigDecimalMath.roundToDouble. 690b2a6  ",2020-06-29 15:01:33,2020-06-30 13:06:21,3,21,4
Issue#3949 MOE Sync 2020-06-30,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix Converter.java by moving @RetainedWith annotation to the correct side of the cycle.
 The annotation should be placed inside the ""parent"" object, and not the ""child"" object. Reference: https://developers.google.com/j2objc/javadoc/annotations/reference/com/google/j2objc/annotations/RetainedWith RELNOTES=N/A 58ad44a  ",2020-06-30 15:36:49,2020-06-30 16:29:12,1,2,2
Issue#3950 MOE Sync 2020-07-01,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Remove unnecessary comment.
 a3084e4 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-01 18:59:43,2020-07-01 19:32:40,1,2,3
Issue#3954 MOE Sync 2020-07-06,"cla: yes, internal-sync",,,"kevinb9n: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Hint with the type that `oldFuture` / `newFuture` / `ref`'s `Future` never contains a value.
 Being clear may become slightly more valuable when we put nullness type annotations on this code. e655aa8 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-06 21:07:08,2020-07-06 22:08:23,1,2,3
Issue#3956 MOE Sync 2020-07-08,internal-sync,,,"kevinb9n: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix annotation positions in Guava.
 795b357  Update Public Suffix data.
 The [] copy is typically updated whenever Chrome's copy is updated, which
is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the
dates. For this update, [] 8ec74f4 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-08 17:41:56,2020-07-08 21:45:52,2,4,3
Issue#3958 MOE Sync 2020-07-10,"cla: yes, internal-sync",,,"kevinb9n: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Declare static types as Queue instead of Deque.
 This may slightly clarify how the object is used. (I was looking through com.google.common for Deque instances that were used as stacks, so I noticed this one that was used only as a queue.) 752dd15 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-10 16:01:57,2020-07-10 20:46:36,1,2,3
Issue#3959  Add Micrometer's Lower Dot Notation to CaseFormat,"type=addition, package=base, cla: yes, P4",,,"jastka4: Fixes #3929  googlebot: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  jastka4: @googlebot I signed it!  googlebot: CLAs look good, thanks! ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-07-10 22:37:37,,1,3,3
Issue#3961 Add other useless files & folders to .gitignore,"type=other, cla: yes, P3",,,"FanJups: 1) Maven 2) Netbeans 3) VS Code 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-11 10:47:14,,4,1,3
Issue#3962 MOE Sync 2020-07-13,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Speed up Traverser and cut about 30 lines of code.
 When stacked against the unsubmitted Walker, before the change:
breadthFirst was roughly on par;
preOrder/postOrder were about 70% slower (1359 vs. 2358); After adopting the Walker impl, the tree traversal preorder/postorder are improved close to Walker impl. There is still about 10% slowness (2405 vs. 2268) remaining, which I suspect is due to Iterator being slower than Spliterator, because with Spliterator, we can tryAdvance() once for each element, while with Iterator, we have to call both hasNext() and next(). The graph traversal adoption is similar, with about 15% remaining slowness compared to Walker (1583 vs. 1338), which is likely result of Spliterator.tryAdvance() vs. Iterator.hasNext() + next(). Did not adopt the Walker's breadth-first impl for the following reasons: On the other hand, the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily. For follow-up: It might be better to go complete lazy for breadth-first, even at the cost of 10% slowdown in the full-traversal benchmark. Plus we can reuse code and delete the two existing BreadthFirstIterator classes. I'm going to add the benchmark class in the the labs directory to compare between Iteration and Traverser. RELNOTES=Optimize Traverser e81f501  Add toString() for SequentialExecutor's worker runnable
 1facb16  ",2020-07-13 14:53:36,2020-07-13 15:39:58,2,8,2
Issue#3964 MOE Sync 2020-07-14,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make breadth-first iterators consume the successor iterators lazily, and refactor to  cut about 150 lines of code.
 RELNOTES=Lazier Traverser#breadthFirst(). 579c06d  jbduncan: Is this line meant to end with breadthFirst or depthFirstPreOrder?  cpovirk: @fluentfuture  fluentfuture: Indeed that was a copy-paste error. I'll send a fix.  ",2020-07-14 15:43:58,2020-07-14 18:37:42,1,4,5
Issue#3967 MOE Sync 2020-07-16,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Unconditionally call setException for RejectedExecutionException.
 Under JDK11, the write to thrownByExecute / thrownFromDelegate is upsetting TSAN. I suspect that TSAN is incorrect (and that it is likely to identify the same ""problem"" in other code). However, we years ago questioned whether the code I'm removing served any real purpose...
(fixes #2877)
...so now seems like a good time to get rid of it and, at minimum, hopefully eliminate the current TSAN failure. The code that we're running in the executor is under our control. (That is, we're the ones who implement Runnable.run().) We're catching exceptions (and thus any RejectedExecutionException) in the obvious places. Occasionally we do call listeners, but naturally we do that only after completing the future or at least calling setFuture (after which a stray setException(rejectedExecutionException) would be a no-op). The one(?) exception to that is that InterruptibleTask.run() can call currentThread.interrupt(), which we learned a few years ago can call arbitrary code through nio callbacks. At some point, though, I throw my hands up and say ""whatever."" (If the interrupt were to be a problem, it would have to be with an executor that executes tasks inline, like directExecutor. But I note that rejectionPropagatingExecutor, at least, already defends against this for directExecutor itself (by skipping the RejectedExecutionException logic entirely). So the danger exists only with CombinedFutureInterruptibleTask or with a non-directExecutor that can execute tasks inline without catching exceptions -- and again, only in concert with nio interrupt callbacks. I think.) 238c383  Add @DoNotMock to Traverser.
 RELNOTES=Add @DoNotMock to Traverser 83e545c 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-16 14:50:42,2020-07-16 15:36:12,2,8,3
Issue#3970 MOE Sync 2020-07-22,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Warn about stack overflows from directExecutor, add more warnings (including on AbstractFuture.set* and cancel), and move warnings to directExecutor itself.
 e649a15 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-22 14:18:25,2020-07-22 14:35:15,1,9,2
Issue#3971 MOE Sync 2020-07-22,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add awaitTerminationUninterruptibly.
 Fixes #3908
Fixes #1315
Somewhat relevant to #3655
Vaguely relevant to google/error-prone#1490, since it creates a @CheckReturnValue variant of a java.util.concurrent method that returns false to indicate timeout. RELNOTES=util.concurrent: Added awaitTerminationUninterruptibly. 1ec90b0 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-22 16:03:19,2020-07-22 16:22:32,1,4,2
Issue#3973 MOE Sync 2020-07-23,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Shorten toString for AbstractFuture implementations inside util.concurrent.
 9da95c2  De-beta toImmutable* methods in GWT variants(""emulated"") of common.collect.
 4e12478 



              The text was updated successfully, but these errors were encountered:
              ",2020-07-23 17:07:52,2020-07-23 17:31:14,2,10,2
Issue#3974 Removed some redundant 'else's using early return,"type=enhancement, cla: yes, P4",Archish27,netdpb,"pradipta: 
No description provided.
  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Archish27: LGTM üöÄ  netdpb: Hi @pradipta. Many of these look good, and we'll push out a commit that incorporates them, attributed to you, soon. We're not taking the ones where the else branch is of roughly the same size as the if branch, because those seem to have more parallelism.  ",2020-07-25 14:33:52,2021-02-24 17:19:12,3,3,4
Issue#3980 Added support to use mark/reset for ByteArrayDataInput,"type=enhancement, package=io, cla: yes, P4",,,xxDark: #3979  ,2020-08-03 10:57:05,,2,3,2
Issue#3982 MOE Sync 2020-08-04,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Ensure that the set returned by ImmutableMap.keySet() is serializable when K is serializable, and similarly for values().
 Set should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set, the original map is serialized is well. This change changes this so that only the keys are serialized. RELNOTES=collect: Ensure that the set returned by ImmutableMap<K, V>.keySet() is serializable when K is serializable (and similarly for values()). cf94f56 



              The text was updated successfully, but these errors were encountered:
              ",2020-08-04 15:14:43,2020-08-04 15:33:28,1,13,2
Issue#3983 MOE Sync 2020-08-06,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix memory-leaks in LocalCache on iOS, caused by:
 Retain-cycle between outer LocalCache instance and inner Values, KeySet and EntrySet instances. The use of @weak and @WeakOuter is incorrect there, since inner instances can outlive outer LocalCache instance. The correct solution is to use @RetainedWith annotation to inner-classes. Retain-cycle between ReferenceEntry objects which internally form a doubly-linked list. Fixed by adding @weak annotation to ""next"" and ""previous"" links. This is correct, since ReferenceEntry instances are already retained by Segments. The unit test for leak detection is added inside Xplat, because the required testing infrastructure is not present inside ""google_common"" (the IosAsserts class). Eventually, everything should be moved to ""google_common"". RELNOTES=Fix memory-leak in LocalCache on iOS 8fb1cad  ",2020-08-06 17:48:43,2020-08-06 18:56:59,1,2,1
Issue#3985 MOE Sync 2020-08-07,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  [Efficiency] Creates a variant of parseHextet and parseOctet that can work on a larger string with start and end indices.
 97638e6  [Efficiency] Modifies textToNumericFormatV4 to parse the input String in place.
 0e6c0c9  ",2020-08-07 15:36:53,2020-08-07 15:54:04,2,4,1
Issue#3987 MOE Sync 2020-08-12,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Avoid boxing in Doubles.constrainToRange() and Floats.constrainToRange().
 Fixes #3984 f850db5  Remove `@Beta` from `Multimaps.toMultimap`.
 Fixes #3957 RELNOTES=collect: Removed @Beta from Multimaps.toMultimap. b9fe10a  Bring back previously deleted SerializedForms so that old data can still be read.
 RELNOTES=collect: Data that was previously serialized, and that originated from ImmutableMap.keySet() or .values(), is now deserializable again. d66fda4  ",2020-08-12 15:05:44,2020-08-12 15:24:36,3,8,4
Issue#3988 MOE Sync 2020-08-14,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  [Efficiency] Modifies testToNumericFormatV6 to parse the input String in place.
 RELNOTES=InetAddresses: InetAddress parsing is now more efficient 62a8cc4 



              The text was updated successfully, but these errors were encountered:
              ",2020-08-14 15:28:14,2020-08-14 15:58:30,1,4,1
Issue#3991 MOE Sync 2020-08-19,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Switch GWT rules implementation from native to .bzl.
 RELNOTES: GWT rules are now implemented in .bzl. 8f12ec7  ",2020-08-19 18:31:09,2020-08-19 18:58:48,1,31,1
Issue#3993 Simplify some code,"package=collect, type=other, package=escape, package=math, package=eventbus, status=will-not-fix, package=primitives, cla: yes",,,"EruDev: I found some code to simplify when using IDEA to inspect the code, so I submit a PR here. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  EruDev: @googlebot I signed it!  netdpb: Thanks! In order to keep the difference between the JRE flavor and the Android flavor to a minimum, we tend not to use lambdas and Java >=8 APIs in the JRE flavor unless they're necessary. I don't think any of these affect performance or correctness, so I don't think we'll apply these changes. Thanks for your efforts, though!  ",2020-08-21 14:21:25,2020-08-21 20:34:16,1,5,2
Issue#3994 MOE Sync 2020-08-21,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Don't directly call ByteBuffer, etc. methods that have covariant returns in Java 9+.
 Doing so produces a jar that doesn't work under Java 8. This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead), but we should also add safeguards. The normal solution to this general problem is to use --release, but doing so here is complicated. For more information, see #3990 406a4ea  ",2020-08-21 15:15:12,2020-08-21 17:22:30,1,20,2
Issue#3996 MOE Sync 2020-08-24,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Adding SEC-CH-UA-Arch header.
 Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints RELNOTES=N/A 8ed8696  Work around an android bug in LockSupport, this time with @CanIgnoreReturnValue
 a849f7f 



              The text was updated successfully, but these errors were encountered:
              ",2020-08-24 16:15:41,2020-08-24 16:36:54,2,8,1
Issue#3998 MOE Sync 2020-08-25,"cla: yes, internal-sync",kilaka,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Throw if @subscribe is applied to a method that takes a primitive parameter.
 Fixes #3992. RELNOTES=Prevent @subscribe being applied to a method that takes a primitive, as that will never be called. 9fe4ecd  kilaka: Hi :) Can we somehow postpone the string concatenation and param wrapping for only when the argument is illegal? For example, what log4j do.
Or by using a lambda (I know lambdas aren't welcome on Guava. See one more option at the bottom), like: Another option is to just check the argument inline and call a specific method to throw the IllegalArgumentException.
Example: What do you think?
@netdpb Cheers.  kilaka: Come to think about it, 3rd option looks to me even more readable than checkArgument().
Wonder how others view it...  cpovirk: I would have to look at bytecode to confirm, but I don't think there's any allocation. Concatenation of literals happens at compile time, and checkArgument has non-varargs overloads: https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/base/Preconditions.html#checkArgument-boolean-java.lang.String-java.lang.Object-java.lang.Object-java.lang.Object-  cpovirk: (It remains a fair point that we use checkArgument habitually, even in some cases where a manual check and throw would be better.)  cpovirk: (I do hope that we'll one day add methods like illegalArgument(""foo %s"", bar).)  kilaka: I like the ""shortness"" of illegalArgument(""foo %s"", bar).
I'd like it to be clear that it throws an exception.
Something of the sorts looks very readable: illegalArgument just builds the exception with the string and whatever formatting logic it applies. @cpovirk  ",2020-08-25 13:57:28,2020-08-25 15:19:28,1,6,3
Issue#4000 MOE Sync 2020-08-27,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Deprecate Files.createTempDir(), noting that better alternatives exist for Android as well as for users running Java 7 or later.
 RELNOTES=io: Deprecated Files.createTempDir(). 9258dd9 



              The text was updated successfully, but these errors were encountered:
              ",2020-08-27 15:14:40,2020-08-27 15:38:44,1,2,2
Issue#4003 MOE Sync 2020-08-31,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Update Public Suffix data.
 The copy is typically updated whenever Chrome's copy is updated, which
is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the
dates. ac1b252 



              The text was updated successfully, but these errors were encountered:
              ",2020-08-31 15:15:23,2020-08-31 15:37:28,1,2,2
Issue#4007 Issue #4004 AssertionError from Range.gap.,"type=defect, package=collect, cla: yes, P2",ljacqu,cpovirk,"Koooooo-7: Fix #4004, Got IAE instead of AssertionError.  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Thanks. I suspect that what we'd prefer is to avoid calling describeAsLowerBound at all in this case. But I'd have to look at gap more to confirm (and to figure out what to do instead).  Koooooo-7: I think the problem is the ranges contain each other(intersection), it is illegal for gap.
and I made an opposite case. so, I added the ranges check for the gap.
PTAL @cpovirk .  cpovirk: Sounds reasonable, thanks. Would you also: Add your tests for the AssertionError cases include the 2 input ranges in the exception message  Koooooo-7: @cpovirk  I added the test and the invalid ranges in the IAE message.  cpovirk: Thanks. I got another set of eyes on this, and hopefully we'll get it submitted internally and merged out soon.  ",2020-09-05 03:38:57,2020-09-17 15:21:08,7,2,3
Issue#4008 MOE Sync 2020-09-08,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Minor internal change
 3a85bdc 



              The text was updated successfully, but these errors were encountered:
              cpovirk: This may pass normal tests, but it will fail the GWT tests (which we run only at release time). The right thing for us to do will be to edit the MOE config to add this new GWT inherits line to the list of those to be stripped.  nick-someone: Sounds good to me. I'll pull back this PR and send you the change internally.  cpovirk: Thanks. (Also: I am not ""in the office"" yet, but I saw that some bugs came in on Friday, and I'll triage those soon if you haven't already.)  ",2020-09-08 13:02:35,2020-09-08 13:24:39,1,1,2
Issue#4009 MOE Sync 2020-09-08,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Minor whitespace-only change
 19c2299  ",2020-09-08 16:29:39,2020-09-08 16:30:18,1,1,1
Issue#4012 Fixed Typos/Grammatical Errors,cla: yes,"ljacqu, Kraisornbiinthi",cpovirk,"nishantc1527: I just ran stuff through grammar checkers and found some typos/grammatical errors. Since I only added some small changes, I didn't think I needed to do anything special like open an issue or something, but if I should in the future please tell me. If you think I got some stuff wrong, I'll fix it but there are definitely some typos in there.  cpovirk: Thanks. I'm going to merge the typo fixes and a simplification. The rest of the changes look more neutral (and a few of them look like steps backward). In the interest of getting this merged quickly, I'll stick to the noncontroversial ones.  jonahgreenthal: Two of these changes are typo fixes, but none of them fixes a grammatical error. Four go from correct to differently correct, one goes from correct to differently correct but definitely less clear, one goes from correct to incorrect, one goes from debatably correct to definitely incorrect, and one goes from correct code formatting to incorrect code formatting.  nishantc1527: Thanks for your feedback, I went and changed what I thought you were talking about and now there are only more correct changes (I think). If there is anything else, please let me know. And sorry about the code formatting, I don't know what's going on with that.  nishantc1527: Ok, I fixed everything you said. Now it's just the bare minimal typos.  ",2020-09-11 05:14:08,2020-09-15 16:52:13,6,2,5
Issue#4015 Added sort pom plugin and sorted the pom (mvn sortpom:sort),cla: yes,,,"amoghcoolkarni983: Plugin Link: https://github.com/Ekryd/sortpom Maven Command: mvn sortpom:sort 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  amoghcoolkarni983: @googlebot I signed it!  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  amoghcoolkarni983: @googlebot I signed it!  nick-someone: Thank you for this proposal. However, I'm not sure this is providing much benefits for us here (and is failing to resolve in our travis build), so I'm going to not accept this at this time.  ",2020-09-11 18:33:04,2020-09-16 18:22:59,1,6,2
Issue#4016 Moe Sync,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Make ClosingFuture available in open-source Guava (@beta).
 RELNOTES=util.concurrent: Add ClosingFuture. 4da7927  Fix typos and remove unnecessary words.
 Fixes #4012 970e8af 



              The text was updated successfully, but these errors were encountered:
              google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: Setting CLA:yes per CLA agreement on #4012  ",2020-09-12 02:16:41,2020-09-15 15:38:17,2,9,3
Issue#4017 FEATURE: add tools for merging of maps,"type=addition, package=collect, cla: yes, P3",,,"hosuaby: The present PR adds methods for merging of maps. Merging of maps is an operation that combines content of two or more maps into a new map while handles entries with duplicate key. Example: The present PR add new methods to class Maps: Real life use-case:
Assuming we have multiple data sources that returns data in form of maps. We would like to aggregate those data by merging those maps. Unit tests give us an example using measurements provided by different sources.  jbduncan: @hosuaby I'm not a member of the Guava team or even a Googler, just so that you're aware, but have you considered merging your maps together like the following?  jbduncan: Oops, sorry, I didn't realise that one of my examples above prints the wrong value! Here's my updated code snippet:  hosuaby: Hello, @jbduncan
Thanks for review! It's all the question of simplicity. In your example, the user must ""prepare"" the maps by converting them into SetMultimap beforehand. Feature provided by present PR doesn't have such requirements. All methods accept input maps ""as is"", mutable or immutable. The second point, in your example, We are looking to merge maps of Map<K, Set<V>> or Map<K, List<V>>. Methods in the present PR are able to merge values of any compatible types. It unit tests, I merge maps of Map<String, ? extend Number>. But, thank you for your suggestion of MultiMaps. I refactored implementation of methods using ImmutableListMultiMap and it became much shorter. If you have, any questions, suggestions, objections do not hesitate to comment. I try my best to make those tools the most generic and convenient to as much use-cases as possible.  jbduncan: @hosuaby Okay, thanks for explaining! If or when the Guava team get around to reviewing this, the first thing that they'll probably say is they'll need to internally discuss the API first, as mentioned in the contribution docs and the project philosophy. And even then there's no guarantee it will end up in Guava, because they may think that existing APIs, like in my example above, are good enough. Just so that you're warned. :)  ogregoire: The biggest question would come from the resolution of conflicts. You are conveniently speaking about Map<X, Set<Y>> which has a rather trivial resolution, but what about any Map<X, Collection<Y>>. Do you want one entry, several entries? I believe that you'd be best using Maps::difference. Ok, it's just a bit of work compared to a simple helper method, but it'll get your work done rather easily.  hosuaby: @ogregoire That's what mergeFunction made for. We can specify which collection we want (in case, we merge Map<X, Collection<Y>>:  ",2020-09-13 12:25:56,,1,2,4
Issue#4018 Bump checker-qual from 2.11.1 to 3.6.1,"package=general, cla: yes, P3",,,"mernst: 
No description provided.
  cpovirk: 1bfbca3 gets us part of the way there (at least to major version 3, which, as you've pointed out, is the especially important part). Bonus: We may actually make a Guava release pretty soon.  mernst: Thanks for upgrading to 3.5.0.  ",2020-09-13 17:52:11,2020-09-15 19:14:26,1,1,2
Issue#4019 Issue #4002 UnsupportedOperationException when modify TreeRangeSet.subRangeSet(Range).,"type=defect, package=collect, cla: yes, P2","Kraisornbiinthi, agniutkarsh, cpovirk",cpovirk,Koooooo-7: The same implementation as remove.  Kraisornbiinthi: Hell  ,2020-09-15 12:04:51,2020-09-18 16:54:11,1,2,5
Issue#4020 MOE Sync 2020-09-15,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make ClosingFuture available in open-source Guava (@beta).
 RELNOTES=util.concurrent: Add ClosingFuture. 4885156  Fix typos and remove unnecessary words.
 Fixes #4012 12c9012  Bump checker-qual from 2.11.1 to 3.5.0.
 For unfortunate reasons involving internal legacy infrastructure, this is easier than merging #4018. But at least it gets us on the newest major version. That makes it easier to see that it's safe to resolve a conflict between, say, 3.5.0 and 3.6.1 by just using the newer one. a2ad1ee  Remove spurious annotation to fix Travis build.
 f106608  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  nick-someone: cla:yes per #4012  ",2020-09-15 15:49:51,2020-09-15 16:52:13,4,10,4
Issue#4021 Fixed Typos,"type=enhancement, package=concurrent, package=io, cla: yes, P4",,,"nishantc1527: I found multiple typos in comments and class names, so I fixed it.  lowasser: According to dictionary.com, it is in fact ""interruptible,"" not ""interruptable.""  nishantc1527: Thanks, I changed it back.  ",2020-09-15 21:12:10,2020-09-17 15:21:08,2,4,3
Issue#4024 DO NOT MERGE,cla: yes,,,"cpovirk: Fully qualify reference to DoNotMock to avoid
https://bugs.openjdk.java.net/browse/JDK-7101822  cpovirk: (Starting with an external PR to verify that this passes the JDK 8 build.)  cpovirk: OK, it works.  ",2020-09-16 13:56:38,2020-09-16 14:26:34,1,1,1
Issue#4025 MOE Sync 2020-09-16,"cla: yes, internal-sync",,nick-someone,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make EqualsTester test that non-Strings are not equal to their String representation.
 RELNOTES=Make EqualsTester test that non-Strings are not equal to their String representation. 5f5a9b9 



              The text was updated successfully, but these errors were encountered:
              ",2020-09-16 18:17:36,2020-09-17 14:21:21,1,5,2
Issue#4026 Update Joiner.java,cla: no,,,"mieuf: add skipSpecifiedEle method to skip 'specified element'  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  kluever: I'd recommend using a stream/filter operation before calling Joiner.join() to filter out specific elements.  ",2020-09-17 03:10:42,2020-09-17 14:16:54,1,1,2
Issue#4029 MOE Sync 2020-09-17,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix AssertionError from Range.gap.
 Fixes #4007, #4004 88593a0  Fix random typos in Guava.
 Fixes #4021 1102d11  Add back web.app to public suffix list
 d12e983  Externally restore @DoNotMock to ClosingFuture.Combiner, and externally add @DoNotMock to ClosingFuture itself.
 This implements an alternative workaround for https://bugs.openjdk.java.net/browse/JDK-7101822, replacing the one submitted in CL 331770482. 7b4c82f  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-09-17 14:52:39,2020-09-17 15:21:08,4,17,4
Issue#4030 MOE Sync 2020-09-18,"cla: yes, internal-sync",Kraisornbiinthi,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix UnsupportedOperationException from TreeRangeSet.subRangeSet(...).add(...).
 Fixes #4019, #4002 3685507  Deal with Class#isInstance checks which are guaranteed to be false.
 2fa82f2  Change `ForwardingMap.remove(Object)` parameter name from `object` to `key` to match `Map.remove(Object key)`.
 Fixes #4028 204904c  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  Kraisornbiinthi: Thank you  ",2020-09-18 16:26:50,2020-09-18 16:54:11,3,8,4
Issue#4031 Add poll() and offer() to Uninterruptibles class,cla: no,,,"tanmauec: 
No description provided.
  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Closing in favor of #4034.  ",2020-09-19 20:41:50,2020-09-20 16:21:36,1,2,2
Issue#4032 Add poll() and offer() to Uninterruptibles class,cla: no,,,"tanmauec: 
No description provided.
  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Closing in favor of #4034.  ",2020-09-19 20:46:47,2020-09-20 16:21:34,1,2,2
Issue#4033 Add poll() and offer() to Uninterruptibles class,cla: yes,,,"tanmauec: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Closing in favor of #4034.  ",2020-09-19 20:54:04,2020-09-20 16:21:32,1,2,2
Issue#4034 google#1409 Add poll() and offer() to Uninterruptibles class,"type=addition, package=concurrent, cla: yes, P3",cpovirk,cpovirk,"tanmauec: 
No description provided.
  tanmauec: Any updates?  cpovirk: I still probably won't have a chance for a while, but it's on my to-do list.  tanmauec: I still probably won't have a chance for a while, but it's on my to-do list. Works bro, I don't have slightest clue how full is your plate üëç  tanmauec: @cpovirk Can you please review and possibly close this!  cpovirk: It's still on my list, just still behind some other things :(  tanmauec: @cpovirk  Sorry again, I was waiting for my first PR accepted, that has happened so I am fine! Please suggest some feature development problems to work on..  cpovirk: Sorry for the delay on the other one, which was simple enough that I should have accepted it more quickly. I'll let you know if I think of some more ideas.  tanmauec: Sure Ack.  tanmauec: Sorry for the delay on the other one, which was simple enough that I should have accepted it more quickly. I'll let you know if I think of some more ideas. @cpovirk any issues/features you suggest?  cpovirk: The one thing that comes to mind is a Dependabot config (like this one) for https://github.com/google/caliper. But before doing that, we'd really like to update all our dependencies (mvn org.codehaus.mojo:versions-maven-plugin:2.8.1:update-properties org.codehaus.mojo:versions-maven-plugin:2.8.1:use-latest-releases, similar to this commit) and all our plugins (which may be easiest to do by hand).  cpovirk: Also #3679  tanmauec: @cpovirk Sure will take up #3679 first as it seems quick fix.  cpovirk: Sorry for taking so long on this. The main thing that these implementations will need to do is to track how much time has passed. Currently, they always pass the original timeout to the delegate. But when that call is interrupted, they should pass only how much time is left. You can see how to set that up here;  
guava/android/guava/src/com/google/common/util/concurrent/Uninterruptibles.java
 
         Line 81
      in
      ce71b12
   tanmauec: @cpovirk I have updated offer, poll functions adding timeout update as required. Please check.  ",2020-09-19 21:19:07,,4,4,3
Issue#4035 MOE Sync 2020-09-22,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add brief test to Range for `[_, X].isConnected([X, _])`;
 RELNOTES: n/a 4629a25  ",2020-09-22 15:48:34,2020-09-22 16:12:13,1,2,2
Issue#4036 Remove unnecessary parens,"cla: yes, P3",,,"T45K: This PR is related to PR #3191. In #3191, unnecessary parens in PairedStats were omitted, but its similar class, Stats was not touched.
I found unnecessary parens in the class, so removed. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  T45K: @googlebot I signed it!  ",2020-09-23 05:46:38,2020-09-29 13:44:27,1,2,2
Issue#5250 google#2058 Add documentation on what happens when exception thrown b‚Ä¶,"type=api-docs, package=concurrent, status=triaged, cla: yes, P2",,cpovirk,"tanmauec: ‚Ä¶y Callback 



              The text was updated successfully, but these errors were encountered:
              ",2020-09-27 14:27:23,2020-10-14 14:09:31,1,1,3
Issue#5251 MOE Sync 2020-09-28,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Extract most of the meat of ClassPath.DefaultScanner into a superclass ResourceScanner to enable lazy scanning to a stream:
 static Stream scan(ClassLoader); c034924  Internal ClassPath changes.
 3079cfd  ",2020-09-28 15:36:14,2020-09-28 19:33:15,2,4,1
Issue#5252 MOE Sync 2020-09-29,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Internal changes to ClassPath.
 643423a  Internal changes to ClassPath.
 b7e83b1  Remove unnecessary parens
 Fixes #4036 30c69a1  Also print Android test failures.
 0644480  Fix ClassPathTest on Android JDK 11.
 037e10c 



              The text was updated successfully, but these errors were encountered:
              google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Setting cla: yes because the commit by another author is derived directly from PR #4036 from that author.  ",2020-09-29 04:50:14,2020-09-29 13:44:27,5,7,3
Issue#5253 Update README.md,"cla: no, invalid",,,"harshalpawar41: for demo and Hacktoberfest event please accept my pull request.  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  kluever: Sorry, I'm not sure what benefits this change has.  JakeWharton: This is Hacktoberfest spam. Follow these steps https://hacktoberfest.digitalocean.com/details#spam to disqualify the user.  kluever: Thanks @JakeWharton - done.  ",2020-09-30 18:51:52,2020-10-01 21:17:37,1,1,3
Issue#5255 Adding ppc64le architecture support on travis-ci,"type=other, cla: no, P4",cgdecker,cgdecker,"kishorkunal-raj: Hi,
I have added support for ppc64le architecture support on travis-ci in the branch. I believe it is ready for the final review and merge.
The travis-ci build log can be tracked on the link :  https://travis-ci.com/github/kishorkunal-raj/guava/builds/187593609
Please have a look on it Thanks !! 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Mass-closing PRs without an accepted CLA. You're welcome to reopen if you get the check to pass. Alternatively, feel free to open a plain issue to describe the change you'd like to see made.  kishorkunal-raj: @googlebot I signed it!  cpovirk: (recreated as #5271)  ",2020-10-01 12:31:49,2020-10-05 16:09:34,1,1,4
Issue#5256 MOE Sync 2020-10-01,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fully remove GWT-RPC support externally.
 Really, really closes #3680. Possible future work: RELNOTES=Guava types can no longer be sent over GWT-RPC. Even the earlier, temporary way to reenable support (guava.gwt.emergency_reenable_rpc) no longer has an effect. 4d2eb90  Mark BigDecimalMathTest as fully @GwtIncompatible.
 Currently it has every member annotated as @GwtIncompatible. This works fine internally, but the external GWT tests (which we run only at release time) complain about the resulting empty BigDecimalMathTest_gwt:
https://github.com/google/guava/blob/master/guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt.java 0f9ee58 



              The text was updated successfully, but these errors were encountered:
              ",2020-10-01 14:33:55,2020-10-01 14:55:51,2,68,2
Issue#5258 MOE Sync 2020-10-02,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Begin tweaking Guava sources to satisfy Copybara.
 This is surely not a complete set of changes, but it's enough to get me started. b5dce62 



              The text was updated successfully, but these errors were encountered:
              ",2020-10-02 15:54:58,2020-10-02 16:24:51,1,21,2
Issue#5259 #3679 - Removed all references to now useless workaround,cla: no,,,"Saucistophe: Fixes #3679 !  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Saucistophe: @googlebot I signed it!  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  Saucistophe: @googlebot I fixed it.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-10-02 21:54:49,2020-10-02 22:08:31,1,11,1
Issue#5260 #3679 - Removed all references to now useless workaround,cla: no,,,"Saucistophe: Fixes #3679 



              The text was updated successfully, but these errors were encountered:
              google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Mass-closing PRs without an accepted CLA. You're welcome to reopen if you get the check to pass.  Saucistophe: @googlebot I fixed it.  ",2020-10-02 22:09:27,2020-10-05 16:09:08,2,11,2
Issue#5261 Clarified HashMultimap javadoc about concurrency,cla: no,,,"Saucistophe: Fixes #3682  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Mass-closing PRs without an accepted CLA. You're welcome to reopen if you get the check to pass.  Saucistophe: @googlebot I fixed it.  googlebot: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  Saucistophe: @cpovirk I'm sorry, I've tried everything I could, I'm at a dead end. I signed my CLA.
I initially commited with another address, for which I signed too.
Is there any way I can get more information about what's going wrong? Thanks in advance!  cpovirk: https://github.com/google/guava/pull/5261.patch shows your email address as carpentier.ch@gmail. If you add the "".com,"" I think the check will pass.  Saucistophe: @googlebot I fixed it.  Saucistophe: God I feel stupid. Thanks for your help, I fixed it and opened a new PR (#5266)  ",2020-10-02 22:34:20,2020-10-05 16:09:03,1,2,3
Issue#5263 MOE Sync 2020-10-05,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Remove GWT tests from open source.
 We will continue to run these tests internally. I'm not sure how much value the remaining open-source GwtTestSuite file provides us. Hopefully it's at least a sanity check on .gwt.xml files. But I haven't tested by breaking a .gwt.xml file to see what happens. 5773612  Tweak TODOs.
 58855f4  Remove a couple GwtSerializationDependencies classes from open-source Guava after all.
 As noted in 0cb89dd, this isn't necessary. As also noted there, we have additional FooGwtSerializationDependencies classes that I'm leaving in place because they are supertypes of the prod classes and thus harder to remove. But I'm removing these 2 because it saves me a few lines in the Copybara config :) (Followup after #3680) cb6023b 



              The text was updated successfully, but these errors were encountered:
              ",2020-10-05 16:45:35,2020-10-05 17:13:46,3,167,2
Issue#5264 MOE Sync 2020-10-06,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Move gwt-user dep to test scope.
 We no longer need it as a prod dependency (not even provided) after removing GWT-RPC support. (Followup after #3680) Fixes google/truth#637, if GitHub will let me get away with closing a Truth issue with a Guava commit :) 6a6285d  ",2020-10-06 16:08:42,2020-10-06 17:00:41,1,1,2
Issue#5265 Removed all references to now useless workaround,"package=collect, type=other, cla: yes, P2",,cpovirk,"Saucistophe: Fixes #3679 



              The text was updated successfully, but these errors were encountered:
              ",2020-10-07 19:17:36,2020-10-09 15:43:19,1,11,3
Issue#5266 Clarified HashMultimap javadoc about concurrency,"package=collect, type=api-docs, cla: yes, P2",,netdpb,"Saucistophe: Fixes #3682 



              The text was updated successfully, but these errors were encountered:
              ",2020-10-07 19:21:14,2020-10-09 15:43:18,1,2,2
Issue#5267 MOE Sync 2020-10-08,"cla: yes, internal-sync",cpovirk,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Run all zero of our GWT tests during presubmit/CI.
 Unfortunately, this does not detect any bogus  lines in test .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml).
(And bogus  lines in prod .gwt.xml files were already detected even before this change.) As a result, this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I'll end up rolling it back if we reenable the tests externally someday. Still, for now it seems like a reasonable thing to clean up, if only to prevent me from trying to clean it up again 6 months from now :) (Followup after #3680) 9230b14  Check the generated PublicSuffixPatterns.java into Piper.
 Copybara can't export generated files. Also, reformat the template (and then the file) so that autoformatting the file doesn't produce diffs. eebb75e  Omit TestModuleEntryPoint from open-source repo.
 Since I've disabled GWT tests in the open-source repo, these no longer serve a purpose. (They're still listed in our testModule.gwt.xml files, but as noted in a previous commit, the GWT test infrastructure doesn't seem to care what we put in those files anymore.) We could still include them, but they're generated during our build, so that complicates exporting them with Copybara. 5948a59  cpovirk: Oops: The move of TestModuleEntryPoint below (which I can't seem to comment on directly) shouldn't happen: This commit should include only the pom.xml changes. The TestModuleEntryPoint move is happening because MOE is reading the latest copy of its config from head, and that version of the config no longer has special handling for TestModuleEntryPoint. Ideally, MOE would use the version of its config at CL 335869875 for this change and use the new version of its config only for later CLs. I suspect that guava-testlib won't actually build successfully at this specific commit. If you're feeling ambitious, you could amend the commit to undo the TestModuleEntryPoint changes. But then you might have to amend the later commit that removes TestModuleEntryPoint to remove the copies in their corrected location.... And probably no one will ever care: It's not like we're going to cut a release at this specific commit. So I am mainly just noting this in case someone does discover the problem later. Someone should migrate us to Copybara :) (which hopefully doesn't have this problem...).  netdpb: So you're saying this commit moves files to a bad location, but two commits later the files are deleted anyway? I shall choose to look the other way, then.  ",2020-10-08 15:40:01,2020-10-08 16:05:54,3,16,2
Issue#5268 MOE Sync 2020-10-09,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Clarify `HashMultimap` docs about concurrency.
 Closes #5266.
Fixes #3682. e6b5234  Removed all references to now useless workaround
 Fixes #3679
Fixes #5265 26da094 



              The text was updated successfully, but these errors were encountered:
              google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: These commits were derived from the PRs by @Saucistophe, so I am marking the CLA as signed.  ",2020-10-09 13:30:14,2020-10-09 15:43:19,2,14,2
Issue#5271 Adding ppc64le architecture support on travis-ci,"type=other, package=general, cla: yes, P3",,,"kishorkunal-raj: Hi,
I have added support for ppc64le architecture support on travis-ci in the branch. I believe it is ready for the final review and merge.
The travis-ci build log can be tracked on the link : https://travis-ci.com/github/kishorkunal-raj/guava/builds/189450395
Please have a look on it Thanks !!  cpovirk: Thanks. I haven't looked in detail at the logs, but I see a timeout in the Travis run here. Maybe we need travis_wait for the install command, similar to what we have here...?
 
guava/.travis.yml
 
         Line 17
      in
      be1c0d8
   cpovirk: (We've wanted a convenient way to test on PPC a few times in the past, so this could be handy.)  ",2020-10-12 11:31:09,,1,1,2
Issue#5272 Clarify how to use `IteratorTester`,"package=testing, type=api-docs, cla: yes, P2",,cpovirk,jbduncan: Partially addresses #5254.  ,2020-10-12 18:08:02,2020-10-13 14:34:45,1,1,2
Issue#5273 Bump junit from 4.13 to 4.13.1,"cla: yes, P3, dependencies",,,"dependabot: Bumps junit from 4.13 to 4.13.1. Sourced from junit's releases. Please refer to the release notes for details. Sourced from junit's changelog. A local information disclosure vulnerability in TemporaryFolder has been fixed. See the published security advisory for details. Prior to this change, custom runners could make FrameworkMethod instances, but not FrameworkField instances. This small change allows for both now, because FrameworkField's constructor has been promoted from package-private to public.  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR: You can disable automated security fix PRs for this repo from the Security Alerts page. 



              The text was updated successfully, but these errors were encountered:
              dependabot: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.  ",2020-10-12 22:55:59,2020-12-17 22:08:32,1,1,1
Issue#5274 Bump junit from 4.13 to 4.13.1 in /android,"cla: yes, P3, dependencies",,,"dependabot: Bumps junit from 4.13 to 4.13.1. Sourced from junit's releases. Please refer to the release notes for details. Sourced from junit's changelog. A local information disclosure vulnerability in TemporaryFolder has been fixed. See the published security advisory for details. Prior to this change, custom runners could make FrameworkMethod instances, but not FrameworkField instances. This small change allows for both now, because FrameworkField's constructor has been promoted from package-private to public.  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR: You can disable automated security fix PRs for this repo from the Security Alerts page. 



              The text was updated successfully, but these errors were encountered:
              dependabot: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.  ",2020-10-12 22:56:16,2020-12-17 22:08:32,1,1,1
Issue#5275 MOE Sync 2020-10-13,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Clarify how to use `IteratorTester`
 When using IteratorTester, IntelliJ IDEA automatically imports
AbstractIteratorTester.KnownOrder. However AbstractIteratorTester
is private, and it is not obvious that one was meant to import
IteratorTester.KnownOrder instead. Therefore this commit updates the
Javadoc to give an example of how to use the API properly. Fixes #5272 c3172e1  Add a bunch of warnings to ExecutionSequencer.
 See discussion on CL 335046640. 0b7dfb6  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-10-13 14:10:48,2020-10-13 14:34:45,2,4,2
Issue#5276 Fix example in documentation for `IteratorTester`,cla: yes,,,jbduncan: Partially addresses #5254 (and fixes my own mistake in 9f03c47).  ,2020-10-13 17:21:12,2020-10-13 18:49:19,1,1,1
Issue#5277 MOE Sync 2020-10-13,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Don't call toString() on the results of successful futures.
 RELNOTES=AbstractFuture.toString() no longer includes the toString() of the result. 771629d  Fix example in documentation for `IteratorTester`
 I made a mistake and accidentally included an example that does not
compile. Specifically, importing KnownOrder as-is does not compile;
instead one needs to import IteratorTester.KnownOrder. See #5254 for
more information. I also changed the example to use Collections#unmodifiableList
rather than ArrayList because ArrayList#iterator does not satisfy
all the requirements of IteratorFeature#MODIFIABLE. Fixes #5276 448afdb 



              The text was updated successfully, but these errors were encountered:
              google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-10-13 18:24:58,2020-10-13 18:49:19,2,8,2
Issue#5278 MOE Sync 2020-10-14,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Clarify that Interner should be preferred instead of String.intern(); the existing language implies it's intended _only_ for other types.
 See also #399 (comment) 1034a2e  Document what happens when FutureCallback throws exception.
 Fixes #5250, #2058 3d573ac 



              The text was updated successfully, but these errors were encountered:
              google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-10-14 13:21:17,2020-10-14 14:09:31,2,4,3
Issue#5280 MOE Sync 2020-10-15,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771
 Remove cancellation propagation test, as the intent of not propagating cancellation is to make sure run order is as expected. If we propagate cancellations, the test fails. c8f8cbe  ",2020-10-15 14:20:30,2020-10-15 14:42:13,1,2,1
"Issue#5281 Update IteratorTester example with a greater ""steps"" value","package=testing, type=api-docs, cla: yes, P2",cpovirk,cpovirk,"jbduncan: Builds upon my earlier work in #5272 and #5276, whilst also addressing #5254 a bit.  cpovirk: What do you think of just saying ""...that your iterator exhibits the correct behavior when it is exhaused?""  jbduncan: Yep, that sounds good to me. üëç  jbduncan: I'm not sure if you were expecting me to update the docs or if you were happy to do it yourself?  cpovirk: Sorry, I'm taking care of it. The PR is out for internal review.  jbduncan: Cheers @cpovirk! üëç  ",2020-10-15 17:52:33,2020-10-16 19:26:20,1,1,2
"Issue#5282 Added power support for the travis.yml file with ppc64le, added ""maven"" on packages","cla: no, P4",,,"sreekanth370: Added power support for the travis.yml file with ppc64le. This is part of the Ubuntu distribution for ppc64le. This helps us simplify testing later when distributions are re-building and re-releasing added ""maven""  packages like below.
packages:
- maven 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Closing, but we would be happy to see this reopened if you can figure out the CLA issue (and, it appears, Travis failure).  sreekanth370: followed up with same PR #5271  ",2020-10-16 06:34:51,2020-10-23 15:33:23,6,1,2
Issue#5283 MOE Sync 2020-10-16,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Encode all primes less-than 66 into a bitmask
 Use a bitmask to make prime computation for all values less-than 66 O(1) and avoid any remainder calculations in these cases. a2fcd41  Added `@CanIgnoreReturnValue` to `cancel`.
 a4cf89b  ",2020-10-16 13:41:34,2020-10-16 14:00:25,2,4,3
Issue#5285 MOE Sync 2020-10-16,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Remove deprecated method Files.fileTreeTraverser() that isn't being used anymore.
 295dd80 



              The text was updated successfully, but these errors were encountered:
              ",2020-10-16 17:18:27,2020-10-16 17:55:35,1,2,2
Issue#5286 MOE Sync 2020-10-16,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Prepare for release 30.0.
 06c1d37  Remove deprecated 1-arg ServiceManager.addListener.
 [] RELNOTES=util.concurrent: Removed the deprecated 1-arg ServiceManager.addListener(Listener). Use the 2-arg addListener(Listener, Executor) overload, setting the executor to directExecutor() for equivalent behavior. d13ebb0  Update IteratorTester example with a greater ""steps"" value
 This allows IteratorTester to check the edge case that when an iterator has been exhausted (that is, ""next"" has been called repeatedly until ""hasNext"" returns false) then calling ""next"" on the iterator again exhibits the same behavior as the user's chosen ""known good"" reference implementation. Fixes #5281 b094a4b  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-10-16 19:05:07,2020-10-16 19:26:20,3,24,2
Issue#5287 #3951 - Joiner implements Collector,cla: yes,,,"Saucistophe: Fixes #3951  nick-someone: Thank you for providing an implementation of Joiner as a Collector! However, we're still not sure that this is a good idea yet (e.g.: should any arbitrary Joiner be a Collector (or should we provide different collector interfaces), how do we handle Java 8 vs Android, etc.). I'm going to close this PR for now, as there likely to be a number of design choices to work out that may obviate most of the code here.  ",2020-10-17 23:29:43,2020-10-22 16:12:49,1,2,2
Issue#5288 #5284 - Fixed different result when closing encoding stream twice,"package=io, cla: yes, P3",nick-someone,nick-someone,"Saucistophe: Fixes #5284  nick-someone: I'd move this just after the increment to writtenChars (so, just in case the write of the padding character fails and someone tries to re-close the stream anyway, we get it correctly)  Saucistophe: Done!  ",2020-10-17 23:52:30,,4,4,3
Issue#5293 MOE Sync 2020-10-24,"cla: yes, internal-sync","Stephan202, jbduncan",,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Add ClassInfo.isTopLevel().
 Seems like a useful method? I can't remember why I didn't add it in the first place. Perhaps just an oversight. Partially addresses #3349 RELNOTES=reflect: Added ClassInfo.isTopLevel(). 14173d1  Stephan202:  jbduncan:  nick-someone: Thanks for the comments! I'll fix this up internally and it'll end up on the next push out tomorrow.  ",2020-10-24 15:22:00,2020-10-26 13:59:42,1,2,3
Issue#5294 MOE Sync 2020-10-26,"cla: yes, internal-sync",,,"nick-someone: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Fix minor documentation typos, thanks to @Stephan202 and @jbduncan
 fe37cd8  ",2020-10-26 16:08:18,2020-10-26 18:12:31,1,2,1
Issue#5297 Âêà‰Ωµ,cla: no,,,"abc52090241: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-10-30 06:51:35,2020-11-02 13:29:25,5,5,2
Issue#5298 Verify maximumWeight before setting,cla: yes,,cpovirk,"alllex: The maximumWeight builder method is the only method that does the argument verification before the assignment.
It looks like a typo, and does not affect anyone in practice, but it is still better to have the implementation uniform. 



              The text was updated successfully, but these errors were encountered:
              ",2020-11-02 20:31:46,2020-11-10 16:47:40,1,1,2
Issue#5300 MOE Sync 2020-11-06,"cla: no, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Refactor ClassPath: replace Scanner with Location class.
 afaaf1e  Fix documentation for HashCode.toString() that incorrectly claimed it returned in big-endian order.
 The implementation of toString() goes through the bytes in the same order that asBytes() returns, so if the order of the underlying bytes is little-endian (as is the case for fingerprint2011 and LongHashCode), then the string will also be little-endian, contradicting what the documentation says. 22955b5  Optimize Hashing.crc32c() by eliminating two xors for every byte of input.
 7ecc705  Add constant for Origin Isolation header
 Spec: https://github.com/WICG/origin-isolation RELNOTES=Adds constant for the Origin-Isolation header. aec265f  Remove outdated reference in docs
 e6282a4  Add additional test for `Crc32cHashFunction`.
 d4c7293  Verify maximumWeight before setting
 The maximumWeight builder method is the only method that does the argument verification before the assignment.
It looks like a typo, and does not affect anyone in practice, but it is still better to have the implementation uniform. Fixes #5298 5458f93  Do 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s.
 This is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available. 2c2953c  Rollback of change:
 Do 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s. This is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available. 2bea321 



              The text was updated successfully, but these errors were encountered:
              google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-11-06 21:49:13,2020-11-10 16:48:03,9,16,5
Issue#5301 Fix LoadingCache minor documentation typo,cla: no,,,"linyimin-bupt: 
No description provided.
  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-11-07 15:23:36,2020-11-07 15:27:09,1,1,1
Issue#5302 Fix LoadingCache minor documentation typo,cla: no,,,"linyimin-bupt: 
No description provided.
  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  linyimin-bupt: @googlebot I fixed it.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-11-07 15:28:02,2020-11-07 15:32:56,1,1,1
Issue#5303 Fix LoadingCache minor documentation typo,cla: yes,,,"linyimin-bupt: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2020-11-07 15:41:11,2020-11-12 09:32:43,2,0,1
Issue#5304 Issue 1673 adding upper hyphen type case format,"type=addition, package=base, cla: yes, P3",,netdpb,"malasemi: Adding upper hyphen type case format  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  malasemi: @googlebot I signed it!  netdpb: Thanks! Do you have a particular use case for upper-hyphen?  ",2020-11-07 19:33:39,,1,2,2
Issue#5306 Add `X-Request-ID` to `HttpHeaders`,"package=net, type=addition, cla: yes, P3",,netdpb,"TiagoGrosso: 
No description provided.
  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  TiagoGrosso: @googlebot I signed it!  ",2020-11-08 09:37:02,2020-11-10 16:47:40,1,2,2
Issue#5307 MOE Sync 2020-11-10,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Refactor ClassPath: replace Scanner with Location class.
 75c2c54  Fix documentation for HashCode.toString() that incorrectly claimed it returned in big-endian order.
 The implementation of toString() goes through the bytes in the same order that asBytes() returns, so if the order of the underlying bytes is little-endian (as is the case for LongHashCode), then the string will also be little-endian, contradicting what the documentation says. 841129a  Optimize Hashing.crc32c() by eliminating two xors for every byte of input.
 Benchmarks suggest a modest speedup around 8%. b685bf7  Add constant for Origin Isolation header
 Spec: https://github.com/WICG/origin-isolation RELNOTES=Adds constant for the Origin-Isolation header. f3d7911  Remove outdated reference in docs
 3ac6e42  Add additional test for `Crc32cHashFunction`.
 4f7e925  Verify maximumWeight before setting
 The maximumWeight builder method is the only method that does the argument verification before the assignment.
It looks like a typo, and does not affect anyone in practice, but it is still better to have the implementation uniform. Fixes #5298 f1d40c3  Do 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s.
 This is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available. 6d9e9e3  Rollback
 *** Original change description *** Do 16-byte strides in CRC32C in c.g.c.hash, resulting in roughly a 3.3x speedup to 1.5 GB/s. This is probably as good as it gets until Java 11, when we'll have access to the intrinsics that use CRC hardware when available. 9168073  Backport `combine` to java7 for `ImmutableList` & `ImmutableSet`.
 This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections. a275458  Fix `LoadingCache` minor documentation typo.
 Fixes #5503. 59a9556  Added submitAsync to ClosingFuture.
 RELNOTES=""Added submitAsync(AsyncClosingCallable) to ClosingFuture."" 187db6d  Add `X-Request-ID` to `HttpHeaders`.
 Fixes #5306. RELNOTES=Add X-Request-ID to HttpHeaders. 0f5a31b  Fix Android test failure in ClassPathTest.
 Reproduced the error and verified that this change fixes it. c1f6ac1  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker: Setting cla: yes since all commits with different authors come directly from PRs by those authors.  ",2020-11-10 16:04:15,2020-11-10 16:47:40,14,27,8
Issue#5308 MOE Sync 2020-11-11,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Backport `combine` to java7 for `ImmutableMap`.
 This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections. The Java8/Java7 implementations branched once again, where Java8 uses an array of Entries, whereas Java7 uses an array of alternating key/value pairs. Either way, the implementations were pretty trivial this time. 2afe372  Backport combine to java7 for `ImmutableRangeSet`/`ImmutableRangeSet`.
 This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections. I saved this for last, but they turned out to be the easiest to do. Tests are kind of crap, but honestly, baseline tests also seemed a little bit light to me. a742fca  Backport `combine` to java7 for Sorted collections & (Immutable)BiMap.
 This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections. 4c7fe59  Fix memory leaks and potential crashes in HashBiMap, which occur in transpiled ObjC code.
 450bf69  ",2020-11-11 16:55:31,2020-11-11 21:27:41,4,14,1
Issue#5310 MOE Sync 2020-11-12,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Tidy up description since this shows up in search results, Maven Central, and many other places around the web.
 CL automatically created by:
replace_string 
'google'''s collections, io classes, and much' 
'Google'''s collections, I/O classes, and' 21633ac 



              The text was updated successfully, but these errors were encountered:
              ",2020-11-12 15:14:21,2020-11-12 16:07:02,1,3,2
Issue#5312 MOE Sync 2020-11-13,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Replaces cycle_finder references to ""--whitelist"" with ""--suppress-list"", and ""--blacklist"" with ""--restrict-to"".
 c8c3040  Add AndroidAccessToCollectors.
 This adds the base Immutable collectors already in CollectCollectors, but is still lacking the Table-collections, Multi-collections, and mutable-collections. b52b63b  Backport ImmutableTable.combine
 That should be the last combine to backport. All remainging collectors are implemented in terms of existing collection transformations. da6a289  Add to[Immutable]Multiset to AndroidAccessToCollectors
 1098343  Backport combine to Immutable[List|Set]Multimap
 Interestingly, ImmutableMultimap already had combine implemented by lowasser since 2017. Probably a backport oversight. 7652606  Add Multimap collectors to AndroidAccessToCollectors
 ff5ba78  Add TableCollectors to AndroidAccessToCollectors
 fc08b68  netdpb: Superseded by #5321.  ",2020-11-13 22:23:30,2020-11-16 17:41:01,7,21,2
Issue#5315 Automate Javadoc shortlinks generation,"type=api-docs, package=general, cla: yes, P3","netdpb, cpovirk",,"benrkia: Fixes #4023  cpovirk: Thanks!  cpovirk: @netdpb , do you want me to create an internal copy of this and mail it to you for review?  netdpb: @netdpb , do you want me to create an internal copy of this and mail it to you for review? Sure, that would be great. Thanks.  cpovirk: Ah, the joke is on me: This file doesn't exist internally :) (It's part of the gh-pages branch, which could be synced (at least in part -- we wouldn't do it for the generated Javadoc) but isn't.) So we can probably use that ""Rebase and merge"" button for a change. Sound good?  cpovirk: It worked, generating a new redirect: https://guava.dev/ClosingFuture Thanks!  benrkia: @cpovirk Thank you for giving me the chance to contribute üôè  ",2020-11-15 16:52:21,2020-12-03 18:24:58,4,1,3
Issue#5321 MOE Sync 2020-11-16,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Replaces cycle_finder references to ""--whitelist"" with ""--suppress-list"", and ""--blacklist"" with ""--restrict-to"".
 RELNOTES=none 3bf14a6  Add AndroidAccessToCollectors.
 This adds the base Immutable collectors already in CollectCollectors, but is still lacking the Table-collections, Multi-collections, and mutable-collections. e93c055  Backport ImmutableTable.combine
 That should be the last combine to backport. All remainging collectors are implemented in terms of existing collection transformations. 564439f  Add to[Immutable]Multiset to AndroidAccessToCollectors
 2a232a7  Backport combine to Immutable[List|Set]Multimap
 Interestingly, ImmutableMultimap already had combine implemented by lowasser since 2017. Probably a backport oversight. c9dd38f  Add Multimap collectors to AndroidAccessToCollectors
 4a89571  Add TableCollectors to AndroidAccessToCollectors
 7b5f741  Fix open source ‚ÄúNo tests found in com.google.common.collect.TableCollectorsTest‚Äù
 d5f0705  Update Public Suffix data.
 a132338 



              The text was updated successfully, but these errors were encountered:
              ",2020-11-16 16:13:21,2020-11-16 17:40:35,9,23,3
Issue#5322 MOE Sync 2020-11-17,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make toImmutableEnum[Set|Map] to AndroidAccessToCollectors
 I think that‚Äôs the last of them. The implementations I moved verbatim, and there was no change of code there. 660f036  ",2020-11-17 19:49:17,2020-11-17 20:57:23,1,3,1
Issue#5324 Fix #4011: Files::createTempDir security vulnerability,"type=enhancement, package=io, cla: yes, P3",,,"melloware: I am submitting this PR because... 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  melloware: @googlebot I signed it!  jbduncan: As an external user of Guava (not part of the team), this looks good to me. üëç  cpovirk: Thanks. We're hoping that we'll be able to merge this. That said, we won't be able to make the change in our Android versions (since they target a version of Android without java.nio.file). So I hope that Sonatype and Snyk will be able to configure their tools to recognize that 35.0-jre, etc. are safe even when they consider 35.0-android, etc. to be vulnerable.  melloware: @cpovirk Yes I did not touch the Android version on purpose in this PR and I can speak for Sonatype it does know the -jre version of the JAR in its detection methods so it will be able to mark this resolved for Guava 31.0-jre if that is the version it ends up in!  cpovirk: Oh, great, thank you. I was worried that they might depend on being able to specify the vulnerable versions as Maven ranges. But if they can say ""all -android versions are vulnerable"" (or just list all the existing ones individually, or maybe even preemptively list likely future versions), then that should do the trick.  cgdecker: My current inclination is that we should not make this change. This change is a behavioral change that has the potential to break existing users if they're intentionally accessing temp directories created with the method from a separate process (communicating the path to another process via some means, say). My expectation is that 99%+ of users are just using temp dirs from the process that creates them, but I don't feel like I can rule out the possibility of this breaking someone. That wouldn't necessarily be reason enough not to do this, except that I think the current state of things is not that bad. The method is deprecated and has a clear and easy replacement for most users. Given that, I'd want to feel certain that we wouldn't be breaking anyone in order for this change to feel worthwhile.  melloware: @cgdecker the fact that its still marked Beta means users should not expect it not to change between versions if they are expecting some legacy behavior they can update their code not to use this deprecated method. IMHO the Security risk alone warrants this change for all the reasons I stated both in the ticket and above.  Just my two cents.  cpovirk: A couple other observations from some quick internal testing: This fails at least one internal test. That test sets java.io.tmpdir to /invalid and then expect the createTempDir call to fail. That said, I doubt that any actual production code cares about that behavior. Rather, the test was probably just verifying that the correct type of exception was thrown if the operation did fail. Still, it's possible that there's a behavior change here. I didn't look into whether java.nio.file was creating the missing /invalid parent directory (probably unlikely, since I doubt it has permissions?) or failing to respect the programmatic change to java.io.tmpdir. If the latter, someone might care. This breaks some of our J2ObjC users. That said, I was able to mark the method as @J2ObjcIncompatible, and tests passed again. In theory, if a J2ObjC user were using createTempDir, this would be a breaking change. But that may well never come up. Still, the points stand that this is @Beta and @Deprecated. It's hard to know what would be least disruptive to users :(  JLLeitschuh: CC. So you can update the Syky advisory  melloware: @cpovirk When it comes to security, disruption should be least of concerns.  See SolarWinds hack 2020...  cpovirk: To try to merge the various discussions about this security vulnerability as a whole into one place, I'm closing this in favor of the discussion on #4011 (comment). As noted above and in that thread, this PR solves the problem only for the -jre variant, and we expect to solve the problem for both variants by removing the method entirely.  melloware: Awesome lets remove it!  ",2020-11-19 20:29:02,2021-01-29 18:36:23,1,1,5
Issue#5331 MOE Sync 2020-11-24,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Make toImmutableSortedMap levarage collect collectors
 b499958  ",2020-11-24 16:31:28,2020-11-24 16:52:05,1,1,1
Issue#5332 MOE Sync 2020-11-24,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Internal change.
 412db47  ",2020-11-24 17:07:21,2020-11-24 17:39:01,1,16,1
Issue#5338 MOE Sync 2020-11-30,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  PUBLIC: Add missing Override annotations.
 da5e9d9  ",2020-11-30 14:32:38,2020-11-30 15:12:39,1,3,2
Issue#5339 MOE Sync 2020-12-02,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Suppress TSAN errors for benign races.
 Compare other usages of @LazyInit on collection views, such as HashBiMap.inverse and AbstractTable.cellSet. 2dd065f 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-02 16:47:29,2020-12-02 18:44:49,1,4,2
Issue#5343 MOE Sync 2020-12-03,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Explain when StandardSystemProperty.value() can return a null value, and deprecate JAVA_EXT_DIRS.
 value()'s return type has been @nullable since 4232450, but I had forgotten the details about why, despite past CLs to update the test for specific missing keys. I assume that we'll never actually remove JAVA_EXT_DIRS. (Just slightly relevant to #2571) RELNOTES=base: Deprecated StandardSystemProperty.JAVA_EXT_DIRS. We do not plan to remove the API, but in recent versions of Java, that property always has a value of null. 5cdf737  Automated rollback of 67517b5.
 *** Reason for rollback *** Causing Sheets iOS crash *** Original change description *** Fix memory leaks and potential crashes in HashBiMap, which occur in transpiled ObjC code.
Add iOS specific unit tests in XPlat, because Guava is missing infrastructure for iOS tests. d2568df  ",2020-12-03 16:48:05,2020-12-03 17:09:20,2,3,2
Issue#5347 MOE Sync 2020-12-04,"cla: yes, internal-sync",,,"netdpb: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  System.getProperties().getProperty => System.getProperty.
 My motivation was that it's slightly easier for a nullness checker to determine that System.getProperty(standardProperty) is (generally speaking) non-null. But it turns out that java.runtime.name is not a standard property! Still, this is a slight simplification, so I guess I'm submitting. 96203a3  Fix a bug in HashBiMap which was causing crashes in Sheets on iOS.
 The crash was caused by the fact, that linked-list of BiEntry instances inside a bucket were using @weak references, and only the first entry in the list was strongly referenced. The remaining ones were deallocated. With this change, Sheets iOS is not crashing anymore. 847c023 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-04 17:36:09,2020-12-04 21:30:39,2,5,2
Issue#5348 Fix compatibility between the cache compute methods and a load,"type=defect, package=cache, cla: yes, P2","lowasser, netdpb",netdpb,"ben-manes: The asMap().compute implementation did not take into account that the present value may be loading. A load does not block other writes to that entry and takes into account that it may be clobbered, causing it to automatically discard itself. This is a known design choice that breaks linearizability assumptions (#1881). The compute should check if a load is in progress and call the appropriate internal removal method. Because a zombie entry remained in the cache and still is marked as loading, the loader could discover entry and try to wait for it to materialize. When the computation is a removal, indicated by a null value, the loader would see this as the zombie's result. Since a cache loader may not return null it would throw an exception to indicate a user bug. A new ComputingValueReference resolves both issues by indicating that the load has completed. The compute's removeEntry will then actually remove this entry and the loader will not wait on the zombie. Instead if it observes the entry, it will neither receive a non-null value or wait for it to load, but rather try to load anew under the lock. This piggybacks on the reference collection support where an entry is present but its value was garbage collected, causing the load to proceed. By the time the lock is obtained the compute method's entry was removed and the load proceeds as normal (so no unnecessary notification is produced). fixes #5342
fixes #2827
resolves underlying cause of #2108  ",2020-12-05 06:56:29,2021-02-12 16:09:15,1,2,3
Issue#5349 #3945 - Fixed parent.relativePath issue in guava-bom,"type=defect, cla: yes, P2",,netdpb,"abchaubey: Fixed : #3945 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-05 19:19:26,2020-12-10 15:48:59,1,1,2
"Issue#5350 checkWeightWithWeigher ,Simplify if else",cla: no,,,"loveincode: Simplify if else  ,Streamline the code  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  loveincode: @googlebot I signed it!  ",2020-12-09 06:13:55,2020-12-09 06:19:00,1,1,1
"Issue#5351 checkWeightWithWeigher ,Simplify if else","type=enhancement, package=cache, cla: yes, P4",,,"loveincode: Simplify if else  ,Streamline the code  kluever: I don't think this PR makes the branching logic any easier to understand.  ",2020-12-09 06:20:06,2020-12-10 16:01:14,1,1,2
Issue#5352 MOE Sync 2020-12-10,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  First step in cleaning up PSL handling. Next stage will be to change the template to store the trie string as a separate static constant, so that I can write a unit test that verifies that.
 f0c496c  Fix `relativePath` warning for guava-bom.
 Fixes #3945.
Closes #5349. aa80e23  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  ",2020-12-10 15:21:40,2020-12-10 15:48:59,2,4,3
Issue#5354 MOE Sync 2020-12-11,"cla: yes, internal-sync",,,"kluever: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Correct a typo and some odd phrasing in the first paragraph of the javadoc for SmoothRateLimiter.
 8d571ca  Log a warning if running under a Java 7 VM.
 More precisely, log a warning if lambda expressions or type annotations in our classes would produce an exception. If someone wants to use Retrolambda or a similar tool to rewrite our classes, that's fine with us if it works. And our support for Android is unchanged: The Android toolchain rewrites lambdas and removes type annotations. This is a step toward removing Java 7 support entirely: #5269 RELNOTES=Introduced a warning log message when running under Java 7. This warning is not guaranteed to be logged when running under Java 7, so please don't rely on it as your only warning about future problems. If the warning itself causes you trouble, you can eliminate it by silencing the logger for com.google.common.base.MoreObjects$ToStringHelper (which is used only for this warning). This warning prepares for removing support for Java 7 in 2021. Please report any problems. 0357006  ",2020-12-11 15:43:00,2020-12-11 16:21:15,2,10,3
Issue#5355 MOE Sync 2020-12-14,"cla: yes, internal-sync",,,"cpovirk: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Prepare for release 30.1.
 81e941f 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-14 15:43:44,2020-12-14 15:44:32,1,8,1
Issue#5357 MOE Sync 2020-12-16,"cla: yes, internal-sync",,,"cgdecker: This code has been reviewed and submitted internally. Feel free to discuss on
the PR, and we can submit follow-up changes as necessary.  Internal changes.
 965731a 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-16 18:03:45,2020-12-16 18:33:14,1,1,2
Issue#5359 Adds HttpStatus API,"package=net, type=addition, status=research, cla: yes, P3",,,"WilliamCollishaw: Adds a new HTTP status codes class I used the same format as the HttpHeaders class for consistency Closes #927 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-16 19:37:56,,1,4,2
Issue#5360 Set @Target on @IgnoreJRERequirement.,cla: yes,,,"copybara-service: Set @target on @IgnoreJRERequirement. Values:
https://www.mojohaus.org/animal-sniffer/animal-sniffer-annotations/apidocs/org/codehaus/mojo/animal_sniffer/IgnoreJRERequirement.html Context:
This doesn't ""fix"" anything, but it prevents us from replicating an error I just made in the future:
mojohaus/animal-sniffer#131 (comment)
RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-17 19:24:55,2020-12-17 19:46:54,0,0,0
Issue#5361 Bump deps.,cla: yes,,,"copybara-service: Bump deps. My methodology was something like: Fixes #5273
Fixes #5274
More completely addresses #4018 RELNOTES=n/a  ",2020-12-17 20:47:24,2020-12-17 22:08:31,0,0,0
Issue#5363 Added checkstyle to force the code style to be Google's Java Style compliant,cla: yes,,,"AlbertoSinigaglia: Hi,
I've added to the main pom.xml the checkstyle plugin, in order to enforce the code to be Google's Java Style as specified on the file CONTRIBUTING.md This however cause ""a awful lot"" of warnings in the guava sub-project, which if you wan i can take care, but it would be a very big PR, and so i don't know if it could be actually a great choice [cpovirk edit: related to #5362]  cpovirk: Closing, as described in #5362. Thanks for running the test: It suggests that our Travis config is broken, so I'm putting together a fix like google/truth@fdbab6a.  ",2020-12-21 18:56:30,2020-12-21 21:25:59,1,2,2
"Issue#5364 Cache only .m2/repository, not all of .m2.",cla: yes,,,"copybara-service: Cache only .m2/repository, not all of .m2. Hopefully this will fix ""Could not find artifact org.apache.maven.plugins:maven-checkstyle-plugin:jar:3.1.1 in google-maven-central"" from #5363 Compare CL 310633203 for Truth. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-21 21:34:57,2020-12-21 21:56:52,1,1,1
Issue#5365 Temporary PR to retry #5363 to see if Travis config was fixed by #5364.,cla: no,,,"cpovirk: Co-authored-by: Alberto Sinigaglia sinigagliaalberto@gmail.com 



              The text was updated successfully, but these errors were encountered:
              google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: I didn't have permission to push changes to the original PR, so I couldn't pull in my Travis change and have it tested there. Aside: I couldn't find a way to force Travis to rerun for a PR -- or even to view the Travis settings for Guava. I'm pretty sure I've been able to force reruns before (for some project -- not sure if Guava specifically), so maybe something changed. I do have write permission on the GitHub repo, which sounds like it ought to be enough, but maybe it has something to do with how that's through the layer of indirection of our ""team?"" (I don't believe we've changed any protections yet for Copybara, but maybe I'm wrong about that?)  cpovirk: OK, the fix worked. Now the build gets far enough to fail with Checkstyle violations: https://travis-ci.org/github/google/guava/jobs/750924487  ",2020-12-21 22:06:52,2020-12-21 22:16:26,2,2,2
Issue#5367 Optimize CRC32C.,cla: yes,,,copybara-service: Optimize CRC32C.  ,2020-12-23 18:06:26,2020-12-23 18:30:57,1,4,1
Issue#5370 Internal change.,cla: yes,,,"copybara-service: Internal change. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-28 20:12:36,2020-12-28 20:46:02,0,0,0
Issue#5371 Internal change,cla: yes,2loganandrews,,copybara-service: Internal change RELNOTES=n/a  ,2020-12-30 00:17:16,2020-12-30 19:04:18,0,0,1
Issue#5373 Update Public Suffix data.,cla: yes,,,"copybara-service: Update Public Suffix data. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2020-12-30 20:33:23,2020-12-30 20:54:30,1,2,1
Issue#5374 Add Strings.reverse(CharSequence).,"type=addition, package=base, cla: yes, P3","npathai, falconetpt, daishengda2018",,"copybara-service: Add Strings.reverse(CharSequence).  npathai: LGTM  braveamita: I think  ""new StringBuilder(seq).reverse().toString();"" return a string , Result should be type CharSequence not String.  falconetpt: If you are starting with uppercase, in @param, my opinion is that you should keep it consistent, and do the same in the return :)  ",2020-12-30 21:34:31,2021-05-24 22:10:13,1,4,6
"Issue#5378 Fix a comment to reflect that the ImmutableSortedMap copyOf method uses the natural ordering of the keys, rather than a provided comparator.",cla: yes,,,"copybara-service: Fix a comment to reflect that the ImmutableSortedMap copyOf method uses the natural ordering of the keys, rather than a provided comparator.  ",2021-01-05 15:16:14,2021-01-05 15:37:18,0,0,0
Issue#5382 Removed some redundant 'else's using early return,cla: yes,,,"JuHyun419: removed some redundant 'else'  cgdecker: Thanks for the PR, but I don't think removing these elses improves the clarity of the code.  ",2021-01-16 12:14:52,2021-01-19 16:57:18,1,1,2
Issue#5383 Normative modification,cla: no,,,"gongxuanzhang: 1.Add annotation @override to interesting methods
2.Extract method parameters as static  to improve performance  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  cgdecker:  ",2021-01-16 17:15:15,2021-01-19 17:02:15,2,3,2
Issue#5384 Add missing link to ImmutableSortedMultiset in package-info,"package=collect, type=api-docs, cla: yes, P4",daishengda2018,kluever,"Marcono1234: 
No description provided.
  kluever: Thanks - will get this mirrored out shortly.  ",2021-01-18 16:38:46,2021-01-30 03:20:38,1,1,3
Issue#5385 Remove `@Beta` from `HashCode`.,cla: yes,,,copybara-service: Remove @Beta from HashCode. #3284 RELNOTES=Remove @beta from HashCode.  ,2021-01-18 23:56:10,2021-01-19 00:23:50,1,2,1
Issue#5386 Fix assertion for `FilesTest.testCopyIdenticalFiles()`.,cla: yes,,,copybara-service: Fix assertion for FilesTest.testCopyIdenticalFiles(). Fixes #5381 RELNOTES=n/a  ,2021-01-19 17:43:27,2021-01-19 18:08:16,1,2,1
Issue#5394 Remove `@Beta` from `CountingOutputStream`.,cla: yes,,,copybara-service: Remove @Beta from CountingOutputStream. RELNOTES=io: Removed @Beta from CountingOutputStream.  ,2021-01-28 16:58:05,2021-01-28 18:09:50,1,2,1
Issue#5395 Add a link to `ImmutableSortedMultiset` to `collect/package-info.java`.,cla: yes,,,"copybara-service: Add a link to ImmutableSortedMultiset to collect/package-info.java. Fixes #5384 RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-01-29 21:26:48,2021-01-30 03:20:38,0,0,0
Issue#5396 Issue5387 - Added logical operators to UnsignedInteger class,"type=addition, status=triaged, package=primitives, cla: yes, P3",,,"kariustobias: Added and, or and xor operations for the UnsignedInteger class according to the issue #5387. We thought about also implementing left shift and right shift.
Since the UnsignedLong has a similar behaviour, it would make sense to add them there as well. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  kariustobias: @googlebot I signed it!  DJCoding: @googlebot i signed it!  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  1c3t3a: @googlebot I consent  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  Kara3: @googlebot I consent  ",2021-02-01 15:56:47,,3,2,5
Issue#5397 Issue-5377: Implemented `available()` for ReaderInputStream,"type=enhancement, status=triaged, package=io, cla: yes, P3",Marcono1234,,"1c3t3a: This PR adds an implementation of available() for the ReaderInputStream class. The implementation follows the suggestions of issue #5377.  Marcono1234: Implementing this method is rather tricky, I have left some review comments which are hopefully helpful for you.
Maybe it would be good to wait for feedback from some of the maintainers to know if implementing this method is really worth it. It might be good to add some tests (possibly with the example code snippets I provide) to CharSourceTester.java (I hope that is the right test class).
And to add this change also to the Android version of ReaderInputStream.  1c3t3a: Allright, thank you very much for the detailed feedback! We implement a first version of what you described. We added a flushing case were the encoder gets flushed and we also now check for the CoderResult we receive when calling encode(). But running your test always produces an OVERFLOW when encoding to the buffer, even if we enlarged it with calling startDraining(). For clarity we committed our latest code and plan  to work on this in the next days.  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  kariustobias: @googlebot I consent.  Marcono1234: Thanks! I think this looks quite good now, though I am not a maintainer of this project and they might have other requirements. Maybe it would be good to have a test in CharSourceTester like the following: For the current test you added, it might be easier to have the more sophisticated tests which rely on certain buffer sizes in a separate test class (ReaderInputStreamTest) so that they can specify the buffer size (and CodingErrorAction if necessary) directly for ReaderInputStream instead of relying on implementation details of other classes.  Marcono1234: I am not sure if this loop is a good idea, reading char by char until the buffer is full is rather inefficient. Though on the other hand only reading a single char would also be rather inefficient. Maybe a compromise would be to read (while ready() == true) Math.min(charBuffer.remaining(), X) where X would be some fixed value, e.g. 64 (which could be adjusted later if performance tests indicate that this is a bad value). It is really unfortunate that Reader.ready() does not make any guarantees regarding whether the other read methods will block. It might also be good to add a comment to explain why calling read() in a loop is necessary instead of calling read(...), i.e. ready() only makes guarantees for read().  Marcono1234: Though as additional optimization you could check whether the class of the reader is known to never block, i.e. StringReader (but to be safe check getClass() == instead of instanceof because StringReader makes no guarantees whether it blocks and maybe someone wrote a blocking subclass) and Guava's CharSequenceReader. And in that case use the more efficient read(...) methods instead.  1c3t3a: ath.min(charBuffer.remaining(), X) Yeah that's a good question. Implementing the Math.min(charBuffer.remaining(), X) approach could lead to available() being blocked... on the other hand reading char by char is horribly inefficient.  Marcono1234: Ah, sorry my comment was not that clear; I meant that the Math.min(charBuffer.remaining(), X) limit should be used as additional condition for the read() loop, i.e. reading a single char at a time. This is still pretty inefficient, but at least not as inefficient as filling the complete buffer, especially if the caller might not even be interested in that many bytes.  Marcono1234: Sorry, my previous comment was incorrect and this can be removed. The documentation says that only underflow or overflow is possible, which makes sense since flushing is unrelated to input.  Marcono1234: Though on second thought leaving this check in would not hurt either and would protect against CharsetEncoder implementations whose implFlush‚Äã method violates the contract.
However, if you decide to leave this in, you would need to adjust the comment.  cgdecker: I haven't looked at the code yet, but I'm not really sure this is worth doing given that it sounds like it's not especially simple to implement. I have some questions about the reason for wanting this in the first place as well, which I asked on the other issue.  ",2021-02-02 14:41:32,,4,2,4
Issue#5400 Add `@CheckReturnValue` to some `com.google.common.cache` APIs.,cla: yes,,,"copybara-service: Add @CheckReturnValue to some com.google.common.cache APIs. RELNOTES=Add @CheckReturnValue to some com.google.common.cache APIs. 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-06 15:15:37,2021-02-06 15:43:45,0,0,0
Issue#5401 change in peek() method of PeekingImpl class.,cla: no,,,"NihalAgarwal: Added validation, if the iterator.hasNext() return true, then only we change the value of hasPeeked to true, because before what we are doing is without checking iterator contains some value or not we mark hasPeeked to true in peek() method and, if the user call hasNext() method of PeekingImpl class immediately after calling peek() method, it will always return true. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  NihalAgarwal:  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  NihalAgarwal:  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  NihalAgarwal:  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  NihalAgarwal:  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  NihalAgarwal:  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2021-02-09 08:16:53,2021-02-09 09:47:41,3,1,1
Issue#5402 change in peek() method of PeekingImpl class.,cla: no,,,"NihalAgarwal: Added validation, if the iterator.hasNext() return true, then only we change the value of hasPeeked to true, because before what we are doing is without checking iterator contains some value or not we mark hasPeeked to true in peek() method and, if the user call hasNext() method of PeekingImpl class immediately after calling peek() method, it will always return true.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  NihalAgarwal:  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  NihalAgarwal:  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2021-02-09 10:28:04,2021-02-09 10:46:56,1,1,1
Issue#5403 change in peek() method of PeekingImpl class,"type=enhancement, package=collect, cla: yes, P3",netdpb,netdpb,"NihalAgarwal: Added validation, if the iterator.hasNext() return true, then only we change the value of hasPeeked to true, because before what we are doing is without checking iterator contains some value or not, we mark hasPeeked to true in peek() method and, if the user call hasNext() method of PeekingImpl class immediately after calling peek() method, it will always return true.  netdpb: Is there a particular bug you're fixing here?  netdpb: I'm not convinced this change makes a difference. hasPeeked starts out false inside this block.
If iterator.hasNext() returns false, then iterator.next() on the next line will throw, and even in the old code hasPeeked will stay false.
If iterator.hasNext() returns true, then hasPeeked will become true in the old code as well. So I think in all cases the returned value and the state is the same, but your change introduces a new branch to the code where there wasn't one before. So I'm not sure your change simplifies the code or fixes a logic bug. What do you think?  NihalAgarwal: In one of the case when iterator return null (no more elements left) and calling peek() method will return null and set hasPeeked value to true. In every case, either iterator has some value or not, hasPeeked  always set to true in old code. Immediately calling hasNext()afterpeek()will always result to true, and hasNext() method is made to check whether iterator or peek contains some element or not.  netdpb: iterator.next() doesn't return null when there are no more elements left; it throws NoSuchElementException. That means that in the old code, hasPeeked = true won't be reached when there are no more elements. Right?  netdpb: I'm going to close this for now, as I don't think it's adding value. Please reopen if you have more to discuss!  ",2021-02-09 11:12:47,2021-02-12 20:49:42,1,1,2
Issue#5404 Assign or use the result of a primitive wrapper method invocation (it will soon be an ERROR to ignore it).,cla: yes,,,"copybara-service: Assign or use the result of a primitive wrapper method invocation (it will soon be an ERROR to ignore it). RELNOTES=N/A 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-10 17:44:35,2021-02-10 18:08:01,0,0,0
Issue#5406 Fix compatibility between the cache compute methods and a load.,cla: yes,,,"copybara-service: Fix compatibility between the cache compute methods and a load. Fixes #5348
Fixes #5342
Fixes #2827
Resolves underlying cause of #2108 RELNOTES=Fix compatibility between the cache compute methods and a load. 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-12 15:47:18,2021-02-12 16:09:15,0,0,0
Issue#5407 chore: remove deprecated method Class#newInstance(),"type=other, cla: yes, P2",,cpovirk,"surajdhamecha: 
No description provided.
  surajdhamecha: @cpovirk ,PTAL  surajdhamecha: @netdpb, PTAL  ",2021-02-12 21:10:30,2021-02-16 03:24:58,1,3,2
Issue#5409 Migrate off deprecated Class#newInstance().,cla: yes,,,copybara-service: Migrate off deprecated Class#newInstance(). Fixes #5407 RELNOTES=n/a  ,2021-02-16 03:03:29,2021-02-16 03:24:58,0,0,0
Issue#5412 This is causing upper bounds errors in google-http-java-client,cla: yes,,,copybara-service: This is causing upper bounds errors in google-http-java-client RELNOTES=update error prone annotations  ,2021-02-19 20:49:53,2021-02-19 21:12:45,0,0,0
Issue#5414 Delete hardcoded test .gwt.xml files.,cla: yes,,,"copybara-service: Delete hardcoded test .gwt.xml files. As noted in CL 335869875, our open-source tests are already not looking at the contents of these files. Tested:
( cd guava-gwt && JAVA_HOME=/usr/local/buildtools/java/jdk mvn clean install -Dtest.include=DoesNotMatchAnything -Dmaven.javadoc.skip )
RELNOTES=n/a  ",2021-02-23 16:50:58,2021-02-23 17:33:12,1,14,1
Issue#5415 Remove redundant `else` blocks.,cla: yes,,,"copybara-service: Remove redundant else blocks. Fixes #3974. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-24 16:54:23,2021-02-24 17:19:13,1,6,1
Issue#5416 Add `@DoNotCall` to the mutator methods on immutable types,cla: yes,,,"copybara-service: Add @DoNotCall to the mutator methods on immutable types RELNOTES=Add @DoNotCall to the mutator methods on immutable types 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-24 20:27:40,2021-02-24 20:49:30,0,0,0
Issue#5417 Added EvictingBlockingQueue implementation. Closes #3882,"type=addition, package=concurrent, cla: yes, P4",ryucc,,"noamgrinch: Initial commit for an EvictingBlockingQueue.
Please share your input.  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  noamgrinch: @googlebot I signed it!  noamgrinch: Fixing concurrency bugs regarding Remove() and will update pull request.  noamgrinch: Done. Can you please review? Thanks!  ryucc: Google style guide 3.3.3 Also I'm new to github. Do we usually comment on style stuff?  noamgrinch: Fixed.  ryucc: https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names Constants should be uppercase snake?  noamgrinch: The property was removed.  ",2021-02-25 09:44:16,,6,2,3
Issue#5418 Update Public Suffix data.,cla: yes,,,"copybara-service: Update Public Suffix data. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-25 13:41:41,2021-02-25 14:26:13,1,2,1
Issue#5420 Internal change.,cla: yes,,,"copybara-service: Internal change. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-26 17:55:55,2021-02-26 19:31:04,0,0,0
Issue#5421 Internal change.,cla: yes,,,"copybara-service: Internal change. 



              The text was updated successfully, but these errors were encountered:
              ",2021-02-26 20:51:32,2021-02-26 21:35:55,1,2,1
Issue#5422 update enforcer-rule,cla: yes,,,copybara-service: update enforcer-rule RELNOTES=n/a  ,2021-03-01 14:42:27,2021-03-01 15:05:49,0,0,0
Issue#5423 update JUnit,cla: yes,,,"copybara-service: update JUnit RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-01 15:09:45,2021-03-01 15:32:14,1,2,1
Issue#5424 Add `@DoNotCall` to a few more Guava APIs that are guaranteed to always throw `UnsupportedOperationException`.,cla: yes,,,copybara-service: Add @DoNotCall to a few more Guava APIs that are guaranteed to always throw UnsupportedOperationException. RELNOTES=n/a  ,2021-03-01 23:46:27,2021-03-02 00:08:31,1,10,1
Issue#5425 Create a CI build and test using GitHub Actions.,"type=other, status=obsolete, cla: yes, P3",,cgdecker,"carldea: This will run tests and utilize GitHub's CI infrastructure.  cgdecker: Thanks for the PR. This is something we were already planning on doing/had in progress, and the config has been submitted in 2cc42ec.  ",2021-03-02 20:46:34,2021-03-16 17:13:41,1,1,3
Issue#5426 ToStringHelper: omitEmptyValues() - Benchmark updates,cla: yes,,,"copybara-service: ToStringHelper: omitEmptyValues() - Benchmark updates RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-03 22:21:45,2021-03-03 22:47:56,1,2,1
Issue#5427 Not a tracked issue- Refactor TrieParser,cla: no,,,"olofeldre: This branch / commit contains a modified version of TrieParser,
which does not use LinkedList, and it has been replaced with ArrayDeque
from the java standard library. ALL tests pass.  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  olofeldre: This pull request request was a mistake. I only intended to do pull request to a fork of your repo. Please reject.  ",2021-03-04 09:46:59,2021-03-04 09:50:55,1,1,1
Issue#5428 Move Java-7-VM warning from `MoreObjects` to `Preconditions`.,cla: yes,,,"copybara-service: Move Java-7-VM warning from MoreObjects to Preconditions. RELNOTES=Increased the aggressiveness of Guava 30.1's warning log message for running guava-android under a Java 7 VM. (Android VMs are unaffected.) If the warning itself causes you trouble, you can eliminate it by silencing the logger for com.google.common.base.Preconditions (which is used only for this warning). This warning prepares for removing support for Java 7 in 2021. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for NullPointerException or even deadlock. (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.)  ",2021-03-09 01:39:16,2021-03-09 02:01:38,1,4,1
Issue#5429 Issue #2394 - Replace LinkedList with ArrayDeque,cla: yes,falconetpt,,"antonlovstrom: #2394 Refactor TrieParser, LineReader, and CacheLoaderTest by replacing LinkedList with ArrayDeque. LinkedList still occur at a few places where it does not make sense to replace it.  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  olofeldre: @googlebot I consent.  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  CarolineLarsen: @googlebot I consent.  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  google-cla: All (the pull request submitter and all commit authors) CLAs are signed, but one or more commits were authored or co-authored by someone other than the pull request submitter. We need to confirm that all authors are ok with their commits being contributed to this project.  Please have them confirm that by leaving a comment that contains only @googlebot I consent. in this pull request. Note to project maintainer: There may be cases where the author cannot leave a comment, or the comment is not properly detected as consent.  In those cases, you can manually confirm consent of the commit author(s), and set the cla label to yes (if enabled on your project). ‚ÑπÔ∏è Googlers: Go here for more info.  robinwanlund: @googlebot I consent.  JoakimSkoog97: @googlebot I consent.  cgdecker: Thanks for the PR. Note that we can't merge PRs directly because our process involves making changes internally and then syncing those changes out to GitHub, so I've made this change (with a few minor modifications) internally. The commit will be attributed to you when it's synced out.  ",2021-03-10 12:54:01,2021-03-11 21:31:51,1,6,7
Issue#5430 Replace LinkedList with ArrayDeque.,cla: yes,,,"copybara-service: Replace LinkedList with ArrayDeque. Refactor TrieParser, LineReader, and CacheLoaderTest by replacing LinkedList with ArrayDeque. Fixes #5429 Co-authored-by: Olof Gren olofthegren@gmail.com
Co-authored-by: Caroline Larsen e.caroline.larsen@gmail.com
Co-authored-by: Joakim Skoog joakim.skoog.97@gmail.com
Co-authored-by: Robin W√§nlund robin.wanlund@hotmail.com
RELNOTES=n/a  ",2021-03-11 21:09:38,2021-03-11 21:31:51,0,0,0
Issue#5431 Internal change.,cla: yes,,,copybara-service: Internal change. RELNOTES=n/a  ,2021-03-12 00:29:29,2021-03-12 00:50:43,1,2,1
Issue#5432 improve documentation,cla: yes,eamonnmcmanus,,"Eclixal: Improved documentation of the Platform class  eamonnmcmanus: Thanks!  eamonnmcmanus: Nitpick: can you add a period at the end of this sentence, and the sentence on the next method?  eamonnmcmanus: Typo: s/is is/if it is/  ",2021-03-16 10:08:20,2021-03-17 16:35:56,3,1,2
Issue#5433 Test 349595563,cla: no,,,"baloxhsahb: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  eamonnmcmanus: This looks like an experiment of some sort? I'm going to close it; feel free to reopen with a description of what the PR is for.  ",2021-03-17 13:12:53,2021-03-18 14:05:17,55,302,20
Issue#5434 Add documentation to a couple of `Platform` methods.,cla: yes,,,copybara-service: Add documentation to a couple of Platform methods. Closes #5432. RELNOTES=n/a  ,2021-03-17 16:12:10,2021-03-17 16:35:56,1,2,1
Issue#5436 Prepare for release 30.1.1.,cla: yes,,,"copybara-service: Prepare for release 30.1.1. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-19 15:53:27,2021-03-19 16:16:33,1,2,1
"Issue#5437 Document that we test under both JDK8 and JDK11 (and that we do that for the Android flavor, too).",cla: yes,,,"copybara-service: Document that we test under both JDK8 and JDK11 (and that we do that for the Android flavor, too). RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-19 16:17:42,2021-03-19 16:39:10,1,1,1
Issue#5440 Internal change,cla: yes,,,"copybara-service: Internal change RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-22 12:58:23,2021-03-22 16:33:17,1,1,1
Issue#5441 Internal change.,cla: yes,,,"copybara-service: Internal change. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-23 15:31:33,2021-03-23 16:14:01,1,12,1
Issue#5442 Allow usages of java.util.Objects.requireNonNull in the backport.,cla: yes,,,"copybara-service: Allow usages of java.util.Objects.requireNonNull in the backport. Relevant to #5269 in that it's an exception -- a case in which we are willing to use a Java 7 API because we know this particular API is safe to use under Android. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-23 15:32:58,2021-03-23 15:54:31,1,1,1
Issue#5443 Clarify docs about annotation-only dependencies.,cla: yes,,,"copybara-service: Clarify docs about annotation-only dependencies. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-23 15:56:01,2021-03-23 16:22:56,1,1,1
"Issue#5444 Set `-source 8 -target 8` in the open-source build, and remove Java8Usage.",cla: yes,,,"copybara-service: Set -source 8 -target 8 in the open-source build, and remove Java8Usage. This is largely a rollback of the original Java8Usage change, but I've modified it in a few ways: Fixes #5269  ",2021-03-23 18:45:02,2021-03-23 19:14:28,1,7,1
"Issue#5445 Create Dependabot config, only for GitHub Actions for now.",cla: yes,,,"copybara-service: Create Dependabot config, only for GitHub Actions for now. RELNOTES=n/a  ",2021-03-23 23:53:48,2021-03-24 01:21:49,0,0,0
Issue#5446 Add `@Nullable` to the bound of `Supplier`.,cla: yes,,,"copybara-service: Add @Nullable to the bound of Supplier. RELNOTES=base: Marked the bound of the type parameter in Supplier as @Nullable -- including in guava-android. TODO(cpovirk): In the release, consider either reverting this or making sure that we've adopted such annotations thoroughly.  ",2021-03-24 14:13:20,2021-03-24 23:43:50,1,7,1
Issue#5447 Belatedly remove the GWT-only overloads of `Futures.catching` and `catchingAsync` that let callers omit the `Executor`.,cla: yes,,,"copybara-service: Belatedly remove the GWT-only overloads of Futures.catching and catchingAsync that let callers omit the Executor. We removed these long ago from the non-GWT versions. RELNOTES=util.concurrent: Removed the GWT-only overloads of Futures.catching and catchingAsync that let callers omit the Executor. This matches a change made years ago to the non-GWT API. 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-24 22:59:08,2021-03-24 23:23:52,0,0,0
Issue#5448 Update Public Suffix data.,cla: yes,,,"copybara-service: Update Public Suffix data. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-25 00:55:38,2021-03-25 01:17:45,0,0,0
Issue#5452 Mark `Abstract*.delegate` methods in `graph` as package-private.,cla: yes,,,"copybara-service: Mark Abstract*.delegate methods in graph as package-private. The method was exposing the package-private BaseGraph type through the public type ImmutableGraph. (But it was exposing it only as protected, and no one could subclass ImmutableGraph outside the package. So this should be mostly academic.) Fixes #5450 RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-29 17:12:02,2021-03-29 17:37:42,1,12,1
Issue#5453 Move dependabot.yml out of workflows.,cla: yes,,,"copybara-service: Move dependabot.yml out of workflows. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-29 17:35:50,2021-03-29 17:59:31,1,1,1
Issue#5454 Remove `protected` from some more members in `graph`.,cla: yes,,,"copybara-service: Remove protected from some more members in graph. For now, I've left the methods of the original report (#5451) alone: So most of the changes in this CL have no effect on even the API visible in Javadoc. However, a few changes do show up in Javadoc: StandardNetwork: StandardValueGraph: As in #5450, this makes essentially no difference to users other than the cleaner Javadoc: The Immutable* types are not subclassable outside the package, so no one could call the protected methods, anyway. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-29 17:43:34,2021-03-29 18:12:49,0,0,0
"Issue#5455 Introduce transitional package-private nullness annotations, and apply them to `Supplier`.",cla: yes,,,"copybara-service: Introduce transitional package-private nullness annotations, and apply them to Supplier. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-03-30 14:30:35,2021-03-30 14:50:38,1,6,1
Issue#5458 Bump project.version from HEAD-android-SNAPSHOT to 30.1.1-android in /android/guava-bom,"cla: yes, dependencies, java",,,"dependabot: Bumps project.version from HEAD-android-SNAPSHOT to 30.1.1-android.
Updates guava from HEAD-android-SNAPSHOT to 30.1.1-android Sourced from guava's releases. ... (truncated) Updates guava-testlib from HEAD-android-SNAPSHOT to 30.1.1-android Sourced from guava-testlib's releases. ... (truncated) Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR: 



              The text was updated successfully, but these errors were encountered:
              cpovirk: @dependabot close Argh: I had seen the security report earlier today in https://github.com/google/guava/security/dependabot. I'd closed it (so it's now under
https://github.com/google/guava/security/dependabot/guava-bom/pom.xml/com.google.guava:guava/closed), and I'd marked it with ""This alert is inaccurate or incorrect,"" but that doesn't seem to have stopped Dependabot from generating a PR. Anyway, Dependabot appears to use a different version ordering than Maven's: Dependabot considers the non-numeric ""HEAD-SNAPSHOT"" to be lower than the numeric versions. (Hopefully I'm reading the Maven docs right; I haven't actually run a test with their code.) It sounds like dependabot/dependabot-core#3274 might fix that problem (assuming no perverse characters in version numbers), so I'm just telling Dependabot to close this particular PR. If Dependabot continues opening such PRs (especially if it does so after the fix to dependabot/dependabot-core#3274), we can try something more aggressive.  cpovirk: Additional notes:  ",2021-03-31 20:52:55,2021-03-31 21:06:18,1,1,1
Issue#5459 Bump project.version from HEAD-jre-SNAPSHOT to 30.1.1-jre in /guava-bom,"cla: yes, dependencies, java",,,"dependabot: Bumps project.version from HEAD-jre-SNAPSHOT to 30.1.1-jre.
Updates guava from HEAD-jre-SNAPSHOT to 30.1.1-jre Sourced from guava's releases. ... (truncated) Updates guava-gwt from HEAD-jre-SNAPSHOT to 30.1.1-jre Sourced from guava-gwt's releases. ... (truncated) Updates guava-testlib from HEAD-jre-SNAPSHOT to 30.1.1-jre Sourced from guava-testlib's releases. ... (truncated) Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR:  cpovirk: @dependabot close See #5458 (comment)  ",2021-03-31 20:54:31,2021-03-31 21:06:32,1,1,1
Issue#5461 In...,cla: yes,,,"copybara-service: In... RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-02 14:45:28,2021-04-02 15:31:33,0,0,0
Issue#5463 Use `@ParametricNullness` in the mainline just as CL 365809233 did in the backport.,cla: yes,,,copybara-service: Use @ParametricNullness in the mainline just as CL 365809233 did in the backport. RELNOTES=n/a  ,2021-04-03 12:17:30,2021-04-05 20:33:19,0,0,0
"Issue#5465 Added Ints, Longs.tryParse(CharSequence) overloading methods regarding #2549.",cla: yes,,,"noamgrinch: The algorithms are basically the same as the tryParse(String) methods with very small changes.  nick-someone: Hi @noamgrinch, thanks for your contribution. Unfortunately, we've not gotten to deciding whether adding this overload is a good idea or not, so we can't accept this PR. It would be really helpful for us to understand your use case though - do you have visible code where you have a non-String CharSequence that you'd like to tryParse from? Especially if turning that CharSequence into String via toString() or similar would be prohibitively expensive? Please comment on #2549 with any examples. Thanks!  ",2021-04-05 12:02:55,2021-04-06 17:58:42,3,4,2
Issue#5466 Recognize `@ParametricNullness` in `NullPointerTester`.,cla: yes,,,"copybara-service: Recognize @ParametricNullness in NullPointerTester. In short: Take a method parameter whose type is a type-variable usage T. NullPointerTester assumed that the method should throw an exception when passed null unless the parameter type is annotated @Nullable T. But for a type like Predicate<T>, we don't want a Predicate<@Nullable String> to throw an exception if passed null. The only case in which a class should definitely throw for such a parameter is if it doesn't permit nullable type arguments at all (like ImmutableList). Yet, in our new world, we don't want to annotate the argument of Predicate.apply as @Nullable. The annotation @ParametricNullness is our new way of distinguishing Predicate (where we'll use it) from ImmutableList (where we won't). Eventually, we will remove the annotation, at which point we'll either update NullPointerTester to distinguish Predicate from ImmutableList based on their type parameters' bounds or else we'll disable NullPointerTester at least temporarily. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-05 20:05:38,2021-04-05 20:55:05,0,0,0
Issue#5467 Internal change.,cla: yes,,,"copybara-service: Internal change. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-05 20:05:59,2021-04-26 17:23:21,1,2,1
Issue#5468 Recognize that `<T extends @Nullable Object>` implies nullability.,cla: yes,,,"copybara-service: Recognize that <T extends @Nullable Object> implies nullability. If you have a method with a parameter of type T, we should not expect it to
throw an exception when called with null. RELNOTES=In NullPointerTester, a parameter of type <T extends @Nullable Object> is allowed to be null. 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-05 22:53:22,2021-04-06 18:50:46,0,0,0
Issue#5469 Bump actions/setup-java from v1 to v2,"cla: yes, dependencies, github_actions",,,"dependabot: Bumps actions/setup-java from v1 to v2. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR:  dependabot: Looks like actions/setup-java is up-to-date now, so this is no longer needed.  ",2021-04-06 07:53:17,2021-04-06 20:17:02,1,1,0
Issue#5470 Update CI to cancel previous runs and to use v2 of setup-java.,cla: yes,,,copybara-service: Update CI to cancel previous runs and to use v2 of setup-java. RELNOTES=n/a  ,2021-04-06 19:53:17,2021-04-06 20:16:26,1,1,1
Issue#5472 Internal change.,cla: yes,,,"copybara-service: Internal change. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-08 10:20:18,2021-04-08 10:48:52,1,14,1
Issue#5473 Annotate Predicate for nullness.,cla: yes,,,copybara-service: Annotate Predicate for nullness. RELNOTES=n/a  ,2021-04-08 10:21:31,2021-04-08 10:57:18,1,2,1
Issue#5474 Annotate Objects for nullness.,cla: yes,,,"copybara-service: Annotate Objects for nullness. Objects was in much the same shape as Optional. The main interesting change is Objects.hashCode, which accepts a nullable array of nullable objects. As part of our effort to use declaration annotations where possible, its parameter changes from... ...to... RELNOTES=n/a  ",2021-04-08 19:13:10,2021-04-08 19:35:45,0,0,0
Issue#5475 Annotate Optional for nullness.,cla: yes,,,"copybara-service: Annotate Optional for nullness. The annotations were already correct, so the actual work here was to switch the mainline to declaration annotations to accommodate Kotlin. I also added @ElementsAreNonnullByDefault, which changes the return types from platform types to non-null types in Kotlin's eyes. But I suspect this has essentially no practical effects except removing ! from any error messages that users see in the future. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-08 19:32:05,2021-04-08 19:53:19,1,2,1
Issue#5476 Simplify the logic of `CaseFormat.convert`.,cla: yes,,,"copybara-service: Simplify the logic of CaseFormat.convert. In this version, it is clearer to both humans and static analysis that the StringBuilder is not null when it is appended to. Additionally, the previous version could allocate a StringBuilder twice, while this version will not. The new logic produces different results for some edge cases. For example, converting _FOO_BAR from upper-underscore to lower-camel used to produce FooBar while now it produces _fooBar. The spec says A ""best effort"" approach is taken; if {@code str} does not conform to the assumed format, then the behavior of this method is undefined but we make a reasonable effort at converting anyway. None of the thousands of usages in Google's code base has any tests that are affected by this change. RELNOTES=n/a  ",2021-04-09 00:27:12,,1,2,1
Issue#5477 Annotate some more fairly boring classes for nullness.,cla: yes,,,"copybara-service: Annotate some more fairly boring classes for nullness. The changes are almost all just to replace @Nullable/@NullableDecl with @CheckForNull. The mildly interesting one again involves arrays, this time in lenientFormat. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-09 00:30:42,2021-04-09 00:49:26,1,10,1
Issue#5478 Annotate various boring classes for nullness.,cla: yes,,,"copybara-service: Annotate various boring classes for nullness. Aside from class-level annotations, the only nullness annotation in these classes is on the return type of a non-user-visible computeNext method in Splitter. RELNOTES=n/a  ",2021-04-09 00:30:57,2021-04-09 00:53:00,0,0,0
"Issue#5479 Add a suppression where we are missing a nullness annotation, and add some explicit null checks for cases in which our nullness checker can't prove that the value is non-null.",cla: yes,,,"copybara-service: Add a suppression where we are missing a nullness annotation, and add some explicit null checks for cases in which our nullness checker can't prove that the value is non-null. RELNOTES=n/a  ",2021-04-09 14:21:02,2021-04-09 14:49:10,0,0,0
Issue#5480 Annotate Equivalence for nullness.,cla: yes,,,copybara-service: Annotate Equivalence for nullness. RELNOTES=n/a  ,2021-04-09 18:04:10,2021-04-09 18:54:05,0,0,0
Issue#5481 Generalize the signature for Equivalance.onResultOf.,cla: yes,,,"copybara-service: Generalize the signature for Equivalance.onResultOf. Traditionally, we don't add wildcards unless they make new calls possible. This wildcard, by contrast, only lets users select a slightly different return type from the method. ...except now that we're more focused on supporting nullness analyses. For users of nullness analyses, this signature change opens up the possibility of passing a Function<@Nullable Foo, ...>. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-09 18:04:47,2021-04-09 19:58:23,1,4,1
Issue#5483 deprecate `ImmutableList.asList()`,cla: yes,,,copybara-service: deprecate ImmutableList.asList() RELNOTES=n/a  ,2021-04-09 21:57:31,2021-04-09 22:22:55,0,0,0
Issue#5484 Bump styfle/cancel-workflow-action from 0.8.0 to 0.9.0,"cla: yes, dependencies, github_actions",eamonnmcmanus,,"dependabot: Bumps styfle/cancel-workflow-action from 0.8.0 to 0.9.0. Sourced from styfle/cancel-workflow-action's releases. Huge thanks to @‚Äãthomwiggers for helping! Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR:  dependabot: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.  ",2021-04-12 09:36:59,2021-04-12 22:13:00,1,1,1
Issue#5485 Use Truth in some `ServiceManagerTest` tests.,cla: yes,,,"copybara-service: Use Truth in some ServiceManagerTest tests. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-12 16:44:09,2021-04-12 17:08:28,0,0,0
Issue#5486 Annotate Converter for nullness.,cla: yes,,,"copybara-service: Annotate Converter for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-12 20:22:33,2021-04-12 20:58:45,1,4,1
Issue#5487 Bump styfle/cancel-workflow-action from 0.8.0 to 0.9.0,cla: yes,,,copybara-service: Bump styfle/cancel-workflow-action from 0.8.0 to 0.9.0 Bumps styfle/cancel-workflow-action from 0.8.0 to 0.9.0. Signed-off-by: dependabot[bot] support@github.com Fixes #5484 RELNOTES=n/a  ,2021-04-12 21:52:36,2021-04-12 22:13:00,1,1,1
Issue#5488 Bump actions/cache from v2.1.4 to v2.1.5,"cla: yes, dependencies, github_actions",,,"dependabot: Bumps actions/cache from v2.1.4 to v2.1.5. Sourced from actions/cache's releases. Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR: 



              The text was updated successfully, but these errors were encountered:
              dependabot: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.  ",2021-04-13 07:56:33,2021-04-15 22:04:05,1,1,0
Issue#5489 Fix comment in Converter.,cla: yes,,,"copybara-service: Fix comment in Converter. Converter.apply is annotated as returning null, so it's sound. The LegacyConverter problem arises only if users view the converter as a Function<A, B>, since Function<A, B>.apply is not annotated as returning null (and yet a LegacyConverter may do so, even given a non-null input). RELNOTES=n/a  ",2021-04-13 15:11:26,2021-04-13 15:34:07,1,2,1
Issue#5490 Fix a rounding bug in `UnsignedLong.doubleValue()` and `.floatValue()`.,cla: yes,,,copybara-service: Fix a rounding bug in UnsignedLong.doubleValue() and .floatValue(). See the bug report for a detailed analysis. Fixes #5375. Thanks to @harpocrates (Alex Theriault) for the bug report and suggested fix. RELNOTES=Fixed a rounding bug in UnsignedLong.doubleValue().  ,2021-04-14 00:32:46,2021-04-14 00:53:04,0,0,0
Issue#5491 Add `ServiceManager.startupDurations()`.,cla: yes,,,"copybara-service: Add ServiceManager.startupDurations(). RELNOTES=Add ServiceManager.startupDurations(). 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-14 13:37:21,2021-04-14 13:58:46,1,3,1
Issue#5492 Mark `ServiceManager.startupDurations()` as `@J2ObjCIncompatible`.,cla: yes,,,copybara-service: Mark ServiceManager.startupDurations() as @J2ObjCIncompatible. RELNOTES=n/a  ,2021-04-14 16:14:48,2021-04-14 16:30:38,1,1,1
Issue#5493 Annotate `escape` for nullness.,cla: yes,,,"copybara-service: Annotate escape for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-14 17:48:40,2021-04-14 18:45:22,1,22,1
Issue#5494 Sort and uniquify .gwt.xml <inherits> lines.,cla: yes,,,copybara-service: Sort and uniquify .gwt.xml  lines. RELNOTES=n/a  ,2021-04-14 20:49:02,2021-04-14 21:10:05,0,0,0
Issue#5495 Annotate XmlEscapers for nullness.,cla: yes,,,"copybara-service: Annotate XmlEscapers for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-14 21:26:18,2021-04-14 22:01:57,0,0,0
Issue#5496 Annotate HTML escapers for nullness.,cla: yes,,,"copybara-service: Annotate HTML escapers for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-14 21:26:54,2021-04-14 22:09:01,0,0,0
Issue#5497 Bump actions/cache from v2.1.4 to v2.1.5,cla: yes,,,copybara-service: Bump actions/cache from v2.1.4 to v2.1.5 Bumps actions/cache from v2.1.4 to v2.1.5. Signed-off-by: dependabot[bot] support@github.com Fixes #5488 RELNOTES=n/a  ,2021-04-15 20:50:24,2021-04-15 22:04:06,1,1,0
Issue#5498 Use AbstractOwnableSynchronizer as a blocker when parking until interrupt is delivered.,cla: yes,,,copybara-service: Use AbstractOwnableSynchronizer as a blocker when parking until interrupt is delivered. RELNOTES=n/a  ,2021-04-16 16:17:00,2021-04-16 16:39:43,0,0,0
Issue#5499 Presize list builder for inCompletionOrder,cla: yes,,,"copybara-service: Presize list builder for inCompletionOrder RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-16 17:15:50,2021-04-19 15:39:15,0,0,0
Issue#5500 Suppress or fix all compiler warnings in util/concurrent,cla: yes,,,copybara-service: Suppress or fix all compiler warnings in util/concurrent RELNOTES=n/a  ,2021-04-16 18:32:54,2021-04-16 19:23:00,1,29,1
Issue#5501 Annotate most of `reflect` for nullness.,cla: yes,,,"copybara-service: Annotate most of reflect for nullness. And add some documentation relevant to #3349 RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-16 20:44:09,2021-04-16 21:10:16,1,28,1
Issue#5502 Recommend Caffeine over common.cache.,cla: yes,"cpovirk, jbduncan",,copybara-service: Recommend Caffeine over common.cache. RELNOTES=n/a  ,2021-04-19 15:48:05,2021-04-19 16:18:12,1,2,2
Issue#5503 Link to the immutable collectors from the utility classes.,cla: yes,,,copybara-service: Link to the immutable collectors from the utility classes. RELNOTES=n/a  ,2021-04-19 15:55:59,2021-04-19 16:22:31,1,3,1
"Issue#5504 Document issues with `ClassPath`, and recommend ClassGraph.",cla: yes,,,"copybara-service: Document issues with ClassPath, and recommend ClassGraph. Relevant to #2130 and #3349. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-19 16:24:11,2021-04-19 16:51:54,0,0,0
Issue#5505 clarify `AtomicDoubleArray.set()` javadocs.,cla: yes,,,"copybara-service: clarify AtomicDoubleArray.set() javadocs. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-19 16:53:22,2021-04-19 17:21:42,1,2,1
Issue#5506 Add some documentation to `ByteSource` and `CharSource` about the general expectations for source behavior and what the behavior might be if those expectations aren't met.,cla: yes,,,copybara-service: Add some documentation to ByteSource and CharSource about the general expectations for source behavior and what the behavior might be if those expectations aren't met. RELNOTES=n/a  ,2021-04-19 17:06:59,2021-04-19 17:28:16,0,0,0
Issue#5507 fix `CacheBuilder` javadoc error.,cla: yes,,,copybara-service: fix CacheBuilder javadoc error. RELNOTES=n/a  ,2021-04-19 17:37:41,2021-04-19 17:58:46,0,0,0
Issue#5508 Document that `ImmutableType.of()` returns a singleton instance.,cla: yes,,,copybara-service: Document that ImmutableType.of() returns a singleton instance. RELNOTES=n/a  ,2021-04-19 17:39:57,2021-04-19 18:06:10,0,0,0
Issue#5509 Discourage usage of EventBus.,cla: yes,"Stephan202, cpovirk, perceptron8",,copybara-service: Discourage usage of EventBus. RELNOTES=n/a  ,2021-04-19 17:52:45,2021-04-19 19:44:42,1,2,3
Issue#5510 Bump deps.,cla: yes,,,"copybara-service: Bump deps. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-19 18:56:15,2021-04-19 19:17:58,1,2,1
Issue#5511 fix javadoc typos,cla: yes,,,"copybara-service: fix javadoc typos RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-19 19:46:36,2021-04-19 20:08:28,1,19,1
Issue#5512 Clarify LRU behavior of `CacheBuilder`.,cla: yes,,,"copybara-service: Clarify LRU behavior of CacheBuilder. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-19 20:00:35,2021-04-19 20:23:12,1,2,1
Issue#5513 Fix exception message in `CacheBuilderSpec`.,cla: yes,,,copybara-service: Fix exception message in CacheBuilderSpec. RELNOTES=n/a  ,2021-04-19 20:01:19,2021-04-19 20:28:05,0,0,0
Issue#5514 Fix typo.,cla: yes,,,copybara-service: Fix typo. #5502 (comment) RELNOTES=n/a  ,2021-04-19 20:05:24,2021-04-19 21:26:55,0,0,0
Issue#5515 Remove `@Beta` from `EventBus` and related classes.,cla: yes,,,"copybara-service: Remove @Beta from EventBus and related classes. Note that we're primarily removing this because we do not intend to make further changes to the package, and we're discouraging its use. (See 82a3ecf.) We're not going to actually @Deprecate it, though, because that would be unnecessarily disruptive especially given that migrating to another solution is not necessarily straightforward. Fixes #3360. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-19 20:12:10,2021-04-19 20:44:47,0,0,0
Issue#5516 Replace old-style loops with enhanced for loops,cla: yes,,,copybara-service: Replace old-style loops with enhanced for loops Fixes #3622 RELNOTES=n/a  ,2021-04-19 20:20:36,2021-04-19 20:50:39,0,0,0
"Issue#5517 Clarify what ""different equivalence relations"" means.",cla: yes,,,"copybara-service: Clarify what ""different equivalence relations"" means. Fixes #3808. RELNOTES=n/a  ",2021-04-19 21:13:39,2021-04-19 21:33:28,0,0,0
Issue#5518 Discourage use of `ArrayTable`.,cla: yes,,,copybara-service: Discourage use of ArrayTable. RELNOTES=n/a  ,2021-04-19 21:18:20,2021-04-19 21:40:57,0,0,0
Issue#5519 Delete the `FileBackedOutputStream` temp file if writing to it fails.,cla: yes,,,"copybara-service: Delete the FileBackedOutputStream temp file if writing to it fails. We don't delete the temp file when the stream is closed, because that would be a change in observable behaviour. Fixes #1664. RELNOTES=If writing to the temp file in FileBackedOutputStream fails, we now delete it before propagating the exception.  ",2021-04-20 13:29:06,2021-04-20 14:16:20,1,2,1
Issue#5520 Annotate `hash` for nullness.,cla: yes,,,copybara-service: Annotate hash for nullness. RELNOTES=n/a  ,2021-04-20 18:11:34,2021-04-20 18:44:07,0,0,0
Issue#5521 Make `MoreFiles.deleteRecursively()` throw `NoSuchFileException` when the `path` argument itself doesn't exist.,cla: yes,,,copybara-service: Make MoreFiles.deleteRecursively() throw NoSuchFileException when the path argument itself doesn't exist. Fixes #3203. RELNOTES=n/a  ,2021-04-20 19:57:27,2021-04-20 20:22:26,1,2,1
Issue#5523 Annotate `eventbus` for nullness.,cla: yes,,,"copybara-service: Annotate eventbus for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-22 02:19:55,2021-04-22 13:05:56,1,24,1
Issue#5524 Annotate `primitives` for nullness.,cla: yes,,,copybara-service: Annotate primitives for nullness. RELNOTES=n/a  ,2021-04-22 02:40:38,2021-04-22 13:09:32,0,0,0
Issue#5525 Use ConcurrentHashMap.newKeySet() in Sets.newConcurrentHashSet(),cla: yes,,,"copybara-service: Use ConcurrentHashMap.newKeySet() in Sets.newConcurrentHashSet() Collections.newSetFromMap implements 'add' using an unconditional 'put'
on the underlying map, which for ConcurrentHashMap results in acquiring
a lock. ConcurrentHashMap.newKeySet() implements 'add' using
putIfAbsent, which as of https://bugs.openjdk.java.net/browse/JDK-8161372
avoids acquiring a lock if the key is already present. RELNOTES=N/A 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-22 17:20:29,2021-04-22 18:13:19,1,3,1
Issue#5526 checkNotNull's argument should not be marked as NonNull,"type=enhancement, package=base, status=in-progress, cla: yes, P2",cpovirk,cpovirk,"TomaszGaweda: checkNotNull ensures that output it's not null, it's this method responsibility to check non-nullability. NotNull on input parameter should be used if method assumes input is not null/requires it. Adding NotNull broke IntelliJ's code analysis. IntelliJ assumed that NonNull argument must be null on method input, however in fact method's contract is to ensure that on output the value is not null. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  TomaszGaweda: @googlebot I signed it!  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  TomaszGaweda: @googlebot I signed it!  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  TomaszGaweda: @googlebot I fixed it.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  cpovirk: Unfortunately, we are trying to accommodate many different tools' nullness analyses, and every change we make to accommodate one tends to make another one unhappy :( It looks like this specific change was made to accommodate Error Prone's ReturnMissingNullable, which has since been deleted. So we may be able to back it out. And in fact, we're in the process of finally annotating Guava for nullness in a more modern way, as you can see in some of these commits. So the change may even happen soon. Still, there are two bits of bad news: First, I still don't know if backing out the annotation will cause issues for some tool. If it does, we might leave the annotation in place. And that's because... Second, the purpose of Preconditions.checkNotNull is for code like the following: (We've written some more about the meaning we intend for ""preconditions."" But we intend to write more about Preconditions.checkNotNull specifically, since this is a common question.) In code like that, it makes sense for checkNotNull to require a non-null input: That way, nullness analyses can catch you if you accidentally try to call checkNotNull on a parameter that can be null. It's true that there are still cases in which you need to perform null checks on values that can't be annotated as non-null. (This sometimes even happens with method parameters.) In that case, options include (depending on the specific tool you're using): Again, though, we should write this down in more detail somewhere. ...and, while we feel OK about requiring a non-null value here, it's not clear if that's going to cause more trouble than it's worth. So we'll see how things go as we adopt nullness annotations more widely.  hpple: Hi, Chris! It comes handy to use checkNotNull in cases when you want to have message templates.
This feature looks like a great advantage vs Objects.requireNonNull(o), and cannot be easily replaced by alternatives you have suggested. E.g., usage of Objects.requireNonNull(o, Supplier) may lead to undesired capturing lambda allocations. But, unfortunately this @NonNull annotation may completely ruin IntelliJ experience, because if you have to cope with some library code annotated with @Nullable (for some generic purpose) as an input for your own code, you will encounter confusing Argument xxx might be null inspection warning. From my perspective, it seems reasonable to have methods like checkNotNull as ""bridges"" between ""nullable"" and ""not-null"" worlds, with ""promotion"" from the one to the another for a data used in these checks.  cpovirk: Understood, thanks: Both signatures are useful in different cases :( Anyway, the reason that I assigned this issue to myself yesterday is that I do in fact have a CL in progress to make the proposed change. Now, I still think it's conceptually the wrong change. But the fact is that tons of people already use checkNotNull for tons of @Nullable values. So, if they get compiler errors/warnings when they turn on nullness analysis, then they're just going to turn it right back off. Thus, by discouraging people from adopting nullness analysis, the conceptually correct signature for checkNotNull is causing more nullness problems that it prevents.  ",2021-04-23 09:28:19,2021-05-17 14:07:54,1,1,4
Issue#5530 Add warnings to documentation of some multimaps and `Multiset` that modifying a value with respect to `equals()` is dangerous.,cla: yes,,,copybara-service: Add warnings to documentation of some multimaps and Multiset that modifying a value with respect to equals() is dangerous. See #357. RELNOTES=n/a  ,2021-04-26 14:51:18,2021-04-26 17:32:52,1,12,1
Issue#5531 Annotate `graph` for nullness.,cla: yes,,,"copybara-service: Annotate graph for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-26 16:01:13,2021-04-26 17:43:47,0,0,0
Issue#5532 Make `MapIteratorCache` and `MapRetrievalCache` mostly hostile to nulls.,cla: yes,,,"copybara-service: Make MapIteratorCache and MapRetrievalCache mostly hostile to nulls. None of our graph classes hold nulls, so there is no need to be able to do so here: We only ever instantiate these classes with non-null types, and we nearly always pass arguments that are known to be non-null. To be fair, the downsides to holding nulls here would be relatively minor: We'd need to declare type parameters like K extends @Nullable Object instead of just K (and parameters like @CheckForNull Object key instead of Object key). (Granted, in order to implement null hostility, we end up adding boilerplate of another kind in the form of checkNotNull calls to make NullPointerTester happy.) We'd need to catch from @Nullable K to K in MapRetrievalCache.get. This is doable, but it's ugly (see c.g.c.base.NullnessCasts), and of course it's not checked at runtime. On net, it feels simplest to be consistent with the rest of the package. While I'm here, I also demoted some public methods to package-private. They're defined in package-private types that never escape the package, so this is academic, but it's nice to know that immediately when looking at the source. This is spirtually similar to #5451. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-26 16:01:14,2021-04-26 16:23:40,1,6,1
"Issue#5533 Reject `null` in `CharStreams.asWriter(appendable).write(string[, ...])`.",cla: yes,,,"copybara-service: Reject null in CharStreams.asWriter(appendable).write(string[, ...]). This brings its behavior in line with other Writer implementations. Unfortunately, the docs don't describe this behavior: https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/io/Writer.html#write(java.lang.String) Note also that this behavior differs from the behavior of Writer.append(null), which is to write the four characters ""null."" That behavior is itself poorly documented, since the docs for append(CharSequence) claim that it is equivalent to out.write(csq.toString()), which would throw NPE... though at least that is contradicted in the @param tag. (The difference between write and append presumably arises from inheriting append from the newer Appendable API.) RELNOTES=io: Changed CharStreams.asWriter(appendable).write(string[, ...]) to reject a null string.  ",2021-04-26 19:14:32,2021-04-26 19:35:12,1,2,1
Issue#5534 Avoid unlikely NullPointerException in deleteDirectoryContents and deleteRecursively.,cla: yes,,,"copybara-service: Avoid unlikely NullPointerException in deleteDirectoryContents and deleteRecursively. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-26 19:45:06,2021-04-26 20:05:13,1,1,1
Issue#5535 Deflake `HashingTest`.,cla: yes,,,"copybara-service: Deflake HashingTest. We have one bucket per bit in checkAvalanche. When the hash function produces a lot of bits, that means that the trials are spread over more of them, and the number of results per bucket is lower. That increases the chance of seeing a biased result through bad luck. So we need more trials when there are more bits. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-27 15:05:16,2021-04-27 15:26:23,0,0,0
Issue#5536 Annotate `io` for nullness.,cla: yes,,,copybara-service: Annotate io for nullness. RELNOTES=n/a  ,2021-04-27 16:19:57,2021-04-27 16:39:53,1,77,1
Issue#5537 Annotate `net` for nullness.,cla: yes,,,"copybara-service: Annotate net for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-28 14:34:45,2021-04-28 15:04:42,0,0,0
Issue#5538 Annotate `math` for nullness.,cla: yes,,,"copybara-service: Annotate math for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-28 15:16:26,2021-04-28 15:38:49,1,34,1
Issue#5539 Comment out @ElementTypesAreNonnullByDefault in classes that are missing `@CheckReturnValue` for at least one location.,cla: yes,,,"copybara-service: Comment out @ElementTypesAreNonnullByDefault in classes that are missing @CheckReturnValue for at least one location. Also, standardize TODOs. RELNOTES=n/a  ",2021-04-28 17:38:41,2021-04-28 18:00:54,1,10,1
Issue#5541 EndpointPair.java: s/adjacentNode(Object Node)/adjacentNode(N node)/,cla: yes,,,"copybara-service: EndpointPair.java: s/adjacentNode(Object Node)/adjacentNode(N node)/ RELNOTES=graph: Make EndpointPair.adjacentNode require an N instead of accept any Object. 



              The text was updated successfully, but these errors were encountered:
              ",2021-04-30 18:57:24,2021-04-30 19:21:56,0,0,0
Issue#5542 Split afterRanInterruptibly into afterRanInterruptiblySuccess and afterRanInterruptiblyFailure.,cla: yes,,,"copybara-service: Split afterRanInterruptibly into afterRanInterruptiblySuccess and afterRanInterruptiblyFailure. This makes the code easier to understand for nullness checkers -- and probably easier to understand, full stop. (Also, rename the GWT emulation's InterruptibleTask's type parameter from V to T. This makes it match the normal version. And that in turn matches other classes like AbstractTransformFuture, which differentiates between V (the value type of the Future) and T (the type returned by the task, which may be either a V or a ListenableFuture). While InterruptibleTask itself is not a Future, its subclasses are nested inside Future subclasses, so V may still be confusing. Plus, ""T"" is pretty much the ""default"" name for type parameters :)) RELNOTES=n/a  ",2021-04-30 19:06:55,2021-04-30 19:31:05,0,0,0
Issue#5543 Minor tweaks to CacheBuilder docs.,cla: yes,,,copybara-service: Minor tweaks to CacheBuilder docs. RELNOTES=n/a  ,2021-05-03 16:58:01,2021-05-03 17:18:26,0,0,0
"Issue#5544 Instead of partially implementing `Future`, fully implement a custom `Cancellable` interface, and ensure that `cancel` and `isCancelled` always work.",cla: yes,,,"copybara-service: Instead of partially implementing Future, fully implement a custom Cancellable interface, and ensure that cancel and isCancelled always work. This does require some extra allocations -- and some gymnastics to avoid circular references (which might have already existed but gone undetected until now??) -- but it seems much more honest, even if the bug we're guarding against was unlikely in practice. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-05 00:38:03,2021-05-05 01:01:27,0,0,0
Issue#5545 Add explicit null checks.,cla: yes,hcharnell7,,copybara-service: Add explicit null checks. These will be required as soon as our checker understands that Path.getFileName() sometimes returns null. RELNOTES=n/a  hcharnell7: Awesome  ,2021-05-05 16:40:14,2021-05-05 17:03:17,1,1,2
Issue#5546 Document when `EndpointPair.adjacentNode` changed signature.,cla: yes,"Stephan202, cpovirk",,"copybara-service: Document when EndpointPair.adjacentNode changed signature. (Followup to CL 371380054.) As usual, the scheme is: And in fact this change is binary-compatible, since the erasure of N is Object, the old parameter type. And while this change was potentially source-incompatible, we knew that and tested for problems internally, and we saw no breakages. Compare to the @since tag for Queues.newPriorityBlockingQueue. RELNOTES=n/a  Stephan202: PR got closed just as I added the comment üôÉ  Stephan202:  cpovirk: I am trying to decide if I can justify what I have as technically a valid option. (Compare ""requires that the argument be of type N,"" similar to in Queues which is maybe also valid??) But I am in over my head grammatically :) I grant that this is at least awkward. Maybe I'll tweak it; unsure.  Stephan202: I think the Queues alternative is also valid, while I'm not sure I've seen this construct before. But I'm not a native speaker, so... üôä  cpovirk: #5572  ",2021-05-05 19:10:41,2021-05-05 19:55:39,1,2,2
Issue#5547 Annotate much of `util.concurrent` for nullness.,cla: yes,kashike,,"copybara-service: Annotate much of util.concurrent for nullness. RELNOTES=n/a  kashike: I'm curious for the reasoning of moving from checker-qual back to jsr305, seeing as #2960 exists?  cpovirk: I figured someone would ask that one of these days :) The plan is still to eliminate jsr305. But yes, first we're taking this deliberate step backward. The reason for it is Kotlin: Kotlin doesn't yet fully recognize type-use annotations, so we we're using declaration annotations where we can. Once we're on Kotlin 1.5, we'll move from CheckForNull to Nullable. We might well be fully on Nullable before we cut a new release. We'll see.  kashike: Ah, I see - interesting. Thank you for the reply!  ",2021-05-05 22:06:56,2021-05-05 22:27:42,0,0,2
Issue#5548 Update Public Suffix data.,cla: yes,,,copybara-service: Update Public Suffix data. RELNOTES=n/a  ,2021-05-06 20:05:36,2021-05-06 20:29:12,1,2,1
Issue#5549 feature: add Optional ifPresent.,"type=addition, package=base, status=duplicate, cla: no",,netdpb,"WallanceLee: Hello. When I use Optional, I find that it needs to check isPresent before consuming value wrapped in Optional objects.
So I create a new method ifPresent with a parameter Consumer to wrap isPresent and do something.
This is my first commit in guava project and I have signed CLA.
Thanks for your review for my PR. 



              The text was updated successfully, but these errors were encountered:
              google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  WallanceLee: I have signed CLA and install CLA in my repo. Please recheck.  google-cla: We found a Contributor License Agreement for you (the sender of this pull request), but were unable to find agreements for all the commit author(s) or Co-authors.  If you authored these, maybe you used a different email address in the git commits than was used to sign the CLA (login here to double check)?  If these were authored by someone else, then they will need to sign a CLA as well, and confirm that they're okay with these being contributed to Google.
In order to pass this check, please resolve this problem and then comment @googlebot I fixed it.. If the bot doesn't comment, it means it doesn't think anything has changed. ‚ÑπÔ∏è Googlers: Go here for more info.  netdpb: We recommend using java.util.Optional if you are working with JDK 8 or later. For a number of reasons, we do not plan to add functionality to Guava's Optional type. This is a duplicate of #3135  ",2021-05-09 03:15:36,2021-05-10 14:19:38,1,2,2
"Issue#5550 Fix (or suppress) soon to be compile errors where the result of a method invocation for certain `Collection`, `Iterable`, and `Iterator` APIs _must_ be either used or assigned to a variable.",cla: yes,,,"copybara-service: Fix (or suppress) soon to be compile errors where the result of a method invocation for certain Collection, Iterable, and Iterator APIs must be either used or assigned to a variable. RELNOTES=n/a  ",2021-05-11 14:30:22,2021-05-11 14:56:20,1,5,1
Issue#5551 Bump actions/checkout from 2 to 2.3.4,"package=general, status=in-progress, cla: yes, P2, dependencies, github_actions",cpovirk,cpovirk,"dependabot: Bumps actions/checkout from 2 to 2.3.4. Sourced from actions/checkout's releases. Add Third Party License Information to Dist Files Fix default branch resolution for .wiki and when using SSH Fallback to the default branch Fetch all history for all tags and branches when fetch-depth=0 Changes to support GHES (here and here) Sourced from actions/checkout's changelog.  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR:  dependabot: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.  ",2021-05-12 06:10:37,2021-05-12 16:24:52,1,1,1
Issue#5552 Bump actions/checkout from 2 to 2.3.4.,cla: yes,,,"copybara-service: Bump actions/checkout from 2 to 2.3.4. Fixes #5551 RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-12 16:02:35,2021-05-12 16:24:52,1,1,1
Issue#5553 Internal change.,cla: yes,,,"copybara-service: Internal change. RELNOTES=n/a  Stephan202: ToStringHelper: omitEmptyValues() - Implementation RELNOTES=Fix bug in UriEncoder that interpreted and stripped numeric prefixes. The RELNOTES text seems unrelated to the code change ü§î  cpovirk: The RELNOTES text seems unrelated to the code change Thanks. I have a hard time explaining that. I don't have access to the full history of changelist descriptions for this change, but for what it's worth, I don't see that description in any of the descriptions I can access. I do see another changelist with those release notes. It was a Google-internal CL (since we haven't released UriEncoder publicly, given its historical design bugs), albeit to a directory (common/net) that is partially open-sourced. So our Copybara migration should have seen it but largely ignored it. Maybe it temporarily touched an open-sourced CL (probably accidentally)? Still, I'm not sure why Copybara would have ""combined"" it with this one. If this comes up again, maybe I'll be in a better position to dig further. I'll also try to watch for CLs that set RELNOTES when they're not actually expected to affect open-source code: If we had simply removed RELNOTES from the UriEncoder, then (maybe) we wouldn't have seen this problem.  ",2021-05-13 15:12:31,2021-05-14 22:05:18,0,0,2
Issue#5554 Make generator methods visible within the package.,cla: yes,,,"copybara-service: Make generator methods visible within the package. This prevents an issue under Desugar and Java 11: The two combine to synthesize a -$$Nest$m wrapper method around generateInt: Java 11 makes generateInt ""truly private"" (using ""nestmates""), so Desugar needs to synthesize a package-visible wrapper so that FreshInvocationHandler can still call the method. The result is 2 generator methods for the type int, which FreshValueGenerator doesn't like. (""Which one should it use?"") I probably didn't need to make all methods visible within the package, just generateInt and any others that might happen to be called outside FreshValueGenerator.class (possibly none, currently). But I figured I might as well future-proof everything. Note that making the methods package-visible then required me to add nullness annotations to satisfy NullPointerTester. ...and now that I'm writing this, it occurs to me that the better solution might have been to have FreshValueGenerator skip synthetic methods. Oh, well. This works. And it has the bonus of decreasing the chances that IDEs or other tools will report these methods as unused. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-13 20:50:57,2021-05-13 21:14:25,1,2,1
Issue#5556 Generalize `Function` and `Predicate` factories to let callers specify the desired input type.,cla: yes,,,"copybara-service: Generalize Function and Predicate factories to let callers specify the desired input type. RELNOTES=base: Changed Functions.forSupplier and Predicates.instanceOf to accept an additional type argument to specify the input type for the returned Function/Predicate. The flexibility we're adding should typically not be necessary if users follow the PECS principle, but it can be useful in some cases, particularly around nullness analysis. Note that this change may require updates to callers' source code (to specify an additional type argument). Still, it maintains binary compatibility.  ",2021-05-14 10:29:02,2021-05-14 10:50:57,1,4,1
Issue#5559 Fix (or suppress) soon to be compile errors where the result of a method invocation for certain `Map` APIs _must_ be either used or assigned to a variable.,cla: yes,,,copybara-service: Fix (or suppress) soon to be compile errors where the result of a method invocation for certain Map APIs must be either used or assigned to a variable.  ,2021-05-17 13:40:07,2021-05-17 14:00:12,1,2,1
Issue#5560 Nearly finish annotating `base` for nullness.,cla: yes,,,"copybara-service: Nearly finish annotating base for nullness. I have given up hope on Preconditions.checkNotNull ""correctly."" For details, see the comment in the source code. Fixes #5526 RELNOTES=n/a  ",2021-05-17 13:48:16,2021-05-17 14:07:55,0,0,0
"Issue#5561 add `@InlineMe` to deprecated, inlineable APIs in Guava.",cla: yes,,,"copybara-service: add @InlineMe to deprecated, inlineable APIs in Guava. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-17 14:46:44,2021-05-17 15:07:22,0,0,0
Issue#5562 Document the safe cycle in AbstractScheduledService.,cla: yes,,,copybara-service: Document the safe cycle in AbstractScheduledService. RELNOTES=n/a  ,2021-05-17 16:44:32,2021-05-17 17:03:07,0,0,0
Issue#5563 FEATURE: Add BloomFilter support for conversion between BloomFilter.bits and Redis bitmap,"type=addition, package=hash, status=research, cla: yes, P4",,,"Yanam: This PR adds the method to convert guava bitmap and redis bitmap to each other. Real life use-case:
In my project, I need to provide BloomFilter filtering service based on the distributed cache such as Redis. My implementation method is to base the basic logic on the existing code of BloomFilter of Guava, such as the hash method, but the bitmap is based on the bitmap of Redis. This works well so far, but there are situations where when building BloomFilter with a lot of data, such as building BloomFilter with a million data, the number of Redis operations becomes a performance bottleneck. My approach is to build BloomFilter in the local cache. Then convert Guava's bitmap to Redis's bitmap format and write it to Redis once. 



              The text was updated successfully, but these errors were encountered:
              cpovirk: Thanks. My guess is that we won't merge this: We probably don't want to have code that we'd ideally have our CI test with Redis in order to ensure that it keeps working. But I'll keep it open to see if demand arises. If nothing else, maybe we'll see demand for exposing the underlying bits in a form that is more generally useful.  ",2021-05-18 15:49:17,2021-05-21 07:25:13,1,2,2
Issue#5564 Update pom.xml CI info.,cla: yes,,,copybara-service: Update pom.xml CI info. Fixes #5558 RELNOTES=n/a  ,2021-05-18 16:32:31,2021-05-18 17:26:27,1,2,1
Issue#5565 See what happens if I use œÄ as a variable name.,cla: yes,,,copybara-service: See what happens if I use œÄ as a variable name. RELNOTES=n/a  ,2021-05-20 20:44:46,2021-05-20 23:47:49,1,2,1
Issue#5566 Test PR for new GitHub authentication token.,cla: yes,,,"cpovirk: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-21 13:33:48,2021-05-21 13:33:57,1,1,1
Issue#5567 Use `Class.isPrimitive()` to avoid doing any work in `Defaults` for reference types.,cla: yes,,,copybara-service: Use Class.isPrimitive() to avoid doing any work in Defaults for reference types. RELNOTES=n/a  ,2021-05-21 15:21:17,2021-05-21 15:48:57,1,2,1
Issue#5569 `Invokable` no longer inherits from `java.lang.reflect.AccessibleObject`.,cla: yes,,,"copybara-service: Invokable no longer inherits from java.lang.reflect.AccessibleObject. There was no strong reason for this inheritance. Additionally, it is an accident that AccessibleObject is subclassable at all outside its class; its constructor is protected but should really have been package-private. That's an API mistake that was made in Java 1.2 and is hard to correct now, but the protected constructor is being deprecated. (My related rant from 15 years ago is here.) Invokable also no longer implements GenericDeclaration. Invokable does continue to provide instance methods with the same signatures as the ones inherited from AccessibleObject and GenericDeclaration, as they stood in Java 8. This change is technically a breaking API change. In principle users could have assigned an instance of Invokable to a variable of type AccessibleObject. No code does that in Google's giant code base so it seems unlikely in practice. (In fact we only have a couple of dozen uses of Invokable overall.) Also, this API is @Beta so a hypothetical-but-very-unlikely breakage is acceptable. RELNOTES=Invokable no longer inherits from AccessibleObject or GenericDeclaration, though it continues to define instance methods with the same signatures as the formerly-inherited ones. This is technically a breaking API change to this @Beta API. We think it very unlikely that anyone is affected in practice.  ",2021-05-24 20:59:52,2021-05-24 22:08:32,0,0,0
Issue#5571 Expand docs about Caffeine.,cla: yes,,,copybara-service: Expand docs about Caffeine. RELNOTES=n/a  ,2021-05-25 14:24:28,2021-05-25 14:47:11,0,0,0
Issue#5572 Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.,cla: yes,Stephan202,,copybara-service: Clarify comments discussed in #5546 (comment). RELNOTES=n/a  ,2021-05-25 15:48:42,2021-05-25 16:09:55,1,4,2
Issue#5573 Remove @Beta from HashFunction.,cla: yes,,,"copybara-service: Remove @beta from HashFunction.
#3284 RELNOTES=Remove @beta from HashFunction. 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-25 18:01:49,2021-05-25 18:23:07,0,0,0
Issue#5574 Remove suppressions for `ShouldNotSubclass`.,cla: yes,,,"copybara-service: Remove suppressions for ShouldNotSubclass. We have disabled the check for our packages internally: Of course, it's possible that ShouldNotSubclass would eventually have caught new occurrences that we would have cared about. But historically that doesn't seem to have been the case. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-26 17:39:03,2021-05-26 18:10:10,0,0,0
Issue#5575 Avoid redundant calculation.,"cla: yes, P4",,,"dugenkui03: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  dugenkui03: @googlebot I signed it!  amalloy: This isn't such a trivial optimization, because get has side effects, and omitting a call to get could impact other axes of performance, perhaps negatively.  I think we would want to see evidence that this rewrite actually improves performance overall, rather than just for a single call to getAll, before we'd merge this.  ",2021-05-26 18:37:56,,1,1,2
Issue#5576 Add Sec-CH-UA-Bitness to `HttpHeaders`.,cla: yes,,,"copybara-service: Add Sec-CH-UA-Bitness to HttpHeaders. The header is added in wicg.github.io/ua-client-hints/#sec-ch-ua-bitness RELNOTES=net: Added HttpHeaders constant for Sec-CH-UA-Bitness. 



              The text was updated successfully, but these errors were encountered:
              ",2021-05-26 20:45:05,2021-05-26 21:04:35,1,2,1
"Issue#5578 Annotate `ImmutableCollection`, `ImmutableList`, `ImmutableSet`, and supporting classes for nullness.",cla: yes,,,"copybara-service: Annotate ImmutableCollection, ImmutableList, ImmutableSet, and supporting classes for nullness. RELNOTES=n/a  ",2021-05-27 10:44:29,2021-05-27 11:06:33,0,0,0
Issue#5579 Bump actions/cache from 2.1.5 to 2.1.6,"cla: yes, dependencies, github_actions",eamonnmcmanus,,"dependabot: Bumps actions/cache from 2.1.5 to 2.1.6. Sourced from actions/cache's releases.  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR:  cpovirk: (The Copybara failure is because PR imports still don't work for Guava. I may still try to fix that ""someday,"" but for now, we have to make the changes manually. Or, really, there is probably no particular need to bother for action/cache unless the release notes call out something we care about :))  dependabot: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version. You can also ignore all major, minor, or patch releases for a dependency by adding an ignore condition with the desired update_types to your config file. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.  ",2021-05-28 06:17:55,2021-06-01 15:58:00,1,1,2
Issue#5581 Bump actions/cache from 2.1.5 to 2.1.6. Closes #5579.,cla: yes,,,copybara-service: Bump actions/cache from 2.1.5 to 2.1.6. Closes #5579. RELNOTES=n/a  ,2021-06-01 15:34:55,2021-06-01 15:58:01,1,1,1
Issue#5582 Fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.,cla: yes,,,copybara-service: Fix typo noted by @ben-manes in ce4bad3#r51511526. RELNOTES=n/a  ,2021-06-01 16:39:10,2021-06-02 20:57:00,1,2,1
Issue#5583 Split `java.time` tests out of `StopwatchTest`.,cla: yes,,,copybara-service: Split java.time tests out of StopwatchTest. RELNOTES=n/a  ,2021-06-01 18:57:02,2021-06-01 19:18:18,1,3,1
Issue#5584 Remove `Service.State.isTerminal()`.,cla: yes,,,"copybara-service: Remove Service.State.isTerminal(). It was only referenced in one place. Since we guarantee that transitions between the states in the Service.State enum are always from an earlier to a later value, we know that the terminal states must be last. So it's enough to compare with the first terminal state, TERMINATED. The code in question already does something very similar with the RUNNING state a few lines earlier. RELNOTES=n/a  ",2021-06-01 19:10:29,2021-06-01 19:30:56,1,4,1
Issue#5585 Annotate `Multiset` classes for nullness.,cla: yes,,,"copybara-service: Annotate Multiset classes for nullness. For now, I've omitted a few annotations on SortedMultiset that require cleanup to callers. Also, add @DoNotCall to some ImmutableSortedMultiset methods that always throw UnsupportedOperationException. RELNOTES=n/a  ",2021-06-01 21:03:38,2021-06-01 22:07:20,1,53,1
Issue#5586 Include toString() of delegate executor with listening decorator,cla: yes,,,"copybara-service: Include toString() of delegate executor with listening decorator RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-01 21:30:42,2021-06-01 23:41:34,0,0,0
Issue#5587 Use `<? extends @Nullable Object>` instead of `<?>`.,cla: yes,,,"copybara-service: Use <? extends @Nullable Object> instead of <?>. The two should be equivalent, but Kotlin 1.5.10 appears to be interpreting @ElementTypesAreNonnullByDefault to mean that <?> excludes nulls, thanks to @TypeQualifierDefault({PARAMETER, ...}) @Nonnull. (We suspect that this is a bug, so we're looking into that, but we haven't come up with a minimal repo yet.) It's possible that we'll want to make similar changes to other APIs. My initial stab at a list is: For now, though, I'm sticking to modifying only Joiner. ...and that's probably just as well: There are side effects: Prior to this CL, the following is accepted by javac without warning: After this CL, that same code produces an unchecked warning. That's because of the raw type List, which javac presumably cares about now because it runs some extra checks on account of the explicit bound, even though that bound is Object. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-02 15:15:37,2021-06-02 17:01:19,1,2,1
Issue#5588 Enabling Tables.newCustomTable with ConcurrentMap,"cla: yes, P4",,,"bauna: If I want to use Tables.newCustomTable with ConcurrentMaps, the current implementation is not thread safe when the row is not present. Because it's delegating to the backing map by calling computeIfAbsent.  amalloy: Could you explain the problem in more detail? What is the use case where this method causes a problem? To me this looks like a correct implementation, given that the documentation for newCustomTable notes: Note that this implementation is not synchronized. If multiple threads access this table concurrently and one of the threads modifies the table, it must be synchronized externally.
...
The table assumes complete ownership over backingMap and the maps returned by factory. Those objects should not be manually updated [...]  moonfruit: @amalloy Yes, you are right. Tables.newCustomTable() makes no guarantee about thread-safe.
But if we merge this little pull request, we can assure Tables.newCustomTable(new ConcurrentHashMap<>(), ConcurrentHashMap::new) thread-safe because of ConcurrentHashMap.computeIfAbsent() is thread safe.
Why not merge it?  bauna: Hi @amalloy,
@moonfruit has explained it better than me. If we made that small change it enables us to Tables.newCustomTable(new ConcurrentHashMap<>(), ConcurrentHashMap::new) and be sure it is thread safe without change anything else.
Also it's a more correct implementation because it follows the ""Tell, don't ask"" principle by delegating to the inner map.  cpovirk: This change would not be enough to make newCustomTable thread-safe: While it makes calls to getOrCreate thread-safe (assuming that the backing map and supplier are thread-safe), it does not make other operations like remove thread-safe. Still, the simplification to the code is nice. Unfortunately, we currently still maintain compatibility with older versions of Java for our Android and JRE7 users, so we can't use computeIfAbsent in code that works there. We can use computeIfAbsent in environments in which it's available while avoiding it when it's not, but this typically makes our code more complex. So we almost always avoid that approach. Once we start requiring all our users to target environments that contain computeIfAbsent, we could make changes like this. But I expect that not to happen for years.  ",2021-06-02 20:40:22,,1,1,4
Issue#5590 Optimize ImmutableSet hash flooding detection.,cla: yes,,,"copybara-service: Optimize ImmutableSet hash flooding detection. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-03 19:51:57,2021-06-03 20:16:43,0,0,0
Issue#5591 Add methods similar to ConcurrentMap to Table,"cla: yes, P4",,,moonfruit: I refer to the code java.util.Map to make this change.  moonfruit: @amalloy Is there any problem with this?  ,2021-06-04 08:10:26,,2,7,2
Issue#5592 BlockingQueueWithBuffer,"type=addition, package=concurrent, cla: yes, P3",,cpovirk,"Chemdevil: I have created a BlockingQueueWithbuffer implementation. Can you please give comments. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Chemdevil: @googlebot I signed it!  ",2021-06-05 10:44:22,,7,4,3
Issue#5595 Finish annotating `AbstractInvocationHandler`.,cla: yes,,,"copybara-service: Finish annotating AbstractInvocationHandler. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-07 15:41:52,2021-06-07 16:02:25,0,0,0
Issue#5596 Update Public Suffix data.,cla: yes,,,copybara-service: Update Public Suffix data. RELNOTES=n/a  ,2021-06-07 18:17:41,2021-06-07 18:45:12,0,0,0
Issue#5597 Widen acceptable exception type for code path that currently throws IllegalCharsetException,cla: yes,,,"copybara-service: Widen acceptable exception type for code path that currently throws IllegalCharsetException 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-10 14:09:41,2021-06-10 14:31:15,0,0,0
Issue#5598 Add Keep-Alive to `HttpHeaders`.,cla: yes,,,copybara-service: Add Keep-Alive to HttpHeaders. RELNOTES=net: Added HttpHeaders constant for Keep-Alive.  ,2021-06-10 21:44:07,2021-06-10 22:04:29,0,0,0
Issue#5601 Internal change.,cla: yes,,,copybara-service: Internal change. RELNOTES=n/a  ,2021-06-14 16:13:03,2021-06-14 16:37:14,1,2,1
Issue#5603 Remove `@Beta` from `Interner` and `Interners`.,cla: yes,,,"copybara-service: Remove @Beta from Interner and Interners. They have been public since 2010. Realistically, we are not going to make incompatible API changes to them. Fixes #5594. RELNOTES=Interner and Interners are no longer @Beta but are fully supported. 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-14 22:11:45,2021-06-14 22:40:11,0,0,0
Issue#5604 Annotate Function for nullness.,cla: yes,,,"copybara-service: Annotate Function for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-15 00:21:57,2021-06-15 00:42:28,0,0,0
"Issue#5605 Annotate `ImmutableMap.get`, `Table.get`, and similar methods as potentially returning `null`.",cla: yes,,,"copybara-service: Annotate ImmutableMap.get, Table.get, and similar methods as potentially returning null. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-15 17:23:00,2021-06-15 17:45:06,0,0,0
Issue#5606 Finish annotating `SortedMultiset` for nullness.,cla: yes,,,"copybara-service: Finish annotating SortedMultiset for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-15 17:28:36,2021-06-15 17:49:17,0,0,0
Issue#5607 Finish annotating `io` for nullness.,cla: yes,,,copybara-service: Finish annotating io for nullness. RELNOTES=n/a  ,2021-06-15 17:30:55,2021-06-15 17:55:53,1,6,1
Issue#5608 Annotate a few more classes in `base`.,cla: yes,,,"copybara-service: Annotate a few more classes in base. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-15 17:32:10,2021-06-15 17:54:02,1,6,1
Issue#5609 Annotate most of `cache` for nullness.,cla: yes,,,"copybara-service: Annotate most of cache for nullness. I've skipped LocalCache. On the one hand, skipping it is a missed opportunity, as it's entirely believable that the complex, concurrent implementation code could have a bug. On the other hand, annotating it would be a huge effort to sink into a non-user-visible type. Plus, the complexity may force us to suppress errors (in which case we losing the benefit of checking for some code), and the concurrency may violate some of the assumptions of our checker, which doesn't account for concurrency (in which case the checker isn't actually proving what we want). It would still be good to do someday, but it seems like not the most valuable use of our time right now, especially given that we recommend Caffeine to most users, anyway. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-15 17:33:12,2021-06-15 18:00:16,0,0,0
Issue#5610 Add CheckForNull to Throwables.getCauseAs.,cla: yes,,,copybara-service: Add CheckForNull to Throwables.getCauseAs. RELNOTES=n/a  ,2021-06-15 17:57:28,2021-06-15 18:18:23,0,0,0
Issue#5611 Annotate `Multimap` classes for nullness.,cla: yes,,,"copybara-service: Annotate Multimap classes for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-15 19:35:50,2021-06-15 21:08:17,1,76,1
Issue#5614 Update RateLimiter.java,cla: yes,,,"ahmedElatrouz: Removing the @beta from the RateLimiter  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ahmedElatrouz: @googlebot I signed it!  cgdecker: Thanks for the PR, but removing @Beta is more of an issue of deciding that we're ok with locking down the API as it is and committing to not making breaking changes. In general we're trying to be more open to that, but I'm not sure about RateLimiter because I believe the person on our team who's worked with it the most feels there are some shortcomings to the design. I'm going to close this PR (we can pretty easily remove the annotation when we decide it should happen) but I'll see if I can get a more informed opinion on #5612.  ",2021-06-18 16:57:53,2021-06-18 20:47:25,1,1,2
Issue#5615 Annotate the rest of `util.concurrent` for nullness.,cla: yes,,,"copybara-service: Annotate the rest of util.concurrent for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-20 10:26:11,2021-06-20 10:45:43,0,0,0
Issue#5616 Annotate `Ordering` classes for nullness.,cla: yes,,,"copybara-service: Annotate Ordering classes for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-20 14:02:35,2021-06-20 14:22:51,0,0,0
Issue#5617 Annotate `RangeSet` classes for nullness.,cla: yes,,,copybara-service: Annotate RangeSet classes for nullness. RELNOTES=n/a  ,2021-06-20 22:19:43,2021-06-20 22:38:27,0,0,0
Issue#5619 Added url to guava pom,cla: yes,,,"jakobbraun: Closes #5618  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  jakobbraun: @googlebot I signed it!  ",2021-06-21 07:12:05,2021-06-21 15:32:31,1,1,1
Issue#5620 Add an explicit project URL to Guava's main `pom.xml`.,cla: yes,,,copybara-service: Add an explicit project URL to Guava's main pom.xml. Fixes #5618. Closes #5619. RELNOTES=n/a  ,2021-06-21 15:12:22,2021-06-21 15:32:29,0,0,0
Issue#5622 Add `HttpHeaders` constant for `Sec-CH-Prefers-Color-Scheme`.,cla: yes,,,"copybara-service: Add HttpHeaders constant for Sec-CH-Prefers-Color-Scheme. RELNOTES=net: Added HttpHeaders constant for Sec-CH-Prefers-Color-Scheme. 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-23 20:48:42,2021-06-23 21:22:35,0,0,0
Issue#5623 Polishing,cla: yes,,,"1993heqiang: 
No description provided.
  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  1993heqiang: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info. Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info. @googlebot I signed it!  eamonnmcmanus: The first line of each of these files says: However, we can fix the code that generates them. Thanks for notifying us!  ",2021-06-24 12:03:25,2021-06-25 17:03:02,1,2,2
Issue#5624 Fix BloomFilter tutorial URL,cla: yes,eamonnmcmanus,,"gastaldi: Fixes the tutorial URL in the BloomFilter javadoc 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  gastaldi: @googlebot I signed it!  ",2021-06-24 16:28:14,2021-06-26 20:08:54,1,1,1
Issue#5626 Fix an incorrect javadoc tag. Thanks to @1993heqiang for the bug report.,cla: yes,,,"copybara-service: Fix an incorrect javadoc tag. Thanks to @1993heqiang for the bug report. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-25 17:17:02,2021-06-25 17:38:49,0,0,0
Issue#5627 Fix BloomFilter tutorial URL.,cla: yes,,,"copybara-service: Fix BloomFilter tutorial URL. Closes #5624. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-26 19:48:59,2021-06-26 20:08:55,1,2,1
"Issue#5631 Annotate some ""sorted"" types for nullness.",cla: yes,,,"copybara-service: Annotate some ""sorted"" types for nullness. RELNOTES=n/a  ",2021-06-29 01:52:54,2021-06-29 02:13:14,1,17,1
Issue#5632 Annotate some forwarding classes for nullness.,cla: yes,,,copybara-service: Annotate some forwarding classes for nullness. RELNOTES=n/a  ,2021-06-29 19:22:12,2021-06-29 19:42:41,1,46,1
Issue#5633 Annotate `collect` static utilities for nullness.,cla: yes,,,"copybara-service: Annotate collect static utilities for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-06-30 10:11:14,2021-06-30 10:33:23,1,34,1
Issue#5635 Annotate bimaps for nullness.,cla: yes,,,copybara-service: Annotate bimaps for nullness. RELNOTES=n/a  ,2021-06-30 18:40:15,2021-06-30 19:01:09,0,0,0
Issue#5636 Fix Javadoc links in c.g.common.,cla: yes,,,"copybara-service: Fix Javadoc links in c.g.common. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-01 13:23:27,2021-07-05 20:18:08,1,2,1
Issue#5638 Remove else keyword,cla: yes,,,"JuHyun419: If the if statement is satisfied, the method returns immediately.
so, remove else keyword.  cpovirk: Some people prefer to include else so that the two return statements are parallel and so that it's absolutely immediately clear that the two branches can't both execute. Others prefer to omit else because it's unnecessary extra code. I suspect that we're not consistent about this across all of Guava, but I think that that's OK, and I think this code is OK either way.  ",2021-07-07 16:22:57,2021-07-07 18:07:30,1,1,2
Issue#5639 Fix javadoc lint,cla: yes,,,"copybara-service: Fix javadoc lint The latest versions of javadoc require html5, and disallow the <tt> tag. RELNOTES=N/A 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-07 18:05:55,2021-07-07 18:24:44,0,0,0
"Issue#5640 Annotate remaining immutable map classes for nullness, updating callers as needed.",cla: yes,,,"copybara-service: Annotate remaining immutable map classes for nullness, updating callers as needed. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-07 18:18:49,2021-07-07 18:38:48,0,0,0
Issue#5641 Remove Generic's type parameter,cla: yes,,,"JuHyun419: Remove Generic's type parameter(type inference) in return 



              The text was updated successfully, but these errors were encountered:
              kevinb9n: JuHyun419, the pull requests you've been sending simply aren't helpful. Please don't send more like these.  kevinb9n: I'm sorry for giving a too-brief reply that might have communicated hostility. I'll explain better. Your last three PRs (including this) have addressed only questions of pure preference -- some people prefer it one way, some the other. And in fact, small cleanups to implementation code are not always worth merging, even when we would agree it's how we'd rather have done it the first time. To give one example, sometimes innocent-seeming changes can break users who are transpiling our source code to other languages. We explained individually on the previous two issues why we were closing them, but I wanted to make sure to address the overall pattern. HTH  ",2021-07-08 00:10:26,2021-07-08 01:05:27,1,1,2
Issue#5642 - Annotate some `Iterator` classes for nullness.,cla: yes,,,"copybara-service: Annotate some Iterator classes for nullness. Update some of the usages of those classes inside com.google.common to reflect that nulls may pass through endOfData() and computeNext(). Belatedly add a corresponding @ParametricNullness annotation to the package-private common.base copy of AbstractIterator. (I think it's academic there, since we don't create AbstractIterator instances with potentially null elements in common.base, but we might as well keep the 2 copies of AbstractIterator in sync.) Standardize a few TODOs around b/192579700. RELNOTES=n/a  ",2021-07-09 17:09:18,2021-07-09 17:31:13,0,0,0
Issue#5644 Halve the memory used by BloomFilter.readFrom(),"type=enhancement, package=hash, cla: no, P4",,,"pwr2c: The BloomFilters  readFrom method reads into a separately allocated array, then converts (clones) the array into the expected object.
The code has been modified to directly read into the final array, not requiring two instances of the array (for a short duration) and the time/cpu used for the copy. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2021-07-12 23:58:31,,1,1,2
Issue#5645 Annotate the core `Range` classes for nullness.,cla: yes,,,"copybara-service: Annotate the core Range classes for nullness. (Rather than annotate the helper method Range.cast, inline it, which is incremental progress toward resolving #3679.) This work highlighted that DiscreteDomain.offset would behave wrongly if passed a too-large distance: It would return null or throw NullPointerException. I believe that this is currently academic: offset is called only by RegularContiguousSet, and the call there is safe for not just one but two reasons: Still, it's trivial to fix properly and add a test for, so I've done that. Maybe it will matter someday in the future. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-14 18:49:33,2021-07-14 19:15:11,0,0,0
Issue#5646 Annotate `Table` classes for nullness.,cla: yes,,,"copybara-service: Annotate Table classes for nullness. Also, standardize some code comments about contains(o) && o instanceof Entry in entrySet implementations.) RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-15 15:17:13,2021-07-15 15:41:28,1,28,1
Issue#5649 Fix murmur3_32 with UTF-8 encoding for input with non-BMP character,"type=defect, package=hash, cla: yes, P3","cpovirk, eamonnmcmanus",eamonnmcmanus,"findepi: Fixes #5648  findepi: Admittedly, this as is not the most optimal approach, i will try to figure out how to fix the code without bailing out.
However, even with current state i think it's an improvement (""correctness first""). (obsolete)  findepi: @lowasser i realized the proper fix is a one-liner. @lowasser @cpovirk can you PTAL?  findepi: @lowasser seems like you authored portions of the code being changed here.
would you like to drop your two cents on the PR?  eamonnmcmanus: I think we have a concern that fixing this bug may produce problems for systems that were persisting the old wrong hashcode, for example using it as part of a key in persistent storage. We recognize that the current computed hashcode is wrong, and that it is inconsistent with the hashcode you get if you hash the same string in a different but supposedly equivalent way. We haven't yet figured out the best way forward.  findepi: @eamonnmcmanus thank you for your reply. I think we have a concern that fixing this bug may produce problems for systems that were persisting the old wrong hashcode, for example using it as part of a key in persistent storage. i sympathize with concern. Actually this is this context where we were able to identify the bug.
Guava-based code was not producing same hash value as non-Guava-based code. We recognize that the current computed hashcode is wrong, and that it is inconsistent with the hashcode you get if you hash the same string in a different but supposedly equivalent way. Thanks for making it clear. Note that it's not only about Guava APIs that should return same results (but they do not).
It's also about interoperability between applications that use Guava for calculating murmur3 and those that do not.
For example, as in apache/iceberg#2836 (comment), it would be hard to implement 'compatible' hashing for Python. We haven't yet figured out the best way forward. I don't think not fixing a bug is a long term option for anyone, would you agree?
What are the options you're considering? I think we can consider can you think of any other options?  eamonnmcmanus: There's a subtle problem with this. (At least, it took me a while to figure it out.) A byte array from the UTF_16 encoding starts with a two-byte Byte Order Mark (BOM) which is either fe ff or ff fe and indicates the endianness that the remaining bytes will use. It's not specified which endianness a given Java platform will use, so it's not correct to hash a string using the UTF_16 encoding if you want the result to be portable. I discovered this because some non-public tests were using the opposite endianness and failing. I rewrote these test cases to use UTF_16LE and updated the hashcodes. (You don't need to do that here but if we go ahead with this change then the modified test will be in the version that we use.)  findepi: @eamonnmcmanus indeed, this isn't portable. Thanks for catching this.
UTF-16LE is as good, as the only point of this test coverage is to exercise the code path that was not optimized for UTF-8. If there is any value in changing anything in this PR, i am happy to apply changes.  cpovirk: I saw a reference to this conversation, and I dug up Android issue 37074504 (fix), last seen as ""https://code.google.com/p/android/issues/detail?id=196848"" in ByteStreamsTest. I think what √âamonn is seeing is a bug in the very old version of Android that we test with. UTF-16LE is still the right pragmatic fix -- and probably the one I should have employed in ByteStreamsTest!  findepi: Done, changed to UTF-16LE (and updated the expected hashes accordingly).  findepi: Per #5649 (comment) i changed UTF-16 to UTFLE. I also rebased on current master to resolve conflicts and let the CI run.
#5654 was merged which added a couple more test cases.  findepi: @eamonnmcmanus @cpovirk is there anything i can do to help move this forward?  eamonnmcmanus: @eamonnmcmanus @cpovirk is there anything i can do to help move this forward? Deciding what to do here is on our queue of things to do. The fix in this PR will form the basis of whatever we decide on, but we don't yet know what that will be. In answer to the specific question, I think you've given us everything we need. Thanks!  ",2021-07-16 17:32:27,,4,2,4
Issue#5650 Suppress nullness warnings in `LocalCache` so that we can include it in the list of files that we pass to the nullness checker.,cla: yes,,,copybara-service: Suppress nullness warnings in LocalCache so that we can include it in the list of files that we pass to the nullness checker. RELNOTES=n/a  ,2021-07-16 19:05:04,2021-07-16 19:29:50,1,2,1
Issue#5651 Internal change.,cla: yes,,,copybara-service: Internal change. RELNOTES=n/a  ,2021-07-19 15:23:33,2021-07-19 15:43:17,1,2,1
Issue#5652 Annotate most remaining static utility APIs for nullness.,cla: yes,,,"copybara-service: Annotate most remaining static utility APIs for nullness. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-19 15:41:59,2021-07-19 16:02:14,1,2,1
Issue#5654 Remove redundant bit masking,"package=hash, type=performance, cla: yes, P3",eamonnmcmanus,eamonnmcmanus,"findepi: 
No description provided.
  eamonnmcmanus: I agree with the idea behind this PR. The existing code has a rather weird way of implementing the UTF-8 principle where the number of high 1 bits in the first byte indicates how many bytes there are. Your rewrite makes this clearer, since the masks are 0x3, 0x7, 0xF for 2, 3, or 4 bytes respectively.  findepi: @eamonnmcmanus added assert (can replace with a comment if you prefer so).
Also added test cases which exercise edge case values.  findepi: @eamonnmcmanus changed to comments
also, added a clarifying TODO comment in the test case, where i had to use an incorrect expected value.  eamonnmcmanus: Thanks, this looks fine. Because of the way we sync between our internal repo and GitHub, we'll be closing this PR and sending out an equivalent one, duly attributed to you.  findepi: Thanks for review  findepi: @eamonnmcmanus thanks for merging  ",2021-07-20 09:39:07,2021-07-29 18:23:36,1,2,3
Issue#5655 Add MoreFiles.buildTraverser() which has customizable error handling,"type=addition, package=io, cla: yes",,,"PrachiPrakash: This adds a MoreFiles.buildTraverser() which  can used in the following way to handle IOException in a lenient way  nick-someone: Hi there! Per https://github.com/google/guava/blob/master/CONTRIBUTING.md#api-changes, we generally don't accept changes to the public API without thorough review, accounting for the likelihood of wide use, available alternatives, etc. If you're interested in getting this added, we'd love to understand your use case in more detail. However, we don't tend to provide APIs that swallow IOException in a way that masks underlying errors, so it might be a pretty hard sell.  ",2021-07-21 09:53:48,2021-07-26 13:50:00,1,2,2
Issue#5656 Annotate the compact collections for nullness.,cla: yes,,,copybara-service: Annotate the compact collections for nullness. RELNOTES=n/a  ,2021-07-24 18:52:02,2021-07-24 19:17:27,0,0,0
Issue#5657 Fix a bug in hashing strings with non-BMP chars using Murmur3_32.,cla: yes,,,copybara-service: Fix a bug in hashing strings with non-BMP chars using Murmur3_32. RELNOTES=n/a  ,2021-07-26 21:06:42,,1,4,1
Issue#5658 Remove redundant bit masking.,cla: yes,,,"copybara-service: Remove redundant bit masking. Also add some more test cases for hashString. Closes #5654. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-29 17:59:25,2021-07-29 18:23:36,0,0,0
Issue#5659 Suppress errorprone warnings for unit tests,cla: yes,,,"copybara-service: Suppress errorprone warnings for unit tests 



              The text was updated successfully, but these errors were encountered:
              ",2021-07-30 02:27:55,2021-07-30 02:48:32,0,0,0
Issue#5660 Bump styfle/cancel-workflow-action from 0.9.0 to 0.9.1,"cla: yes, dependencies",,,"dependabot: Bumps styfle/cancel-workflow-action from 0.9.0 to 0.9.1. Sourced from styfle/cancel-workflow-action's releases. Huge thanks to @‚Äãmikehardy, @‚ÄãMichaelDeBoey, @‚ÄãWarashi, @‚Äãadrienbernede, and @‚Äãspaceface777 for helping!  Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase. You can trigger Dependabot actions by commenting on this PR:  dependabot: OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting @dependabot ignore this major version or @dependabot ignore this minor version. You can also ignore all major, minor, or patch releases for a dependency by adding an ignore condition with the desired update_types to your config file. If you change your mind, just re-open this PR and I'll resolve any conflicts on it.  ",2021-07-30 15:06:53,2021-08-02 17:52:37,1,1,0
Issue#5661 Add text to `CompactHashMap` to explain its internal workings in more detail.,cla: yes,,,"copybara-service: Add text to CompactHashMap to explain its internal workings in more detail. The motivation is that we were recently visiting this class and related classes to improve their nullness annotations, and I as a reviewer found it hard to understand how the various arrays worked. RELNOTES=n/a  ",2021-07-31 00:42:47,2021-08-02 21:41:39,1,6,1
Issue#5662 Sync master 2020/01/09,cla: no,,,"sky1415926535: 
No description provided.
 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2021-08-02 15:42:04,2021-08-02 15:43:54,2,44,2
Issue#5663 Bump styfle/cancel-workflow-action from 0.9.0 to 0.9.1,cla: yes,,,copybara-service: Bump styfle/cancel-workflow-action from 0.9.0 to 0.9.1 Fixes #5660 RELNOTES=n/a  ,2021-08-02 17:29:14,2021-08-02 17:52:36,0,0,0
Issue#5664 Annotate the remaining public classes under `collect` for nullness.,cla: yes,,,"copybara-service: Annotate the remaining public classes under collect for nullness. And fix the annotations on the paddedPartition methods: I had annotated them as returning a series of lists of T, but in fact they return a series of lists of @Nullable T. We got away with this because of a combination of: I was going to say that I suspected that the bug is fundamentally the same bug as b/192579700. (Regardless, I'll try to add a sample input for both this problem and b/192579700 so that we can eventually work toward fixing both.) But from glancing at how I originally annotated this file when I was using the stock Checker Framework back in 2019, I get the impression that even it may have somehow missed this. If so, I'll ideally also report the problem upstream. Finally, I'll note that this CL includes tiny steps toward addressing #989 (particularly the part reported as #1015), albeit only inside implementation code. RELNOTES=n/a  ",2021-08-04 13:07:11,2021-08-04 13:28:38,1,28,1
Issue#5665 Stop rejecting nulls in `EvictingQueue.contains` and `remove`.,cla: yes,,,copybara-service: Stop rejecting nulls in EvictingQueue.contains and remove. RELNOTES=n/a  ,2021-08-04 13:55:09,2021-08-04 14:13:01,1,2,1
Issue#5666 Remove newly redundant overrides from `EvictingQueue`.,cla: yes,,,"copybara-service: Remove newly redundant overrides from EvictingQueue. These signatures match the ones inherited from ForwardingCollection, including matching their types' nullness. The implementation matches, too. This CL is a followup to CL 388688929. It was also made possible by CL 382143120, which annotated ForwardingCollection. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-08-04 18:32:25,2021-08-04 18:53:38,1,2,1
Issue#5667 Modified description of `MoreCollectors.toOptional` for increased readability.,cla: yes,Stephan202,,copybara-service: Modified description of MoreCollectors.toOptional for increased readability. RELNOTES=n/a  Stephan202:  ,2021-08-04 20:17:36,2021-08-10 16:54:16,1,2,2
Issue#5668 Annotate most remaining classes in `collect` for nullness.,cla: yes,,,"copybara-service: Annotate most remaining classes in collect for nullness. These classes aren't publicly visible, so this CL might not really matter to users (unless, of course, it help us find bugs before they affect users!). But to be sure, I'd want to verify that none have publicly visible subclasses. (I suspect that none do, but I haven't looked carefully.) I skipped MapMakerInternalMap, which, like its successor LocalCache, I deemed to be too much trouble to be worth it. (Still, since I still added MapMakerInternalMap to the list of files to run through the nullness checker, I had to add @SuppressWarnings(""nullness"") on at least part of it, since it assigns null to a field that it also dereferences. Maybe it would have been nicer for me to suppress only where needed (or to use requireNonNull/uncheckedCastNullableTToT), leaving a comment about the safety of that particular operation. But I figured it was best to not give any impression that we're getting our usual automated nullness checking in the class. This is similar to what I did for LocalCache in CL 384759595.) RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-08-05 00:18:43,2021-08-05 00:40:36,1,26,1
Issue#5669 Qualify `Entry` as `Map.Entry` or `Multiset.Entry` throughout `Synchronized`.,cla: yes,,,"copybara-service: Qualify Entry as Map.Entry or Multiset.Entry throughout Synchronized. Previously we imported java.util.Map.Entry, but some occurrences of plain Entry were actually Multiset.Entry because inherited nested classes take precedence over imports. RELNOTES=n/a  ",2021-08-05 02:11:19,2021-08-05 02:32:45,1,2,1
Issue#5670 Annotate remaining `Range`-related classes for nullness.,cla: yes,,,"copybara-service: Annotate remaining Range-related classes for nullness. While there, improve documentation of RangeMap.merge. RELNOTES=n/a  ",2021-08-05 18:15:54,2021-08-05 19:02:02,1,8,1
Issue#5671 fix: typo spelling grammar,cla: yes,eamonnmcmanus,,"slowy07: fixing typo and replace to correct word with reference from Merriam webster and wikitionary  eamonnmcmanus: Thanks! We can't change Referer, but we can fix the other typo. This PR will be superseded by an equivalent one generated by our internal source code repository and credited to you.  ",2021-08-06 12:05:02,2021-08-09 15:36:09,2,2,2
Issue#5672 Modified description of MoreCollectors.toOptional for increased readability.,cla: yes,Stephan202,,copybara-service: Modified description of MoreCollectors.toOptional for increased readability. RELNOTES=n/a  Stephan202: Same as #5667 (comment):  ,2021-08-07 08:13:00,2021-08-09 15:37:56,1,1,2
Issue#5676 Use a single Supplier instance inside a configured MultiMapBuilder,"cla: yes, P3",cpovirk,,"CodingFabian: fixes #5673  CodingFabian: This change required a bit of generics magic, since previously the suppliers got a type assigned that was dependent on the V type of the assigned variable (from the return type of the build signature) I followed the pattern already existing for EnumSet to derive V from V0, and that does compile correctly with the forced V0 -> V casts generally speaking: the type here doesn't matter. the Suppliers will always create empty backing collections which can be of any type at compile time and runtime. if there is a better way to do this, I appreciate the insight  CodingFabian: If consistency is preferred, I think we can rework LinkedListSupplier supplier to also use an instance per builder, instead of the lazily initialized global one.  ",2021-08-09 11:08:28,,1,1,2
Issue#5677 Fix a typo in `TypeResolver`.,cla: yes,,,copybara-service: Fix a typo in TypeResolver. Closes #5671. RELNOTES=n/a  ,2021-08-09 15:16:21,2021-08-09 15:36:08,0,0,0
Issue#5678 Update Public Suffix data.,cla: yes,,,"copybara-service: Update Public Suffix data. RELNOTES=n/a 



              The text was updated successfully, but these errors were encountered:
              ",2021-08-09 23:58:24,2021-08-10 00:19:57,0,0,0
Issue#5679 Add `CacheBuilder.recordStats(boolean)`,cla: no,,,"andi-livn: Add CacheBuilder.recordStats(boolean) for easier in-line configuration of statistics collection while assembling CacheBuilder.  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ",2021-08-10 02:34:30,2021-08-10 02:38:28,1,1,1
"Issue#5683 Temporarily add a nullness suppression, which we'll remove after annotating `ClassToInstanceMap` in an upcoming CL.",cla: yes,,,"copybara-service: Temporarily add a nullness suppression, which we'll remove after annotating ClassToInstanceMap in an upcoming CL. RELNOTES=n/a  ",2021-08-10 13:13:52,2021-08-10 13:43:29,1,2,1
Issue#5685 Reject non-ASCII digits in `HostAndPort` port numbers.,cla: yes,,,"copybara-service: Reject non-ASCII digits in HostAndPort port numbers. In HostAndPort.fromString, we previously allowed any Unicode digit. But the RFCs generally call for ASCII digits specifically. Document that InetAddresses.forString and related methods do allow non-ASCII digits and explain how to check for their presence. We found that a number of projects were testing that these digits work, so changing that seems risky. Fixes #5681.
Fixes #5682. Thanks to @Marcono1234 for the bug report. RELNOTES=net: Port numbers spelled with non-ASCII digits are no longer allowed in HostAndPort.fromString.  ",2021-08-12 16:40:27,2021-08-12 17:01:54,1,8,1
Issue#5687 Don't set the executable bit on backport files.,cla: yes,,,copybara-service: Don't set the executable bit on backport files. RELNOTES=n/a  ,2021-08-17 15:21:31,2021-08-17 15:44:35,1,29,1
"Issue#5688 Add `@SuppressWarnings(""nullness"")` for classes that we haven't enabled continuous nullness checking for.",cla: yes,,,"copybara-service: Add @SuppressWarnings(""nullness"") for classes that we haven't enabled continuous nullness checking for. RELNOTES=n/a  ",2021-08-18 19:01:39,2021-08-18 19:25:58,1,7,1
Issue#5689 Add a few nullness annotations that I'd deferred for later.,cla: yes,,,copybara-service: Add a few nullness annotations that I'd deferred for later. RELNOTES=n/a  ,2021-08-18 19:06:47,2021-08-18 19:30:12,1,2,1
Issue#5690 Copy the `setUp` and `tearDown` from the parent builder to derived test suites.,cla: yes,,,"copybara-service: Copy the setUp and tearDown from the parent builder to derived test suites. Fixes #5674. RELNOTES=In collection test suites, the setUp and tearDown are copied to derived test suites. 



              The text was updated successfully, but these errors were encountered:
              ",2021-08-18 22:28:43,2021-08-18 22:49:51,1,22,1
Issue#5691 Fix bug that result of TopKSelector is unstable when quicksort fallback to Arrays.sort.,cla: yes,,,"Liulietong: The result of TopKSelector may be wrong when trim() is invoked and quiksort fallback to Arrasys.sort(). Because Arrasys.sort() is been used by mistake there.
Following test case can trigger this bug.  google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  Liulietong: @googlebot I signed it!  ",2021-08-19 11:52:17,,1,2,1
Issue#5693 Remove `ClassValue` implementation of `Futures.getChecked` from the Android flavor.,cla: yes,,,"copybara-service: Remove ClassValue implementation of Futures.getChecked from the Android flavor. It doesn't work there, even under new versions of Android, so it always triggers fallback, and the process of falling back burns resources and produces noise. (JRE users of guava-android could benefit from the ClassValue implementation, but now that we're dropping support for Java 7 from guava-android, there's no reason for them to use it. OK, probably some users run Robolectric tests against guava-android. But presumably they aren't too sensitive to the performance of getChecked in the failure case.) Removing ClassValue support also lets us remove a bunch of Animal-Sniffer cruft. That includes upgrading it to 1.19, which in turn forces us to remove some usages of new APIs from our tests -- not nearly as important as usages in prod but still a good idea so that any future Android test failures are reported to us correctly instead of hidden by NoSuchMethodError or similar. Or actually, Animal-Sniffer 1.20 turned checking of test sources back off, but let's opt in anyway, at least to see how it goes, at least for the tests of guava-testlib. (guava-tests itself is more of a pain, so I left a TODO.) RELNOTES=n/a  ",2021-08-19 15:41:16,2021-08-19 16:44:11,1,14,1
Issue#5694 recreate old travis file.,cla: no,,,"ghost: recreate old travis file. 



              The text was updated successfully, but these errors were encountered:
              google-cla: Thanks for your pull request. It looks like this may be your first contribution to a Google open source project (if not, look below for help). Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA). üìù Please visit https://cla.developers.google.com/ to sign. Once you've signed (or fixed any issues), please reply here with @googlebot I signed it! and we'll verify it. ‚ÑπÔ∏è Googlers: Go here for more info.  ghost: mistake.  ghost: closing as not necessary.  ",2021-08-20 02:32:19,2021-08-20 03:26:17,1,1,0
